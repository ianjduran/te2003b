
IPod32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b34  08005b34  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b34  08005b34  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b34  08005b34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035bc  20000074  08005bb0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003630  08005bb0  00023630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193e5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003802  00000000  00000000  00039482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000555e  00000000  00000000  0003ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bd7  00000000  00000000  000443ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915a1  00000000  00000000  00057f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  000e957c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005838 	.word	0x08005838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005838 	.word	0x08005838

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <init_lcd_task>:
osMessageQueueId_t lcdMsgHandle;
const osMessageQueueAttr_t lcdMessageHandleAttrs = {
		.name = "lcdMessageHandle",
};

void init_lcd_task(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	LCD_Init();
 8000164:	f000 f962 	bl	800042c <LCD_Init>
	lcdMsgHandle = osMessageQueueNew(5, sizeof(LCDData), NULL);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	2005      	movs	r0, #5
 8000170:	f002 f874 	bl	800225c <osMessageQueueNew>
 8000174:	4603      	mov	r3, r0
 8000176:	4a04      	ldr	r2, [pc, #16]	; (8000188 <init_lcd_task+0x28>)
 8000178:	6013      	str	r3, [r2, #0]
	set_lcd("Hello World Hola Ian Hola abiel Hola andy hola diego", "Buenas buenas buenas buenas!");
 800017a:	4904      	ldr	r1, [pc, #16]	; (800018c <init_lcd_task+0x2c>)
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <init_lcd_task+0x30>)
 800017e:	f000 f8d5 	bl	800032c <set_lcd>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	20003574 	.word	0x20003574
 800018c:	08005864 	.word	0x08005864
 8000190:	08005884 	.word	0x08005884

08000194 <lcd_task>:

void lcd_task(){
 8000194:	b580      	push	{r7, lr}
 8000196:	b0ca      	sub	sp, #296	; 0x128
 8000198:	af00      	add	r7, sp, #0
	init_lcd_task();
 800019a:	f7ff ffe1 	bl	8000160 <init_lcd_task>

	LCDData data;
	memset(data.line1, 0, sizeof(data.line1));
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2280      	movs	r2, #128	; 0x80
 80001a2:	2100      	movs	r1, #0
 80001a4:	4618      	mov	r0, r3
 80001a6:	f004 fe83 	bl	8004eb0 <memset>
	memset(data.line2, 0, sizeof(data.line2));
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	3380      	adds	r3, #128	; 0x80
 80001ae:	2280      	movs	r2, #128	; 0x80
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f004 fe7c 	bl	8004eb0 <memset>
	int line1_char = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	int line2_char = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	int line1_delay_count = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int line2_delay_count = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while(1){
		osStatus_t ret = osMessageQueueGet(lcdMsgHandle, &data, NULL, 0);
 80001d0:	4b54      	ldr	r3, [pc, #336]	; (8000324 <lcd_task+0x190>)
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	1d39      	adds	r1, r7, #4
 80001d6:	2300      	movs	r3, #0
 80001d8:	2200      	movs	r2, #0
 80001da:	f002 f939 	bl	8002450 <osMessageQueueGet>
 80001de:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		if (ret == osOK){
 80001e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d10e      	bne.n	8000208 <lcd_task+0x74>
			//New message, reset current char
			line1_char = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			line2_char = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			line1_delay_count = 1000000;
 80001f6:	4b4c      	ldr	r3, [pc, #304]	; (8000328 <lcd_task+0x194>)
 80001f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			line2_delay_count = 1000000;
 80001fc:	4b4a      	ldr	r3, [pc, #296]	; (8000328 <lcd_task+0x194>)
 80001fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			LCD_Clear();
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fa38 	bl	8000678 <LCD_Write_Cmd>
		}

		size_t line1_size = strlen(data.line1);
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4618      	mov	r0, r3
 800020c:	f7ff ffa0 	bl	8000150 <strlen>
 8000210:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		size_t line2_size = strlen(data.line2);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	3380      	adds	r3, #128	; 0x80
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ff99 	bl	8000150 <strlen>
 800021e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

		//Clear lcd
		LCD_Clear();
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fa28 	bl	8000678 <LCD_Write_Cmd>
		LCD_BarGraphic(0,0);
 8000228:	2100      	movs	r1, #0
 800022a:	2000      	movs	r0, #0
 800022c:	f000 facc 	bl	80007c8 <LCD_BarGraphic>

		//line1_delay_count++;
		//line2_delay_count++;

		if(line1_delay_count >= 250){
 8000230:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000234:	2bf9      	cmp	r3, #249	; 0xf9
 8000236:	dd35      	ble.n	80002a4 <lcd_task+0x110>
			//Draw line 1
			LCD_Set_Cursor(1, 0);
 8000238:	2100      	movs	r1, #0
 800023a:	2001      	movs	r0, #1
 800023c:	f000 fa42 	bl	80006c4 <LCD_Set_Cursor>
			for(int i = line1_char; i < line1_char + 16 && i < line1_size; i++){
 8000240:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000244:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000248:	e00c      	b.n	8000264 <lcd_task+0xd0>
				//Send chars
				LCD_Put_Char(data.line1[i]);
 800024a:	1d3a      	adds	r2, r7, #4
 800024c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000250:	4413      	add	r3, r2
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fa23 	bl	80006a0 <LCD_Put_Char>
			for(int i = line1_char; i < line1_char + 16 && i < line1_size; i++){
 800025a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800025e:	3301      	adds	r3, #1
 8000260:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000264:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000268:	330f      	adds	r3, #15
 800026a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800026e:	429a      	cmp	r2, r3
 8000270:	dc05      	bgt.n	800027e <lcd_task+0xea>
 8000272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000276:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800027a:	429a      	cmp	r2, r3
 800027c:	d8e5      	bhi.n	800024a <lcd_task+0xb6>
			}

			//Increment char counts
			line1_char++;
 800027e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000282:	3301      	adds	r3, #1
 8000284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if(line1_char + 16 > line1_size){
 8000288:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800028c:	3310      	adds	r3, #16
 800028e:	461a      	mov	r2, r3
 8000290:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000294:	4293      	cmp	r3, r2
 8000296:	d202      	bcs.n	800029e <lcd_task+0x10a>
				line1_char = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			}


			line1_delay_count = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}

		if(line2_delay_count >= 500){
 80002a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80002a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002ac:	db36      	blt.n	800031c <lcd_task+0x188>
			//Draw line 2
			LCD_Set_Cursor(2, 0);
 80002ae:	2100      	movs	r1, #0
 80002b0:	2002      	movs	r0, #2
 80002b2:	f000 fa07 	bl	80006c4 <LCD_Set_Cursor>
			for(int i = line2_char; i < line2_char + 16 && i < line2_size; i++){
 80002b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80002ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80002be:	e00d      	b.n	80002dc <lcd_task+0x148>
				//Send chars
				LCD_Put_Char(data.line2[i]);
 80002c0:	1d3a      	adds	r2, r7, #4
 80002c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80002c6:	4413      	add	r3, r2
 80002c8:	3380      	adds	r3, #128	; 0x80
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f9e7 	bl	80006a0 <LCD_Put_Char>
			for(int i = line2_char; i < line2_char + 16 && i < line2_size; i++){
 80002d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80002d6:	3301      	adds	r3, #1
 80002d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80002dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80002e0:	330f      	adds	r3, #15
 80002e2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80002e6:	429a      	cmp	r2, r3
 80002e8:	dc05      	bgt.n	80002f6 <lcd_task+0x162>
 80002ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80002ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8e4      	bhi.n	80002c0 <lcd_task+0x12c>
			}

			line2_char++;
 80002f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80002fa:	3301      	adds	r3, #1
 80002fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if(line2_char + 16 >= line2_size){
 8000300:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000304:	3310      	adds	r3, #16
 8000306:	461a      	mov	r2, r3
 8000308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800030c:	4293      	cmp	r3, r2
 800030e:	d802      	bhi.n	8000316 <lcd_task+0x182>
				line2_char = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			}

			line2_delay_count = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		}

		osDelay(1);
 800031c:	2001      	movs	r0, #1
 800031e:	f001 ff6f 	bl	8002200 <osDelay>
	while(1){
 8000322:	e755      	b.n	80001d0 <lcd_task+0x3c>
 8000324:	20003574 	.word	0x20003574
 8000328:	000f4240 	.word	0x000f4240

0800032c <set_lcd>:
	}
}

osStatus_t set_lcd(char *line1, char *line2){
 800032c:	b580      	push	{r7, lr}
 800032e:	b0c2      	sub	sp, #264	; 0x108
 8000330:	af00      	add	r7, sp, #0
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	6018      	str	r0, [r3, #0]
 8000336:	463b      	mov	r3, r7
 8000338:	6019      	str	r1, [r3, #0]
	LCDData data;
	strncpy(data.line1, line1, sizeof(data.line1));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	f107 0008 	add.w	r0, r7, #8
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	6819      	ldr	r1, [r3, #0]
 8000344:	f004 fec4 	bl	80050d0 <strncpy>
	strncpy(data.line2, line2, sizeof(data.line2));
 8000348:	463b      	mov	r3, r7
 800034a:	f107 0208 	add.w	r2, r7, #8
 800034e:	f102 0080 	add.w	r0, r2, #128	; 0x80
 8000352:	2280      	movs	r2, #128	; 0x80
 8000354:	6819      	ldr	r1, [r3, #0]
 8000356:	f004 febb 	bl	80050d0 <strncpy>
	return osMessageQueuePut(lcdMsgHandle, &data, NULL, 0);
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <set_lcd+0x4c>)
 800035c:	6818      	ldr	r0, [r3, #0]
 800035e:	f107 0108 	add.w	r1, r7, #8
 8000362:	2300      	movs	r3, #0
 8000364:	2200      	movs	r2, #0
 8000366:	f001 ffff 	bl	8002368 <osMessageQueuePut>
 800036a:	4603      	mov	r3, r0
}
 800036c:	4618      	mov	r0, r3
 800036e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20003574 	.word	0x20003574

0800037c <USER_TIM2_Delay>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};


// Timer delay
void USER_TIM2_Delay(uint16_t x, uint16_t y){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	460a      	mov	r2, r1
 8000386:	80fb      	strh	r3, [r7, #6]
 8000388:	4613      	mov	r3, r2
 800038a:	80bb      	strh	r3, [r7, #4]
	TIM2->SMCR &= ~TIM_SMCR_ECE		// External clock 2 mode disabled
 800038c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800039a:	f023 0307 	bic.w	r3, r3, #7
 800039e:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;	// slave mode disabled / internal clock

	// Timer 2 control register 1
	TIM2->CR1 &= ~TIM_CR1_CMS 		//
 80003a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80003ae:	6013      	str	r3, [r2, #0]
			  &	 ~TIM_CR1_DIR
			  &	 ~TIM_CR1_URS
			  &	 ~TIM_CR1_UDIS
			  &	 ~TIM_CR1_CEN;
	TIM2->CR1 |= TIM_CR1_ARPE;
 80003b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003be:	6013      	str	r3, [r2, #0]

	TIM2->PSC = x;
 80003c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c4:	88fb      	ldrh	r3, [r7, #6]
 80003c6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = y;
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003cc:	88bb      	ldrh	r3, [r7, #4]
 80003ce:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80003d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6153      	str	r3, [r2, #20]
	TIM2->SR  &= ~TIM_SR_UIF;
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ea:	f023 0301 	bic.w	r3, r3, #1
 80003ee:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 80003f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]
	while((TIM2->SR & TIM_SR_UIF) == 0){
 8000400:	bf00      	nop
 8000402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f8      	beq.n	8000402 <USER_TIM2_Delay+0x86>

	}

	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041a:	f023 0301 	bic.w	r3, r3, #1
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
	...

0800042c <LCD_Init>:

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
	char const *p;

	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN; //		I/O port B clock enabled
 8000432:	4b59      	ldr	r3, [pc, #356]	; (8000598 <LCD_Init+0x16c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a58      	ldr	r2, [pc, #352]	; (8000598 <LCD_Init+0x16c>)
 8000438:	f043 0308 	orr.w	r3, r3, #8
 800043c:	6193      	str	r3, [r2, #24]

	// Configuracion de todos los pines hacia el LCD
	/* As general purpose output push-pull, 10 MHz speed
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	*/
	GPIOB->CRH	&= ~GPIO_CRH_CNF12 & ~GPIO_CRH_MODE12_1;
 800043e:	4b57      	ldr	r3, [pc, #348]	; (800059c <LCD_Init+0x170>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4a56      	ldr	r2, [pc, #344]	; (800059c <LCD_Init+0x170>)
 8000444:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000448:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE12_0;
 800044a:	4b54      	ldr	r3, [pc, #336]	; (800059c <LCD_Init+0x170>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	4a53      	ldr	r2, [pc, #332]	; (800059c <LCD_Init+0x170>)
 8000450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000454:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000456:	4b51      	ldr	r3, [pc, #324]	; (800059c <LCD_Init+0x170>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	4a50      	ldr	r2, [pc, #320]	; (800059c <LCD_Init+0x170>)
 800045c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000460:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE13_0;
 8000462:	4b4e      	ldr	r3, [pc, #312]	; (800059c <LCD_Init+0x170>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	4a4d      	ldr	r2, [pc, #308]	; (800059c <LCD_Init+0x170>)
 8000468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800046c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF14 & ~GPIO_CRH_MODE14_1;
 800046e:	4b4b      	ldr	r3, [pc, #300]	; (800059c <LCD_Init+0x170>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	4a4a      	ldr	r2, [pc, #296]	; (800059c <LCD_Init+0x170>)
 8000474:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000478:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE14_0;
 800047a:	4b48      	ldr	r3, [pc, #288]	; (800059c <LCD_Init+0x170>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	4a47      	ldr	r2, [pc, #284]	; (800059c <LCD_Init+0x170>)
 8000480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000484:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000486:	4b45      	ldr	r3, [pc, #276]	; (800059c <LCD_Init+0x170>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	4a44      	ldr	r2, [pc, #272]	; (800059c <LCD_Init+0x170>)
 800048c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000490:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000492:	4b42      	ldr	r3, [pc, #264]	; (800059c <LCD_Init+0x170>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	4a41      	ldr	r2, [pc, #260]	; (800059c <LCD_Init+0x170>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF10 & ~GPIO_CRH_MODE10_1;
 800049e:	4b3f      	ldr	r3, [pc, #252]	; (800059c <LCD_Init+0x170>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	4a3e      	ldr	r2, [pc, #248]	; (800059c <LCD_Init+0x170>)
 80004a4:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80004a8:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE10_0;
 80004aa:	4b3c      	ldr	r3, [pc, #240]	; (800059c <LCD_Init+0x170>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a3b      	ldr	r2, [pc, #236]	; (800059c <LCD_Init+0x170>)
 80004b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b4:	6053      	str	r3, [r2, #4]

	GPIOB->CRL	&= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 80004b6:	4b39      	ldr	r3, [pc, #228]	; (800059c <LCD_Init+0x170>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a38      	ldr	r2, [pc, #224]	; (800059c <LCD_Init+0x170>)
 80004bc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80004c0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE1_0;
 80004c2:	4b36      	ldr	r3, [pc, #216]	; (800059c <LCD_Init+0x170>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a35      	ldr	r2, [pc, #212]	; (800059c <LCD_Init+0x170>)
 80004c8:	f043 0310 	orr.w	r3, r3, #16
 80004cc:	6013      	str	r3, [r2, #0]

	GPIOB->CRL	&= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 80004ce:	4b33      	ldr	r3, [pc, #204]	; (800059c <LCD_Init+0x170>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a32      	ldr	r2, [pc, #200]	; (800059c <LCD_Init+0x170>)
 80004d4:	f023 030e 	bic.w	r3, r3, #14
 80004d8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE0_0;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <LCD_Init+0x170>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a2f      	ldr	r2, [pc, #188]	; (800059c <LCD_Init+0x170>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <LCD_Init+0x170>)
 80004e8:	4a2d      	ldr	r2, [pc, #180]	; (80005a0 <LCD_Init+0x174>)
 80004ea:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	USER_TIM2_Delay(30, 36000); //		delay of 15ms
 80004ec:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80004f0:	201e      	movs	r0, #30
 80004f2:	f7ff ff43 	bl	800037c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80004f6:	4b29      	ldr	r3, [pc, #164]	; (800059c <LCD_Init+0x170>)
 80004f8:	4a29      	ldr	r2, [pc, #164]	; (80005a0 <LCD_Init+0x174>)
 80004fa:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80004fc:	f000 f950 	bl	80007a0 <LCD_Pulse_EN>
	USER_TIM2_Delay(4, 59039);//		delay of 4.1ms
 8000500:	f24e 619f 	movw	r1, #59039	; 0xe69f
 8000504:	2004      	movs	r0, #4
 8000506:	f7ff ff39 	bl	800037c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <LCD_Init+0x170>)
 800050c:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <LCD_Init+0x174>)
 800050e:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000510:	f000 f946 	bl	80007a0 <LCD_Pulse_EN>
	USER_TIM2_Delay(0, 7199);//     delay of 100us
 8000514:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff ff2f 	bl	800037c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <LCD_Init+0x170>)
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <LCD_Init+0x174>)
 8000522:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000524:	f000 f93c 	bl	80007a0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que el LCD este operativo
 8000528:	bf00      	nop
 800052a:	f000 f8f3 	bl	8000714 <LCD_Busy>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1fa      	bne.n	800052a <LCD_Init+0xfe>
	GPIOB->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <LCD_Init+0x170>)
 8000536:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <LCD_Init+0x178>)
 8000538:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800053a:	f000 f931 	bl	80007a0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que se complete
 800053e:	bf00      	nop
 8000540:	f000 f8e8 	bl	8000714 <LCD_Busy>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1fa      	bne.n	8000540 <LCD_Init+0x114>
	LCD_Write_Cmd( 0x28U );//					establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 800054a:	2028      	movs	r0, #40	; 0x28
 800054c:	f000 f894 	bl	8000678 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//					enciende el LCD sin cursor
 8000550:	200c      	movs	r0, #12
 8000552:	f000 f891 	bl	8000678 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//					inicializa cursor
 8000556:	2006      	movs	r0, #6
 8000558:	f000 f88e 	bl	8000678 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 800055c:	2040      	movs	r0, #64	; 0x40
 800055e:	f000 f88b 	bl	8000678 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <LCD_Init+0x17c>)
 8000564:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	e00a      	b.n	8000582 <LCD_Init+0x156>
		LCD_Put_Char( *p );
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f895 	bl	80006a0 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b3f      	cmp	r3, #63	; 0x3f
 8000586:	d9f1      	bls.n	800056c <LCD_Init+0x140>

	LCD_Write_Cmd( 0x80 );
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	f000 f875 	bl	8000678 <LCD_Write_Cmd>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	c0003000 	.word	0xc0003000
 80005a4:	d0002000 	.word	0xd0002000
 80005a8:	08005988 	.word	0x08005988

080005ac <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//						Bit[0]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d004      	beq.n	80005ca <LCD_Out_Data4+0x1e>
		GPIOB->BSRR	=	1U << LCD_D4_PIN_HIGH;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <LCD_Out_Data4+0x84>)
 80005c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	e003      	b.n	80005d2 <LCD_Out_Data4+0x26>
	else
		GPIOB->BSRR	=	1U << LCD_D4_PIN_LOW;
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <LCD_Out_Data4+0x84>)
 80005cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//						Bit[1]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d004      	beq.n	80005e6 <LCD_Out_Data4+0x3a>
		GPIOB->BSRR	=	1U << LCD_D5_PIN_HIGH;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <LCD_Out_Data4+0x84>)
 80005de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	e003      	b.n	80005ee <LCD_Out_Data4+0x42>
	else
		GPIOB->BSRR	=	1U << LCD_D5_PIN_LOW;
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <LCD_Out_Data4+0x84>)
 80005e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005ec:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//						Bit[2]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d004      	beq.n	8000602 <LCD_Out_Data4+0x56>
		GPIOB->BSRR	=	1U << LCD_D6_PIN_HIGH;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <LCD_Out_Data4+0x84>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	e003      	b.n	800060a <LCD_Out_Data4+0x5e>
	else
		GPIOB->BSRR	=	1U << LCD_D6_PIN_LOW;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <LCD_Out_Data4+0x84>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000608:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//						Bit[3]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <LCD_Out_Data4+0x72>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <LCD_Out_Data4+0x84>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	611a      	str	r2, [r3, #16]
	else
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 800061c:	e003      	b.n	8000626 <LCD_Out_Data4+0x7a>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <LCD_Out_Data4+0x84>)
 8000620:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000624:	611a      	str	r2, [r3, #16]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40010c00 	.word	0x40010c00

08000634 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	091b      	lsrs	r3, r3, #4
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffb1 	bl	80005ac <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800064a:	f000 f8a9 	bl	80007a0 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffa8 	bl	80005ac <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800065c:	f000 f8a0 	bl	80007a0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000660:	bf00      	nop
 8000662:	f000 f857 	bl	8000714 <LCD_Busy>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1fa      	bne.n	8000662 <LCD_Write_Byte+0x2e>
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	=	1U << LCD_RS_PIN_LOW;//					RS=0 (seleccion de comando)
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <LCD_Write_Cmd+0x24>)
 8000684:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000688:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffd1 	bl	8000634 <LCD_Write_Byte>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010c00 	.word	0x40010c00

080006a0 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	= 1U << LCD_RS_PIN_HIGH;//				RS=1 (seleccion de caracteres)
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <LCD_Put_Char+0x20>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte(c);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffbe 	bl	8000634 <LCD_Write_Byte>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40010c00 	.word	0x40010c00

080006c4 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <LCD_Set_Cursor+0x1c>
		column--;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	3b01      	subs	r3, #1
 80006de:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <LCD_Set_Cursor+0x28>
		line--;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40 ) + column;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	019b      	lsls	r3, r3, #6
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	4413      	add	r3, r2
 80006f6:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b80      	subs	r3, #128	; 0x80
 8000702:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffb6 	bl	8000678 <LCD_Write_Cmd>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* Configuracion de PB15_D7 as input floating
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */
	GPIOB->CRH &= ~GPIO_CRH_CNF15_1 & ~GPIO_CRH_MODE15;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <LCD_Busy+0x80>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <LCD_Busy+0x80>)
 800071e:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8000722:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_0;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <LCD_Busy+0x80>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <LCD_Busy+0x80>)
 800072a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800072e:	6053      	str	r3, [r2, #4]
	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_RS_PIN_LOW
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <LCD_Busy+0x80>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <LCD_Busy+0x84>)
 8000734:	611a      	str	r2, [r3, #16]
				|	1U << LCD_RW_PIN_HIGH
				|	1U << LCD_EN_PIN_HIGH;

	USER_TIM2_Delay(0, 7199);//      delay of 100us
 8000736:	f641 411f 	movw	r1, #7199	; 0x1c1f
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fe1e 	bl	800037c <USER_TIM2_Delay>
	if( ( GPIOB->IDR & 0x00008000U ) ){//					if PB15_D7 is set, then
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <LCD_Busy+0x80>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d010      	beq.n	800076e <LCD_Busy+0x5a>
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <LCD_Busy+0x80>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <LCD_Busy+0x88>)
 8000750:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <LCD_Busy+0x80>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <LCD_Busy+0x80>)
 8000758:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800075c:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <LCD_Busy+0x80>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <LCD_Busy+0x80>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 1;
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <LCD_Busy+0x7a>
	} else {
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <LCD_Busy+0x80>)
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LCD_Busy+0x88>)
 8000772:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LCD_Busy+0x80>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <LCD_Busy+0x80>)
 800077a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800077e:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LCD_Busy+0x80>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <LCD_Busy+0x80>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 0;
 800078c:	2300      	movs	r3, #0
	}
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010c00 	.word	0x40010c00
 8000798:	00010402 	.word	0x00010402
 800079c:	04020000 	.word	0x04020000

080007a0 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	1U << LCD_EN_PIN_HIGH;//				habilita pin EN ON
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LCD_Pulse_EN+0x24>)
 80007a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007aa:	611a      	str	r2, [r3, #16]
	USER_TIM2_Delay(0, 7599);//      delay of 50us
 80007ac:	f641 51af 	movw	r1, #7599	; 0x1daf
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fde3 	bl	800037c <USER_TIM2_Delay>
	GPIOB->BSRR	=	1U << LCD_EN_PIN_LOW;//					habilita pin EN OFF
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <LCD_Pulse_EN+0x24>)
 80007b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007bc:	611a      	str	r2, [r3, #16]

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40010c00 	.word	0x40010c00

080007c8 <LCD_BarGraphic>:
/*
 * Funcion que muestra un caracter grafico en el LCD
 * en 'value' el valor de su posicion en CGRAM y
 * en 'size' especificamos su tamaño
 */
void LCD_BarGraphic(int value, int size){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	value = value * size / 20;//							matriz de 5x8 pixeles
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <LCD_BarGraphic+0x60>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	10d2      	asrs	r2, r2, #3
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	607b      	str	r3, [r7, #4]
	for( int i = 0; i < size; i++ ){
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e012      	b.n	8000814 <LCD_BarGraphic+0x4c>
		if( value > 5 ){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	dd06      	ble.n	8000802 <LCD_BarGraphic+0x3a>
			LCD_Put_Char( 0x05U );
 80007f4:	2005      	movs	r0, #5
 80007f6:	f7ff ff53 	bl	80006a0 <LCD_Put_Char>
			value -= 5;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3b05      	subs	r3, #5
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	e005      	b.n	800080e <LCD_BarGraphic+0x46>
		} else {
			LCD_Put_Char( value );
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff4a 	bl	80006a0 <LCD_Put_Char>
			break;
 800080c:	e007      	b.n	800081e <LCD_BarGraphic+0x56>
	for( int i = 0; i < size; i++ ){
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbe8      	blt.n	80007ee <LCD_BarGraphic+0x26>
		}
	}
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	66666667 	.word	0x66666667

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fc44 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f85e 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f8a2 	bl	8000980 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 800083c:	f000 f95a 	bl	8000af4 <USER_RCC_Init>
  USER_GPIO_Init();
 8000840:	f000 f96e 	bl	8000b20 <USER_GPIO_Init>
  USER_USART1_Init();
 8000844:	f000 f8be 	bl	80009c4 <USER_USART1_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000848:	f001 fbca 	bl	8001fe0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  inputQueueHandle = osMessageQueueNew(20, sizeof(uint8_t), &inputQueue_attributes);
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <main+0x88>)
 800084e:	2101      	movs	r1, #1
 8000850:	2014      	movs	r0, #20
 8000852:	f001 fd03 	bl	800225c <osMessageQueueNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <main+0x8c>)
 800085a:	6013      	str	r3, [r2, #0]
  rpiInQueueHandle = osMessageQueueNew(5, sizeof(uint8_t), &rpiInQueue_attributes);
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <main+0x90>)
 800085e:	2101      	movs	r1, #1
 8000860:	2005      	movs	r0, #5
 8000862:	f001 fcfb 	bl	800225c <osMessageQueueNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <main+0x94>)
 800086a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800086c:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <main+0x98>)
 800086e:	2100      	movs	r1, #0
 8000870:	4815      	ldr	r0, [pc, #84]	; (80008c8 <main+0x9c>)
 8000872:	f001 fc1b 	bl	80020ac <osThreadNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <main+0xa0>)
 800087a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  lcdTaskHandle = osThreadNew(lcd_task, NULL, &lcdTask_attributes);
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <main+0xa4>)
 800087e:	2100      	movs	r1, #0
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <main+0xa8>)
 8000882:	f001 fc13 	bl	80020ac <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <main+0xac>)
 800088a:	6013      	str	r3, [r2, #0]
  txTaskHandle = osThreadNew(transmit_data_task, NULL, &txTask_attributes);
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <main+0xb0>)
 800088e:	2100      	movs	r1, #0
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <main+0xb4>)
 8000892:	f001 fc0b 	bl	80020ac <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <main+0xb8>)
 800089a:	6013      	str	r3, [r2, #0]
  pollKeypadTaskHandle = osThreadNew(poll_keyboard_button_task, NULL, &pollKeypad_attributes);
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <main+0xbc>)
 800089e:	2100      	movs	r1, #0
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <main+0xc0>)
 80008a2:	f001 fc03 	bl	80020ac <osThreadNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <main+0xc4>)
 80008aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ac:	f001 fbca 	bl	8002044 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <main+0x84>
 80008b2:	bf00      	nop
 80008b4:	08005a58 	.word	0x08005a58
 80008b8:	20003590 	.word	0x20003590
 80008bc:	08005a70 	.word	0x08005a70
 80008c0:	20003588 	.word	0x20003588
 80008c4:	080059c8 	.word	0x080059c8
 80008c8:	08000bdd 	.word	0x08000bdd
 80008cc:	2000357c 	.word	0x2000357c
 80008d0:	08005a34 	.word	0x08005a34
 80008d4:	08000195 	.word	0x08000195
 80008d8:	2000358c 	.word	0x2000358c
 80008dc:	08005a10 	.word	0x08005a10
 80008e0:	08000f8d 	.word	0x08000f8d
 80008e4:	20003578 	.word	0x20003578
 80008e8:	080059ec 	.word	0x080059ec
 80008ec:	08000cb9 	.word	0x08000cb9
 80008f0:	20003580 	.word	0x20003580

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b090      	sub	sp, #64	; 0x40
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2228      	movs	r2, #40	; 0x28
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f004 fad4 	bl	8004eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000932:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fccf 	bl	80012e0 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000948:	f000 f978 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2102      	movs	r1, #2
 8000966:	4618      	mov	r0, r3
 8000968:	f000 ff3a 	bl	80017e0 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000972:	f000 f963 	bl	8000c3c <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3740      	adds	r7, #64	; 0x40
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_GPIO_Init+0x40>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <MX_GPIO_Init+0x40>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_GPIO_Init+0x40>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_GPIO_Init+0x40>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <MX_GPIO_Init+0x40>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <MX_GPIO_Init+0x40>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000

080009c4 <USER_USART1_Init>:

/* USER CODE BEGIN 4 */
void USER_USART1_Init(void) {
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <USER_USART1_Init+0x40>)
 80009ca:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80009ce:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <USER_USART1_Init+0x40>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <USER_USART1_Init+0x40>)
 80009d6:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 80009da:	f023 0313 	bic.w	r3, r3, #19
 80009de:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <USER_USART1_Init+0x40>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <USER_USART1_Init+0x40>)
 80009e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ea:	f043 030c 	orr.w	r3, r3, #12
 80009ee:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <USER_USART1_Init+0x40>)
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <USER_USART1_Init+0x40>)
 80009f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009fa:	6113      	str	r3, [r2, #16]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40013800 	.word	0x40013800

08000a08 <config_pin>:

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
 8000a14:	4613      	mov	r3, r2
 8000a16:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 8000a18:	78bb      	ldrb	r3, [r7, #2]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d104      	bne.n	8000a28 <config_pin+0x20>
		//Input
		modeBits = 0b00;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
 8000a26:	e014      	b.n	8000a52 <config_pin+0x4a>
	} else if(mode == 1){
 8000a28:	78bb      	ldrb	r3, [r7, #2]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d104      	bne.n	8000a38 <config_pin+0x30>
		//Output
		modeBits = 0b01;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73bb      	strb	r3, [r7, #14]
 8000a36:	e00c      	b.n	8000a52 <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	78fa      	ldrb	r2, [r7, #3]
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 030c 	and.w	r3, r3, #12
 8000a5c:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	b25a      	sxtb	r2, r3
 8000a68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 8000a72:	78bb      	ldrb	r3, [r7, #2]
 8000a74:	2b07      	cmp	r3, #7
 8000a76:	d81a      	bhi.n	8000aae <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	78fa      	ldrb	r2, [r7, #3]
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	210f      	movs	r1, #15
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	43d2      	mvns	r2, r2
 8000a88:	401a      	ands	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	210f      	movs	r1, #15
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	7b78      	ldrb	r0, [r7, #13]
 8000a9c:	78fa      	ldrb	r2, [r7, #3]
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 8000aac:	e01c      	b.n	8000ae8 <config_pin+0xe0>
		pin -= 8;
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	78fa      	ldrb	r2, [r7, #3]
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	210f      	movs	r1, #15
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	43d2      	mvns	r2, r2
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	78fa      	ldrb	r2, [r7, #3]
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	7b78      	ldrb	r0, [r7, #13]
 8000ad8:	78fa      	ldrb	r2, [r7, #3]
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	605a      	str	r2, [r3, #4]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
	...

08000af4 <USER_RCC_Init>:

void USER_RCC_Init(void){
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <USER_RCC_Init+0x28>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <USER_RCC_Init+0x28>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <USER_RCC_Init+0x28>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <USER_RCC_Init+0x28>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	f043 0314 	orr.w	r3, r3, #20
 8000b12:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN;
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40021000 	.word	0x40021000

08000b20 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4a2a      	ldr	r2, [pc, #168]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b2a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b2e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b36:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000b3a:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000b46:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5a:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <USER_GPIO_Init+0xb8>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <USER_GPIO_Init+0xb8>)
 8000b62:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000b66:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <USER_GPIO_Init+0xb8>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <USER_GPIO_Init+0xb8>)
 8000b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b72:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000b74:	2202      	movs	r2, #2
 8000b76:	2100      	movs	r1, #0
 8000b78:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b7a:	f7ff ff45 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 1, 2);
 8000b7e:	2202      	movs	r2, #2
 8000b80:	2101      	movs	r1, #1
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b84:	f7ff ff40 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 2, 2);
 8000b88:	2202      	movs	r2, #2
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b8e:	f7ff ff3b 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 3, 2);
 8000b92:	2202      	movs	r2, #2
 8000b94:	2103      	movs	r1, #3
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000b98:	f7ff ff36 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 4, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000ba2:	f7ff ff31 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 5, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2105      	movs	r1, #5
 8000baa:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000bac:	f7ff ff2c 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 6, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2106      	movs	r1, #6
 8000bb4:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000bb6:	f7ff ff27 	bl	8000a08 <config_pin>
	config_pin(GPIOA, 7, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <USER_GPIO_Init+0xb4>)
 8000bc0:	f7ff ff22 	bl	8000a08 <config_pin>
	config_pin(GPIOC, 13, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	210d      	movs	r1, #13
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <USER_GPIO_Init+0xb8>)
 8000bca:	f7ff ff1d 	bl	8000a08 <config_pin>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40011000 	.word	0x40011000

08000bdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t message;
	osMessageQueueGet(inputQueueHandle, &message, NULL, 200);
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <StartDefaultTask+0x34>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	f107 010f 	add.w	r1, r7, #15
 8000bec:	23c8      	movs	r3, #200	; 0xc8
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f001 fc2e 	bl	8002450 <osMessageQueueGet>

	GPIOC->BSRR = (message==1)?
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
			 GPIO_BSRR_BR13:
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d102      	bne.n	8000c00 <StartDefaultTask+0x24>
 8000bfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bfe:	e001      	b.n	8000c04 <StartDefaultTask+0x28>
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIOC->BSRR = (message==1)?
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <StartDefaultTask+0x38>)
 8000c06:	6113      	str	r3, [r2, #16]
			 GPIO_BSRR_BS13;
    osDelay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 faf9 	bl	8002200 <osDelay>
  {
 8000c0e:	e7e9      	b.n	8000be4 <StartDefaultTask+0x8>
 8000c10:	20003590 	.word	0x20003590
 8000c14:	40011000 	.word	0x40011000

08000c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2a:	f000 fa5d 	bl	80010e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40000800 	.word	0x40000800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <pollButton>:
#include "poll_keyboard_task.h"
#include "LCDTask/LCDTask.h"


extern osMessageQueueId_t inputQueueHandle;
uint8_t pollButton(uint8_t row, uint8_t col){
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	//Set all row pins to 1, except polling row
	for(int i = 4; i < 8; i++){
 8000c58:	2304      	movs	r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e00c      	b.n	8000c78 <pollButton+0x30>
		GPIOA->ODR |= 1 << i;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <pollButton+0x6c>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2101      	movs	r1, #1
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <pollButton+0x6c>)
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	60d3      	str	r3, [r2, #12]
	for(int i = 4; i < 8; i++){
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	ddef      	ble.n	8000c5e <pollButton+0x16>
	}
	GPIOA->ODR &= ~(1 << row);
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <pollButton+0x6c>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	79fa      	ldrb	r2, [r7, #7]
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <pollButton+0x6c>)
 8000c90:	400b      	ands	r3, r1
 8000c92:	60d3      	str	r3, [r2, #12]

	//Read col
	//return 0;
	return GPIOA->IDR & (1 << col);
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <pollButton+0x6c>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <poll_keyboard_button_task>:


void poll_keyboard_button_task(void){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b091      	sub	sp, #68	; 0x44
 8000cbc:	af00      	add	r7, sp, #0
	uint8_t keypad_chars[] = {'1', '4', '7', '\r', '2', '5', '8', '0', '3', '6', '9', '\n', 'A', 'B', 'C', 'D'};
 8000cbe:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <poll_keyboard_button_task+0xa0>)
 8000cc0:	f107 0420 	add.w	r4, r7, #32
 8000cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char data[25];
	uint8_t isPressed;
	while(1){
		for(int i = 0; i < 4; i++){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cce:	e03c      	b.n	8000d4a <poll_keyboard_button_task+0x92>
			  for(int j = 0; j < 4; j++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd4:	e033      	b.n	8000d3e <poll_keyboard_button_task+0x86>
				  int out = pollButton(j + 4, i);
 8000cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ffaf 	bl	8000c48 <pollButton>
 8000cea:	4603      	mov	r3, r0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
				  int index = i * 4 + j;
 8000cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cf4:	4413      	add	r3, r2
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30

				  isPressed = (out==0) ? 1 : 0;
 8000cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2301      	moveq	r3, #1
 8000d00:	2300      	movne	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	70fb      	strb	r3, [r7, #3]
				  osMessageQueuePut(inputQueueHandle, &isPressed, 0U, 100);
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <poll_keyboard_button_task+0xa4>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	1cf9      	adds	r1, r7, #3
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f001 fb2a 	bl	8002368 <osMessageQueuePut>
				  if(isPressed){
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00e      	beq.n	8000d38 <poll_keyboard_button_task+0x80>
					  snprintf(data, sizeof(data), "%c", keypad_chars[index]);
 8000d1a:	f107 0220 	add.w	r2, r7, #32
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	1d38      	adds	r0, r7, #4
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <poll_keyboard_button_task+0xa8>)
 8000d28:	2119      	movs	r1, #25
 8000d2a:	f004 f99d 	bl	8005068 <sniprintf>
					  set_lcd(data, "WAS PRESSED WUUWUWUWUWUWUWUWUUWUWUWUWUWUWUUWUWUWUW");
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <poll_keyboard_button_task+0xac>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fafa 	bl	800032c <set_lcd>
			  for(int j = 0; j < 4; j++){
 8000d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	ddc8      	ble.n	8000cd6 <poll_keyboard_button_task+0x1e>
		for(int i = 0; i < 4; i++){
 8000d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d46:	3301      	adds	r3, #1
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	ddbf      	ble.n	8000cd0 <poll_keyboard_button_task+0x18>
				  }
			  }
			}
		osDelay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f001 fa55 	bl	8002200 <osDelay>
		for(int i = 0; i < 4; i++){
 8000d56:	e7b8      	b.n	8000cca <poll_keyboard_button_task+0x12>
 8000d58:	08005940 	.word	0x08005940
 8000d5c:	20003590 	.word	0x20003590
 8000d60:	08005908 	.word	0x08005908
 8000d64:	0800590c 	.word	0x0800590c

08000d68 <USER_USART1_Transmit>:
 *      Author: iandu
 */

#include "serial.h"

void USER_USART1_Transmit(uint8_t *pData, uint16_t size){
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
	for(int i=0; i< size; i++){
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e00f      	b.n	8000d9a <USER_USART1_Transmit+0x32>
		while( (USART1->SR & USART_SR_TXE)==0 ){
 8000d7a:	bf00      	nop
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <USER_USART1_Transmit+0x48>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f9      	beq.n	8000d7c <USER_USART1_Transmit+0x14>

		}
		USART1->DR = *pData++;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <USER_USART1_Transmit+0x48>)
 8000d92:	605a      	str	r2, [r3, #4]
	for(int i=0; i< size; i++){
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbeb      	blt.n	8000d7a <USER_USART1_Transmit+0x12>
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40013800 	.word	0x40013800

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_MspInit+0x68>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_MspInit+0x68>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_MspInit+0x68>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_MspInit+0x68>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_MspInit+0x68>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x68>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fa4a 	bl	800128a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_MspInit+0x6c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_MspInit+0x6c>)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000

08000e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	201e      	movs	r0, #30
 8000e3a:	f000 fa26 	bl	800128a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e3e:	201e      	movs	r0, #30
 8000e40:	f000 fa3f 	bl	80012c2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_InitTick+0xa0>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <HAL_InitTick+0xa0>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	61d3      	str	r3, [r2, #28]
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_InitTick+0xa0>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e5c:	f107 0210 	add.w	r2, r7, #16
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fe22 	bl	8001ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e6c:	f000 fe0c 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8000e70:	4603      	mov	r3, r0
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <HAL_InitTick+0xa4>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	0c9b      	lsrs	r3, r3, #18
 8000e80:	3b01      	subs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_InitTick+0xa8>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_InitTick+0xac>)
 8000e88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_InitTick+0xa8>)
 8000e8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e90:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_InitTick+0xa8>)
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_InitTick+0xa8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_InitTick+0xa8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <HAL_InitTick+0xa8>)
 8000ea6:	f000 fe51 	bl	8001b4c <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d104      	bne.n	8000eba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_InitTick+0xa8>)
 8000eb2:	f000 fea3 	bl	8001bfc <HAL_TIM_Base_Start_IT>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3730      	adds	r7, #48	; 0x30
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	20003594 	.word	0x20003594
 8000ed0:	40000800 	.word	0x40000800

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
	...

08000f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM4_IRQHandler+0x10>)
 8000f06:	f000 fecb 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20003594 	.word	0x20003594

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f003 ff7a 	bl	8004e3c <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20005000 	.word	0x20005000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	20000090 	.word	0x20000090
 8000f7c:	20003630 	.word	0x20003630

08000f80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <transmit_data_task>:
 *      Author: iandu
 */

#include "tx_task.h"

void transmit_data_task(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
	uint8_t play[] = "z\0";
 8000f92:	4a33      	ldr	r2, [pc, #204]	; (8001060 <transmit_data_task+0xd4>)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	8019      	strh	r1, [r3, #0]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	0c12      	lsrs	r2, r2, #16
 8000fa2:	701a      	strb	r2, [r3, #0]
	uint8_t next[] = "n\0";
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <transmit_data_task+0xd8>)
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	4611      	mov	r1, r2
 8000fae:	8019      	strh	r1, [r3, #0]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	0c12      	lsrs	r2, r2, #16
 8000fb4:	701a      	strb	r2, [r3, #0]
	uint8_t prev[] = "p\0";
 8000fb6:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <transmit_data_task+0xdc>)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	8019      	strh	r1, [r3, #0]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	0c12      	lsrs	r2, r2, #16
 8000fc4:	701a      	strb	r2, [r3, #0]
	uint8_t stop[] = "s\0";
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <transmit_data_task+0xe0>)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	8019      	strh	r1, [r3, #0]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	0c12      	lsrs	r2, r2, #16
 8000fd4:	701a      	strb	r2, [r3, #0]
	while(1){
		USER_USART1_Transmit(play, strlen(play));
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f8b8 	bl	8000150 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff febc 	bl	8000d68 <USER_USART1_Transmit>
		osDelay(1000);
 8000ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff4:	f001 f904 	bl	8002200 <osDelay>
		USER_USART1_Transmit(next, strlen(next));
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f8a7 	bl	8000150 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	b29a      	uxth	r2, r3
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff feab 	bl	8000d68 <USER_USART1_Transmit>
		osDelay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f001 f8f3 	bl	8002200 <osDelay>
		USER_USART1_Transmit(prev, strlen(prev));
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f897 	bl	8000150 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fe9c 	bl	8000d68 <USER_USART1_Transmit>
		osDelay(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f001 f8e4 	bl	8002200 <osDelay>
		USER_USART1_Transmit(stop, strlen(stop));
 8001038:	463b      	mov	r3, r7
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f888 	bl	8000150 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	463b      	mov	r3, r7
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe8d 	bl	8000d68 <USER_USART1_Transmit>
		osDelay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f001 f8d5 	bl	8002200 <osDelay>
		osDelay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 f8d2 	bl	8002200 <osDelay>
	while(1){
 800105c:	e7bb      	b.n	8000fd6 <transmit_data_task+0x4a>
 800105e:	bf00      	nop
 8001060:	08005950 	.word	0x08005950
 8001064:	08005954 	.word	0x08005954
 8001068:	08005958 	.word	0x08005958
 800106c:	0800595c 	.word	0x0800595c

08001070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001096:	f7ff ff73 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 fed5 	bl	8004e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff fbc5 	bl	800082c <main>
  bx lr
 80010a2:	4770      	bx	lr
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010ac:	08005b3c 	.word	0x08005b3c
  ldr r2, =_sbss
 80010b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010b4:	20003630 	.word	0x20003630

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x28>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x28>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f8d1 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	200f      	movs	r0, #15
 80010d4:	f7ff fea6 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fe6c 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_IncTick+0x1c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x20>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x20>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000008 	.word	0x20000008
 8001108:	200035dc 	.word	0x200035dc

0800110c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b02      	ldr	r3, [pc, #8]	; (800111c <HAL_GetTick+0x10>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	200035dc 	.word	0x200035dc

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <__NVIC_EnableIRQ+0x34>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff4f 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff64 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ffb2 	bl	8001210 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff81 	bl	80011bc <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff57 	bl	8001184 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e26c      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x12c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e246      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x76>
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xbc>
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fea6 	bl	800110c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fea2 	bl	800110c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1fa      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe4>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fe92 	bl	800110c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fe8e 	bl	800110c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1e6      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x10c>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1ba      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fe47 	bl	800110c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fe43 	bl	800110c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e19b      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fe26 	bl	800110c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fe22 	bl	800110c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e17a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03a      	beq.n	8001564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fe06 	bl	800110c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fe02 	bl	800110c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e15a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 faf4 	bl	8001b10 <RCC_Delay>
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fdec 	bl	800110c <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fde8 	bl	800110c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e140      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a93      	ldr	r2, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a8a      	ldr	r2, [pc, #552]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fda9 	bl	800110c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff fda5 	bl	800110c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0fd      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015e4:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x334>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x356>
 800161c:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fd59 	bl	800110c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fd55 	bl	800110c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0ab      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x37e>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fd43 	bl	800110c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fd3f 	bl	800110c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e095      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8081 	beq.w	80017ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d061      	beq.n	8001798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d146      	bne.n	800176a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fd13 	bl	800110c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fd0f 	bl	800110c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e067      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	492d      	ldr	r1, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a19      	ldr	r1, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	430b      	orrs	r3, r1
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fce3 	bl	800110c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fcdf 	bl	800110c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e037      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
 8001768:	e02f      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fccc 	bl	800110c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fcc8 	bl	800110c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e020      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x498>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e013      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060

080017e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0d0      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4965      	ldr	r1, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d040      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e073      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4936      	ldr	r1, [pc, #216]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff fc1c 	bl	800110c <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff fc18 	bl	800110c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e053      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d210      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1cc>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa48 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08005a88 	.word	0x08005a88
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b490      	push	{r4, r7}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019bc:	1d3c      	adds	r4, r7, #4
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c4:	f240 2301 	movw	r3, #513	; 0x201
 80019c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x46>
 80019f2:	e02d      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	623b      	str	r3, [r7, #32]
      break;
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a06:	4413      	add	r3, r2
 8001a08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c5b      	lsrs	r3, r3, #17
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a26:	4413      	add	r3, r2
 8001a28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a32:	fb02 f203 	mul.w	r2, r2, r3
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e004      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	623b      	str	r3, [r7, #32]
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a52:	623b      	str	r3, [r7, #32]
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc90      	pop	{r4, r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08005960 	.word	0x08005960
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	003d0900 	.word	0x003d0900

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08005a98 	.word	0x08005a98

08001ab0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	220f      	movs	r2, #15
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_GetClockConfig+0x58>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0207 	and.w	r2, r3, #7
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40022000 	.word	0x40022000

08001b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <RCC_Delay+0x34>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <RCC_Delay+0x38>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a5b      	lsrs	r3, r3, #9
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b2c:	bf00      	nop
  }
  while (Delay --);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <RCC_Delay+0x1c>
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000000 	.word	0x20000000
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f9b4 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e03a      	b.n	8001c8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <HAL_TIM_Base_Start_IT+0x98>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x58>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d009      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x58>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x58>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d010      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8ed 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8e0 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8ef 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c3 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8b6 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8c5 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f899 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f88c 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f89b 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0210 	mvn.w	r2, #16
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f86f 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f862 	bl	8001eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f871 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe fefa 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8bf 	bl	8001fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f835 	bl	8001ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f88a 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <TIM_Base_SetConfig+0xbc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0x30>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <TIM_Base_SetConfig+0xc0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00b      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d007      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <TIM_Base_SetConfig+0xbc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <TIM_Base_SetConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <TIM_Base_SetConfig+0xc0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <TIM_Base_SetConfig+0xb8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d103      	bne.n	8001fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe6:	f3ef 8305 	mrs	r3, IPSR
 8001fea:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff6:	607b      	str	r3, [r7, #4]
  return(result);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <osKernelInitialize+0x32>
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <osKernelInitialize+0x60>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d109      	bne.n	800201a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002006:	f3ef 8311 	mrs	r3, BASEPRI
 800200a:	603b      	str	r3, [r7, #0]
  return(result);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002012:	f06f 0305 	mvn.w	r3, #5
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e00c      	b.n	8002034 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <osKernelInitialize+0x60>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <osKernelInitialize+0x60>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e002      	b.n	8002034 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002032:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002034:	68fb      	ldr	r3, [r7, #12]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000094 	.word	0x20000094

08002044 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800204a:	f3ef 8305 	mrs	r3, IPSR
 800204e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002050:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002056:	f3ef 8310 	mrs	r3, PRIMASK
 800205a:	607b      	str	r3, [r7, #4]
  return(result);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <osKernelStart+0x32>
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <osKernelStart+0x64>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d109      	bne.n	800207e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800206a:	f3ef 8311 	mrs	r3, BASEPRI
 800206e:	603b      	str	r3, [r7, #0]
  return(result);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002076:	f06f 0305 	mvn.w	r3, #5
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e00e      	b.n	800209c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <osKernelStart+0x64>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <osKernelStart+0x64>)
 8002088:	2202      	movs	r2, #2
 800208a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800208c:	f001 faba 	bl	8003604 <vTaskStartScheduler>
      stat = osOK;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e002      	b.n	800209c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800209c:	68fb      	ldr	r3, [r7, #12]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000094 	.word	0x20000094

080020ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b092      	sub	sp, #72	; 0x48
 80020b0:	af04      	add	r7, sp, #16
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020bc:	f3ef 8305 	mrs	r3, IPSR
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 8094 	bne.w	80021f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ca:	f3ef 8310 	mrs	r3, PRIMASK
 80020ce:	623b      	str	r3, [r7, #32]
  return(result);
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 808d 	bne.w	80021f2 <osThreadNew+0x146>
 80020d8:	4b48      	ldr	r3, [pc, #288]	; (80021fc <osThreadNew+0x150>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d106      	bne.n	80020ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020e0:	f3ef 8311 	mrs	r3, BASEPRI
 80020e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 8082 	bne.w	80021f2 <osThreadNew+0x146>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d07e      	beq.n	80021f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80020f8:	2318      	movs	r3, #24
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80020fc:	2300      	movs	r3, #0
 80020fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002100:	f107 031b 	add.w	r3, r7, #27
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d045      	beq.n	800219e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <osThreadNew+0x74>
        name = attr->name;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <osThreadNew+0x9a>
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2b38      	cmp	r3, #56	; 0x38
 8002138:	d805      	bhi.n	8002146 <osThreadNew+0x9a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <osThreadNew+0x9e>
        return (NULL);
 8002146:	2300      	movs	r3, #0
 8002148:	e054      	b.n	80021f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00e      	beq.n	8002180 <osThreadNew+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2bbb      	cmp	r3, #187	; 0xbb
 8002168:	d90a      	bls.n	8002180 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <osThreadNew+0xd4>
        mem = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
 800217e:	e010      	b.n	80021a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <osThreadNew+0xf6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <osThreadNew+0xf6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <osThreadNew+0xf6>
          mem = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
 800219c:	e001      	b.n	80021a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d110      	bne.n	80021ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021b0:	9202      	str	r2, [sp, #8]
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f001 f83c 	bl	800323c <xTaskCreateStatic>
 80021c4:	4603      	mov	r3, r0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e013      	b.n	80021f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d110      	bne.n	80021f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f001 f886 	bl	80032f4 <xTaskCreate>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <osThreadNew+0x146>
          hTask = NULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021f2:	697b      	ldr	r3, [r7, #20]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3738      	adds	r7, #56	; 0x38
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000094 	.word	0x20000094

08002200 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002208:	f3ef 8305 	mrs	r3, IPSR
 800220c:	613b      	str	r3, [r7, #16]
  return(result);
 800220e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002214:	f3ef 8310 	mrs	r3, PRIMASK
 8002218:	60fb      	str	r3, [r7, #12]
  return(result);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <osDelay+0x34>
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <osDelay+0x58>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d109      	bne.n	800223c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002228:	f3ef 8311 	mrs	r3, BASEPRI
 800222c:	60bb      	str	r3, [r7, #8]
  return(result);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <osDelay+0x3c>
    stat = osErrorISR;
 8002234:	f06f 0305 	mvn.w	r3, #5
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e007      	b.n	800224c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f001 f9a8 	bl	800359c <vTaskDelay>
    }
  }

  return (stat);
 800224c:	697b      	ldr	r3, [r7, #20]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000094 	.word	0x20000094

0800225c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226c:	f3ef 8305 	mrs	r3, IPSR
 8002270:	61bb      	str	r3, [r7, #24]
  return(result);
 8002272:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002274:	2b00      	cmp	r3, #0
 8002276:	d16f      	bne.n	8002358 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002278:	f3ef 8310 	mrs	r3, PRIMASK
 800227c:	617b      	str	r3, [r7, #20]
  return(result);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d169      	bne.n	8002358 <osMessageQueueNew+0xfc>
 8002284:	4b37      	ldr	r3, [pc, #220]	; (8002364 <osMessageQueueNew+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d105      	bne.n	8002298 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800228c:	f3ef 8311 	mrs	r3, BASEPRI
 8002290:	613b      	str	r3, [r7, #16]
  return(result);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d15f      	bne.n	8002358 <osMessageQueueNew+0xfc>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d05c      	beq.n	8002358 <osMessageQueueNew+0xfc>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d059      	beq.n	8002358 <osMessageQueueNew+0xfc>
    mem = -1;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d029      	beq.n	8002304 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d012      	beq.n	80022de <osMessageQueueNew+0x82>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b4f      	cmp	r3, #79	; 0x4f
 80022be:	d90e      	bls.n	80022de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <osMessageQueueNew+0x82>
        mem = 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	e014      	b.n	8002308 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d110      	bne.n	8002308 <osMessageQueueNew+0xac>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <osMessageQueueNew+0xac>
          mem = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	e001      	b.n	8002308 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10b      	bne.n	8002326 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2100      	movs	r1, #0
 8002318:	9100      	str	r1, [sp, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fa53 	bl	80027c8 <xQueueGenericCreateStatic>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24
 8002324:	e008      	b.n	8002338 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800232c:	2200      	movs	r2, #0
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fac0 	bl	80028b6 <xQueueGenericCreate>
 8002336:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e001      	b.n	8002350 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002350:	69f9      	ldr	r1, [r7, #28]
 8002352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002354:	f000 ff16 	bl	8003184 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800235a:	4618      	mov	r0, r3
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000094 	.word	0x20000094

08002368 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002380:	f3ef 8305 	mrs	r3, IPSR
 8002384:	61fb      	str	r3, [r7, #28]
  return(result);
 8002386:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238c:	f3ef 8310 	mrs	r3, PRIMASK
 8002390:	61bb      	str	r3, [r7, #24]
  return(result);
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <osMessageQueuePut+0x44>
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <osMessageQueuePut+0xe0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d12e      	bne.n	80023fe <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023a0:	f3ef 8311 	mrs	r3, BASEPRI
 80023a4:	617b      	str	r3, [r7, #20]
  return(result);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d028      	beq.n	80023fe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <osMessageQueuePut+0x56>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <osMessageQueuePut+0x56>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80023be:	f06f 0303 	mvn.w	r3, #3
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023c4:	e039      	b.n	800243a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80023ca:	f107 0210 	add.w	r2, r7, #16
 80023ce:	2300      	movs	r3, #0
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6a38      	ldr	r0, [r7, #32]
 80023d4:	f000 fbce 	bl	8002b74 <xQueueGenericSendFromISR>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d003      	beq.n	80023e6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80023de:	f06f 0302 	mvn.w	r3, #2
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023e4:	e029      	b.n	800243a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d026      	beq.n	800243a <osMessageQueuePut+0xd2>
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <osMessageQueuePut+0xe4>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023fc:	e01d      	b.n	800243a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <osMessageQueuePut+0xa2>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800240a:	f06f 0303 	mvn.w	r3, #3
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	e014      	b.n	800243c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002412:	2300      	movs	r3, #0
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	6a38      	ldr	r0, [r7, #32]
 800241a:	f000 faad 	bl	8002978 <xQueueGenericSend>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d00b      	beq.n	800243c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800242a:	f06f 0301 	mvn.w	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	e004      	b.n	800243c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002432:	f06f 0302 	mvn.w	r3, #2
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e000      	b.n	800243c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800243a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800243e:	4618      	mov	r0, r3
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000094 	.word	0x20000094
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002466:	f3ef 8305 	mrs	r3, IPSR
 800246a:	61fb      	str	r3, [r7, #28]
  return(result);
 800246c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002472:	f3ef 8310 	mrs	r3, PRIMASK
 8002476:	61bb      	str	r3, [r7, #24]
  return(result);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <osMessageQueueGet+0x42>
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <osMessageQueueGet+0xdc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d12e      	bne.n	80024e4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002486:	f3ef 8311 	mrs	r3, BASEPRI
 800248a:	617b      	str	r3, [r7, #20]
  return(result);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d028      	beq.n	80024e4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <osMessageQueueGet+0x54>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <osMessageQueueGet+0x54>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80024a4:	f06f 0303 	mvn.w	r3, #3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80024aa:	e038      	b.n	800251e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	461a      	mov	r2, r3
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	6a38      	ldr	r0, [r7, #32]
 80024ba:	f000 fcd3 	bl	8002e64 <xQueueReceiveFromISR>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d003      	beq.n	80024cc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80024c4:	f06f 0302 	mvn.w	r3, #2
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80024ca:	e028      	b.n	800251e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d025      	beq.n	800251e <osMessageQueueGet+0xce>
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <osMessageQueueGet+0xe0>)
 80024d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80024e2:	e01c      	b.n	800251e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <osMessageQueueGet+0xa0>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80024f0:	f06f 0303 	mvn.w	r3, #3
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	e013      	b.n	8002520 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	6a38      	ldr	r0, [r7, #32]
 80024fe:	f000 fbd1 	bl	8002ca4 <xQueueReceive>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d00b      	beq.n	8002520 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800250e:	f06f 0301 	mvn.w	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e004      	b.n	8002520 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002516:	f06f 0302 	mvn.w	r3, #2
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	e000      	b.n	8002520 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800251e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002522:	4618      	mov	r0, r3
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000094 	.word	0x20000094
 8002530:	e000ed04 	.word	0xe000ed04

08002534 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a06      	ldr	r2, [pc, #24]	; (800255c <vApplicationGetIdleTaskMemory+0x28>)
 8002544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4a05      	ldr	r2, [pc, #20]	; (8002560 <vApplicationGetIdleTaskMemory+0x2c>)
 800254a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	601a      	str	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000098 	.word	0x20000098
 8002560:	20000154 	.word	0x20000154

08002564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <vApplicationGetTimerTaskMemory+0x2c>)
 8002574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <vApplicationGetTimerTaskMemory+0x30>)
 800257a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000354 	.word	0x20000354
 8002594:	20000410 	.word	0x20000410

08002598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f103 0208 	add.w	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f103 0208 	add.w	r2, r3, #8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0208 	add.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264a:	d103      	bne.n	8002654 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e00c      	b.n	800266e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3308      	adds	r3, #8
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e002      	b.n	8002662 <vListInsert+0x2e>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d2f6      	bcs.n	800265c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6892      	ldr	r2, [r2, #8]
 80026ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d103      	bne.n	80026d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800271e:	bf00      	nop
 8002720:	e7fe      	b.n	8002720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002722:	f002 f8b3 	bl	800488c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	441a      	add	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	3b01      	subs	r3, #1
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d114      	bne.n	80027a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01a      	beq.n	80027b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f001 f9d9 	bl	8003b3c <xTaskRemoveFromEventList>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <xQueueGenericReset+0xcc>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	e009      	b.n	80027b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3310      	adds	r3, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fef6 	bl	8002598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fef1 	bl	8002598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027b6:	f002 f899 	bl	80048ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <xQueueGenericCreateStatic+0x52>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <xQueueGenericCreateStatic+0x56>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <xQueueGenericCreateStatic+0x58>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	623b      	str	r3, [r7, #32]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xQueueGenericCreateStatic+0x7e>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xQueueGenericCreateStatic+0x82>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <xQueueGenericCreateStatic+0x84>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61fb      	str	r3, [r7, #28]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002866:	2350      	movs	r3, #80	; 0x50
 8002868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d00a      	beq.n	8002886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61bb      	str	r3, [r7, #24]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002898:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f843 	bl	8002932 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3730      	adds	r7, #48	; 0x30
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	; 0x28
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	613b      	str	r3, [r7, #16]
}
 80028dc:	bf00      	nop
 80028de:	e7fe      	b.n	80028de <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e004      	b.n	80028f6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3350      	adds	r3, #80	; 0x50
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 f8c6 	bl	8004a8c <pvPortMalloc>
 8002900:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	3350      	adds	r3, #80	; 0x50
 800290c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002916:	79fa      	ldrb	r2, [r7, #7]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f805 	bl	8002932 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002928:	69bb      	ldr	r3, [r7, #24]
	}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e002      	b.n	8002954 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002960:	2101      	movs	r1, #1
 8002962:	69b8      	ldr	r0, [r7, #24]
 8002964:	f7ff fec8 	bl	80026f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08e      	sub	sp, #56	; 0x38
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xQueueGenericSend+0x32>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <xQueueGenericSend+0x40>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <xQueueGenericSend+0x44>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <xQueueGenericSend+0x46>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <xQueueGenericSend+0x60>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d103      	bne.n	80029e6 <xQueueGenericSend+0x6e>
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <xQueueGenericSend+0x72>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xQueueGenericSend+0x74>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueGenericSend+0x8e>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	623b      	str	r3, [r7, #32]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a06:	f001 fa5f 	bl	8003ec8 <xTaskGetSchedulerState>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <xQueueGenericSend+0x9e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <xQueueGenericSend+0xa2>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueGenericSend+0xa4>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61fb      	str	r3, [r7, #28]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a36:	f001 ff29 	bl	800488c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <xQueueGenericSend+0xd4>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d129      	bne.n	8002aa0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a52:	f000 fa87 	bl	8002f64 <prvCopyDataToQueue>
 8002a56:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f869 	bl	8003b3c <xTaskRemoveFromEventList>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a70:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <xQueueGenericSend+0x1f8>)
 8002a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	e00a      	b.n	8002a98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <xQueueGenericSend+0x1f8>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a98:	f001 ff28 	bl	80048ec <vPortExitCritical>
				return pdPASS;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e063      	b.n	8002b68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aa6:	f001 ff21 	bl	80048ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e05c      	b.n	8002b68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 f8a3 	bl	8003c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ac2:	f001 ff13 	bl	80048ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ac6:	f000 fe0d 	bl	80036e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aca:	f001 fedf 	bl	800488c <vPortEnterCritical>
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ada:	d103      	bne.n	8002ae4 <xQueueGenericSend+0x16c>
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af0:	d103      	bne.n	8002afa <xQueueGenericSend+0x182>
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afa:	f001 fef7 	bl	80048ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002afe:	1d3a      	adds	r2, r7, #4
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f892 	bl	8003c30 <xTaskCheckForTimeOut>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d124      	bne.n	8002b5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b14:	f000 fb1e 	bl	8003154 <prvIsQueueFull>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	3310      	adds	r3, #16
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 ffb8 	bl	8003a9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b2e:	f000 faa9 	bl	8003084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b32:	f000 fde5 	bl	8003700 <xTaskResumeAll>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f af7c 	bne.w	8002a36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <xQueueGenericSend+0x1f8>)
 8002b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	e772      	b.n	8002a36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b52:	f000 fa97 	bl	8003084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b56:	f000 fdd3 	bl	8003700 <xTaskResumeAll>
 8002b5a:	e76c      	b.n	8002a36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5e:	f000 fa91 	bl	8003084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b62:	f000 fdcd 	bl	8003700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b66:	2300      	movs	r3, #0
		}
	}
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3738      	adds	r7, #56	; 0x38
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x3c>
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <xQueueGenericSendFromISR+0x40>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <xQueueGenericSendFromISR+0x42>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	623b      	str	r3, [r7, #32]
}
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <xQueueGenericSendFromISR+0x6a>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <xQueueGenericSendFromISR+0x6e>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueGenericSendFromISR+0x70>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	61fb      	str	r3, [r7, #28]
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bfe:	f001 ff07 	bl	8004a10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c02:	f3ef 8211 	mrs	r2, BASEPRI
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	61ba      	str	r2, [r7, #24]
 8002c18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <xQueueGenericSendFromISR+0xbc>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d12c      	bne.n	8002c8a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c40:	f000 f990 	bl	8002f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d112      	bne.n	8002c74 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	3324      	adds	r3, #36	; 0x24
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 ff6e 	bl	8003b3c <xTaskRemoveFromEventList>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00e      	beq.n	8002c84 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	b25a      	sxtb	r2, r3
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c84:	2301      	movs	r3, #1
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c88:	e001      	b.n	8002c8e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3738      	adds	r7, #56	; 0x38
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <xQueueReceive+0x30>
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	623b      	str	r3, [r7, #32]
}
 8002cd0:	bf00      	nop
 8002cd2:	e7fe      	b.n	8002cd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <xQueueReceive+0x3e>
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <xQueueReceive+0x42>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <xQueueReceive+0x44>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <xQueueReceive+0x5e>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	61fb      	str	r3, [r7, #28]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d02:	f001 f8e1 	bl	8003ec8 <xTaskGetSchedulerState>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <xQueueReceive+0x6e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueReceive+0x72>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueReceive+0x74>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueReceive+0x8e>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d32:	f001 fdab 	bl	800488c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01f      	beq.n	8002d82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d46:	f000 f977 	bl	8003038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00f      	beq.n	8002d7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	3310      	adds	r3, #16
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 feec 	bl	8003b3c <xTaskRemoveFromEventList>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <xQueueReceive+0x1bc>)
 8002d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d7a:	f001 fdb7 	bl	80048ec <vPortExitCritical>
				return pdPASS;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e069      	b.n	8002e56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d88:	f001 fdb0 	bl	80048ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e062      	b.n	8002e56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 ff32 	bl	8003c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da4:	f001 fda2 	bl	80048ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da8:	f000 fc9c 	bl	80036e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dac:	f001 fd6e 	bl	800488c <vPortEnterCritical>
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dbc:	d103      	bne.n	8002dc6 <xQueueReceive+0x122>
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d103      	bne.n	8002ddc <xQueueReceive+0x138>
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ddc:	f001 fd86 	bl	80048ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002de0:	1d3a      	adds	r2, r7, #4
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 ff21 	bl	8003c30 <xTaskCheckForTimeOut>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d123      	bne.n	8002e3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df6:	f000 f997 	bl	8003128 <prvIsQueueEmpty>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fe47 	bl	8003a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e10:	f000 f938 	bl	8003084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e14:	f000 fc74 	bl	8003700 <xTaskResumeAll>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d189      	bne.n	8002d32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <xQueueReceive+0x1bc>)
 8002e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	e780      	b.n	8002d32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f000 f927 	bl	8003084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e36:	f000 fc63 	bl	8003700 <xTaskResumeAll>
 8002e3a:	e77a      	b.n	8002d32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3e:	f000 f921 	bl	8003084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e42:	f000 fc5d 	bl	8003700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e48:	f000 f96e 	bl	8003128 <prvIsQueueEmpty>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f43f af6f 	beq.w	8002d32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000ed04 	.word	0xe000ed04

08002e64 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	; 0x38
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	623b      	str	r3, [r7, #32]
}
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <xQueueReceiveFromISR+0x3a>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <xQueueReceiveFromISR+0x3e>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueReceiveFromISR+0x40>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fb      	str	r3, [r7, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ebe:	f001 fda7 	bl	8004a10 <vPortValidateInterruptPriority>
	__asm volatile
 8002ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	61ba      	str	r2, [r7, #24]
 8002ed8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002eda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d02f      	beq.n	8002f4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef8:	f000 f89e 	bl	8003038 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f0c:	d112      	bne.n	8002f34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	3310      	adds	r3, #16
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fe0e 	bl	8003b3c <xTaskRemoveFromEventList>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e007      	b.n	8002f44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
 8002f48:	e001      	b.n	8002f4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f383 8811 	msr	BASEPRI, r3
}
 8002f58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10d      	bne.n	8002f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d14d      	bne.n	8003026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 ffb8 	bl	8003f04 <xTaskPriorityDisinherit>
 8002f94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	e043      	b.n	8003026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d119      	bne.n	8002fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6898      	ldr	r0, [r3, #8]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	461a      	mov	r2, r3
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	f001 ff70 	bl	8004e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d32b      	bcc.n	8003026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	e026      	b.n	8003026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68d8      	ldr	r0, [r3, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	f001 ff56 	bl	8004e94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	425b      	negs	r3, r3
 8002ff2:	441a      	add	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	425b      	negs	r3, r3
 800300e:	441a      	add	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d105      	bne.n	8003026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	3b01      	subs	r3, #1
 8003024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800302e:	697b      	ldr	r3, [r7, #20]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	441a      	add	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d303      	bcc.n	800306c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	461a      	mov	r2, r3
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	f001 ff0c 	bl	8004e94 <memcpy>
	}
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800308c:	f001 fbfe 	bl	800488c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003098:	e011      	b.n	80030be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3324      	adds	r3, #36	; 0x24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fd48 	bl	8003b3c <xTaskRemoveFromEventList>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030b2:	f000 fe1f 	bl	8003cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	dce9      	bgt.n	800309a <prvUnlockQueue+0x16>
 80030c6:	e000      	b.n	80030ca <prvUnlockQueue+0x46>
					break;
 80030c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030d2:	f001 fc0b 	bl	80048ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030d6:	f001 fbd9 	bl	800488c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030e2:	e011      	b.n	8003108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3310      	adds	r3, #16
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fd23 	bl	8003b3c <xTaskRemoveFromEventList>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030fc:	f000 fdfa 	bl	8003cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	3b01      	subs	r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800310c:	2b00      	cmp	r3, #0
 800310e:	dce9      	bgt.n	80030e4 <prvUnlockQueue+0x60>
 8003110:	e000      	b.n	8003114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	22ff      	movs	r2, #255	; 0xff
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800311c:	f001 fbe6 	bl	80048ec <vPortExitCritical>
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003130:	f001 fbac 	bl	800488c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e001      	b.n	8003146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003146:	f001 fbd1 	bl	80048ec <vPortExitCritical>

	return xReturn;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800315c:	f001 fb96 	bl	800488c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	429a      	cmp	r2, r3
 800316a:	d102      	bne.n	8003172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e001      	b.n	8003176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003176:	f001 fbb9 	bl	80048ec <vPortExitCritical>

	return xReturn;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e014      	b.n	80031be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003194:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <vQueueAddToRegistry+0x4c>)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031a0:	490b      	ldr	r1, [pc, #44]	; (80031d0 <vQueueAddToRegistry+0x4c>)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <vQueueAddToRegistry+0x4c>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031b6:	e006      	b.n	80031c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b07      	cmp	r3, #7
 80031c2:	d9e7      	bls.n	8003194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	200035e0 	.word	0x200035e0

080031d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031e4:	f001 fb52 	bl	800488c <vPortEnterCritical>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d103      	bne.n	80031fe <vQueueWaitForMessageRestricted+0x2a>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003204:	b25b      	sxtb	r3, r3
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320a:	d103      	bne.n	8003214 <vQueueWaitForMessageRestricted+0x40>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003214:	f001 fb6a 	bl	80048ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fc5b 	bl	8003ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff ff28 	bl	8003084 <prvUnlockQueue>
	}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af04      	add	r7, sp, #16
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	623b      	str	r3, [r7, #32]
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xTaskCreateStatic+0x46>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003282:	23bc      	movs	r3, #188	; 0xbc
 8003284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2bbc      	cmp	r3, #188	; 0xbc
 800328a:	d00a      	beq.n	80032a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	61bb      	str	r3, [r7, #24]
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01e      	beq.n	80032e6 <xTaskCreateStatic+0xaa>
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01b      	beq.n	80032e6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032c0:	2300      	movs	r3, #0
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	9302      	str	r3, [sp, #8]
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f851 	bl	8003380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e0:	f000 f8ec 	bl	80034bc <prvAddNewTaskToReadyList>
 80032e4:	e001      	b.n	80032ea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032ea:	697b      	ldr	r3, [r7, #20]
	}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af04      	add	r7, sp, #16
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f001 fbbf 	bl	8004a8c <pvPortMalloc>
 800330e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00e      	beq.n	8003334 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003316:	20bc      	movs	r0, #188	; 0xbc
 8003318:	f001 fbb8 	bl	8004a8c <pvPortMalloc>
 800331c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
 800332a:	e005      	b.n	8003338 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f001 fc71 	bl	8004c14 <vPortFree>
 8003332:	e001      	b.n	8003338 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d017      	beq.n	800336e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	2300      	movs	r3, #0
 800334a:	9303      	str	r3, [sp, #12]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f80f 	bl	8003380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003362:	69f8      	ldr	r0, [r7, #28]
 8003364:	f000 f8aa 	bl	80034bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003368:	2301      	movs	r3, #1
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e002      	b.n	8003374 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003372:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003374:	69bb      	ldr	r3, [r7, #24]
	}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	461a      	mov	r2, r3
 8003398:	21a5      	movs	r1, #165	; 0xa5
 800339a:	f001 fd89 	bl	8004eb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033a8:	3b01      	subs	r3, #1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	617b      	str	r3, [r7, #20]
}
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	e012      	b.n	8003404 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	7819      	ldrb	r1, [r3, #0]
 80033e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	3334      	adds	r3, #52	; 0x34
 80033ee:	460a      	mov	r2, r1
 80033f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d9e9      	bls.n	80033de <prvInitialiseNewTask+0x5e>
 800340a:	e000      	b.n	800340e <prvInitialiseNewTask+0x8e>
		{
			break;
 800340c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	2b37      	cmp	r3, #55	; 0x37
 800341a:	d901      	bls.n	8003420 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800341c:	2337      	movs	r3, #55	; 0x37
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	2200      	movs	r2, #0
 8003430:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	3304      	adds	r3, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f8cd 	bl	80025d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	3318      	adds	r3, #24
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f8c8 	bl	80025d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2200      	movs	r2, #0
 8003468:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	3354      	adds	r3, #84	; 0x54
 8003470:	2260      	movs	r2, #96	; 0x60
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f001 fd1b 	bl	8004eb0 <memset>
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <prvInitialiseNewTask+0x130>)
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <prvInitialiseNewTask+0x134>)
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <prvInitialiseNewTask+0x138>)
 800348a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	69b8      	ldr	r0, [r7, #24]
 8003492:	f001 f90b 	bl	80046ac <pxPortInitialiseStack>
 8003496:	4602      	mov	r2, r0
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a8:	bf00      	nop
 80034aa:	3720      	adds	r7, #32
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	08005ac0 	.word	0x08005ac0
 80034b4:	08005ae0 	.word	0x08005ae0
 80034b8:	08005aa0 	.word	0x08005aa0

080034bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034c4:	f001 f9e2 	bl	800488c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c8:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
 80034d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034da:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <prvAddNewTaskToReadyList+0xc4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d110      	bne.n	800350a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034e8:	f000 fc28 	bl	8003d3c <prvInitialiseTaskLists>
 80034ec:	e00d      	b.n	800350a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <prvAddNewTaskToReadyList+0xcc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d802      	bhi.n	800350a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	4a1e      	ldr	r2, [pc, #120]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 8003512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <prvAddNewTaskToReadyList+0xd0>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <prvAddNewTaskToReadyList+0xd4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d903      	bls.n	8003530 <prvAddNewTaskToReadyList+0x74>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <prvAddNewTaskToReadyList+0xd4>)
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a15      	ldr	r2, [pc, #84]	; (8003594 <prvAddNewTaskToReadyList+0xd8>)
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7ff f851 	bl	80025ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800354c:	f001 f9ce 	bl	80048ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <prvAddNewTaskToReadyList+0xcc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <prvAddNewTaskToReadyList+0xc8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	429a      	cmp	r2, r3
 8003564:	d207      	bcs.n	8003576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <prvAddNewTaskToReadyList+0xdc>)
 8003568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000ce4 	.word	0x20000ce4
 8003584:	20000810 	.word	0x20000810
 8003588:	20000cf0 	.word	0x20000cf0
 800358c:	20000d00 	.word	0x20000d00
 8003590:	20000cec 	.word	0x20000cec
 8003594:	20000814 	.word	0x20000814
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <vTaskDelay+0x60>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <vTaskDelay+0x30>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	60bb      	str	r3, [r7, #8]
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035cc:	f000 f88a 	bl	80036e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035d0:	2100      	movs	r1, #0
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fd04 	bl	8003fe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035d8:	f000 f892 	bl	8003700 <xTaskResumeAll>
 80035dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <vTaskDelay+0x64>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000d0c 	.word	0x20000d0c
 8003600:	e000ed04 	.word	0xe000ed04

08003604 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003612:	463a      	mov	r2, r7
 8003614:	1d39      	adds	r1, r7, #4
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe ff8a 	bl	8002534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	9202      	str	r2, [sp, #8]
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	460a      	mov	r2, r1
 8003632:	4924      	ldr	r1, [pc, #144]	; (80036c4 <vTaskStartScheduler+0xc0>)
 8003634:	4824      	ldr	r0, [pc, #144]	; (80036c8 <vTaskStartScheduler+0xc4>)
 8003636:	f7ff fe01 	bl	800323c <xTaskCreateStatic>
 800363a:	4603      	mov	r3, r0
 800363c:	4a23      	ldr	r2, [pc, #140]	; (80036cc <vTaskStartScheduler+0xc8>)
 800363e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <vTaskStartScheduler+0xc8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e001      	b.n	8003652 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003658:	f000 fd16 	bl	8004088 <xTimerCreateTimerTask>
 800365c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11b      	bne.n	800369c <vTaskStartScheduler+0x98>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	613b      	str	r3, [r7, #16]
}
 8003676:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <vTaskStartScheduler+0xcc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3354      	adds	r3, #84	; 0x54
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <vTaskStartScheduler+0xd0>)
 8003680:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <vTaskStartScheduler+0xd4>)
 8003684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003688:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <vTaskStartScheduler+0xd8>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <vTaskStartScheduler+0xdc>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003696:	f001 f887 	bl	80047a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800369a:	e00e      	b.n	80036ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a2:	d10a      	bne.n	80036ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	60fb      	str	r3, [r7, #12]
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <vTaskStartScheduler+0xb4>
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	08005970 	.word	0x08005970
 80036c8:	08003d0d 	.word	0x08003d0d
 80036cc:	20000d08 	.word	0x20000d08
 80036d0:	20000810 	.word	0x20000810
 80036d4:	20000010 	.word	0x20000010
 80036d8:	20000d04 	.word	0x20000d04
 80036dc:	20000cf0 	.word	0x20000cf0
 80036e0:	20000ce8 	.word	0x20000ce8

080036e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <vTaskSuspendAll+0x18>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	4a03      	ldr	r2, [pc, #12]	; (80036fc <vTaskSuspendAll+0x18>)
 80036f0:	6013      	str	r3, [r2, #0]
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000d0c 	.word	0x20000d0c

08003700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800370e:	4b42      	ldr	r3, [pc, #264]	; (8003818 <xTaskResumeAll+0x118>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <xTaskResumeAll+0x2c>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	603b      	str	r3, [r7, #0]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800372c:	f001 f8ae 	bl	800488c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <xTaskResumeAll+0x118>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	4a38      	ldr	r2, [pc, #224]	; (8003818 <xTaskResumeAll+0x118>)
 8003738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <xTaskResumeAll+0x118>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d162      	bne.n	8003808 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <xTaskResumeAll+0x11c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d05e      	beq.n	8003808 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800374a:	e02f      	b.n	80037ac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <xTaskResumeAll+0x120>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3318      	adds	r3, #24
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe ffa3 	bl	80026a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe ff9e 	bl	80026a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <xTaskResumeAll+0x124>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d903      	bls.n	800377c <xTaskResumeAll+0x7c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <xTaskResumeAll+0x124>)
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <xTaskResumeAll+0x128>)
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fe ff2b 	bl	80025ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <xTaskResumeAll+0x12c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <xTaskResumeAll+0x130>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <xTaskResumeAll+0x120>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1cb      	bne.n	800374c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ba:	f000 fb61 	bl	8003e80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <xTaskResumeAll+0x134>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ca:	f000 f845 	bl	8003858 <xTaskIncrementTick>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <xTaskResumeAll+0x130>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3b01      	subs	r3, #1
 80037de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f1      	bne.n	80037ca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <xTaskResumeAll+0x134>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <xTaskResumeAll+0x130>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <xTaskResumeAll+0x138>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003808:	f001 f870 	bl	80048ec <vPortExitCritical>

	return xAlreadyYielded;
 800380c:	68bb      	ldr	r3, [r7, #8]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000d0c 	.word	0x20000d0c
 800381c:	20000ce4 	.word	0x20000ce4
 8003820:	20000ca4 	.word	0x20000ca4
 8003824:	20000cec 	.word	0x20000cec
 8003828:	20000814 	.word	0x20000814
 800382c:	20000810 	.word	0x20000810
 8003830:	20000cf8 	.word	0x20000cf8
 8003834:	20000cf4 	.word	0x20000cf4
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003842:	4b04      	ldr	r3, [pc, #16]	; (8003854 <xTaskGetTickCount+0x18>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	20000ce8 	.word	0x20000ce8

08003858 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <xTaskIncrementTick+0x150>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f040 808e 	bne.w	8003988 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <xTaskIncrementTick+0x154>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003874:	4a4d      	ldr	r2, [pc, #308]	; (80039ac <xTaskIncrementTick+0x154>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d120      	bne.n	80038c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003880:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <xTaskIncrementTick+0x158>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	603b      	str	r3, [r7, #0]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xTaskIncrementTick+0x46>
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <xTaskIncrementTick+0x158>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <xTaskIncrementTick+0x15c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <xTaskIncrementTick+0x158>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <xTaskIncrementTick+0x15c>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <xTaskIncrementTick+0x160>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	4a3f      	ldr	r2, [pc, #252]	; (80039b8 <xTaskIncrementTick+0x160>)
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	f000 fadf 	bl	8003e80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <xTaskIncrementTick+0x164>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d34e      	bcc.n	800396a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <xTaskIncrementTick+0x158>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <xTaskIncrementTick+0x82>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <xTaskIncrementTick+0x84>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <xTaskIncrementTick+0x164>)
 80038e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038e6:	601a      	str	r2, [r3, #0]
					break;
 80038e8:	e03f      	b.n	800396a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038ea:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <xTaskIncrementTick+0x158>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d203      	bcs.n	800390a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003902:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <xTaskIncrementTick+0x164>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6013      	str	r3, [r2, #0]
						break;
 8003908:	e02f      	b.n	800396a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fec8 	bl	80026a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3318      	adds	r3, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe febf 	bl	80026a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <xTaskIncrementTick+0x168>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d903      	bls.n	800393a <xTaskIncrementTick+0xe2>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <xTaskIncrementTick+0x168>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <xTaskIncrementTick+0x16c>)
 8003948:	441a      	add	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fe4c 	bl	80025ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <xTaskIncrementTick+0x170>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	429a      	cmp	r2, r3
 8003962:	d3b3      	bcc.n	80038cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003968:	e7b0      	b.n	80038cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <xTaskIncrementTick+0x170>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4914      	ldr	r1, [pc, #80]	; (80039c4 <xTaskIncrementTick+0x16c>)
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d907      	bls.n	8003992 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003982:	2301      	movs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e004      	b.n	8003992 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <xTaskIncrementTick+0x174>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <xTaskIncrementTick+0x174>)
 8003990:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <xTaskIncrementTick+0x178>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800399e:	697b      	ldr	r3, [r7, #20]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000d0c 	.word	0x20000d0c
 80039ac:	20000ce8 	.word	0x20000ce8
 80039b0:	20000c9c 	.word	0x20000c9c
 80039b4:	20000ca0 	.word	0x20000ca0
 80039b8:	20000cfc 	.word	0x20000cfc
 80039bc:	20000d04 	.word	0x20000d04
 80039c0:	20000cec 	.word	0x20000cec
 80039c4:	20000814 	.word	0x20000814
 80039c8:	20000810 	.word	0x20000810
 80039cc:	20000cf4 	.word	0x20000cf4
 80039d0:	20000cf8 	.word	0x20000cf8

080039d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039da:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <vTaskSwitchContext+0xb0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <vTaskSwitchContext+0xb4>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039e8:	e046      	b.n	8003a78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <vTaskSwitchContext+0xb4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039f0:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <vTaskSwitchContext+0xb8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e010      	b.n	8003a1a <vTaskSwitchContext+0x46>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <vTaskSwitchContext+0x40>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	607b      	str	r3, [r7, #4]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <vTaskSwitchContext+0x3e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	491d      	ldr	r1, [pc, #116]	; (8003a90 <vTaskSwitchContext+0xbc>)
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0e4      	beq.n	80039f8 <vTaskSwitchContext+0x24>
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <vTaskSwitchContext+0xbc>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d104      	bne.n	8003a5e <vTaskSwitchContext+0x8a>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <vTaskSwitchContext+0xc0>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <vTaskSwitchContext+0xb8>)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <vTaskSwitchContext+0xc0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3354      	adds	r3, #84	; 0x54
 8003a74:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <vTaskSwitchContext+0xc4>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000d0c 	.word	0x20000d0c
 8003a88:	20000cf8 	.word	0x20000cf8
 8003a8c:	20000cec 	.word	0x20000cec
 8003a90:	20000814 	.word	0x20000814
 8003a94:	20000810 	.word	0x20000810
 8003a98:	20000010 	.word	0x20000010

08003a9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <vTaskPlaceOnEventList+0x44>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe fdb2 	bl	8002634 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6838      	ldr	r0, [r7, #0]
 8003ad4:	f000 fa84 	bl	8003fe0 <prvAddCurrentTaskToDelayedList>
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000810 	.word	0x20000810

08003ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	617b      	str	r3, [r7, #20]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3318      	adds	r3, #24
 8003b12:	4619      	mov	r1, r3
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7fe fd6a 	bl	80025ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	68b8      	ldr	r0, [r7, #8]
 8003b2a:	f000 fa59 	bl	8003fe0 <prvAddCurrentTaskToDelayedList>
	}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000810 	.word	0x20000810

08003b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60fb      	str	r3, [r7, #12]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fd99 	bl	80026a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <xTaskRemoveFromEventList+0xb0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11d      	bne.n	8003bb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fd90 	bl	80026a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <xTaskRemoveFromEventList+0xb4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d903      	bls.n	8003b98 <xTaskRemoveFromEventList+0x5c>
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <xTaskRemoveFromEventList+0xb4>)
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <xTaskRemoveFromEventList+0xb8>)
 8003ba6:	441a      	add	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7fe fd1d 	bl	80025ee <vListInsertEnd>
 8003bb4:	e005      	b.n	8003bc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	4619      	mov	r1, r3
 8003bbc:	480e      	ldr	r0, [pc, #56]	; (8003bf8 <xTaskRemoveFromEventList+0xbc>)
 8003bbe:	f7fe fd16 	bl	80025ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <xTaskRemoveFromEventList+0xc0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d905      	bls.n	8003bdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <xTaskRemoveFromEventList+0xc4>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e001      	b.n	8003be0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003be0:	697b      	ldr	r3, [r7, #20]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000d0c 	.word	0x20000d0c
 8003bf0:	20000cec 	.word	0x20000cec
 8003bf4:	20000814 	.word	0x20000814
 8003bf8:	20000ca4 	.word	0x20000ca4
 8003bfc:	20000810 	.word	0x20000810
 8003c00:	20000cf8 	.word	0x20000cf8

08003c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <vTaskInternalSetTimeOutState+0x24>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <vTaskInternalSetTimeOutState+0x28>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	605a      	str	r2, [r3, #4]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000cfc 	.word	0x20000cfc
 8003c2c:	20000ce8 	.word	0x20000ce8

08003c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	613b      	str	r3, [r7, #16]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60fb      	str	r3, [r7, #12]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c72:	f000 fe0b 	bl	800488c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <xTaskCheckForTimeOut+0xbc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c8e:	d102      	bne.n	8003c96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e023      	b.n	8003cde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <xTaskCheckForTimeOut+0xc0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d007      	beq.n	8003cb2 <xTaskCheckForTimeOut+0x82>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	e015      	b.n	8003cde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d20b      	bcs.n	8003cd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff9b 	bl	8003c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e004      	b.n	8003cde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cde:	f000 fe05 	bl	80048ec <vPortExitCritical>

	return xReturn;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000ce8 	.word	0x20000ce8
 8003cf0:	20000cfc 	.word	0x20000cfc

08003cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <vTaskMissedYield+0x14>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000cf8 	.word	0x20000cf8

08003d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d14:	f000 f852 	bl	8003dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <prvIdleTask+0x28>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d9f9      	bls.n	8003d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <prvIdleTask+0x2c>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d30:	e7f0      	b.n	8003d14 <prvIdleTask+0x8>
 8003d32:	bf00      	nop
 8003d34:	20000814 	.word	0x20000814
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	e00c      	b.n	8003d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <prvInitialiseTaskLists+0x60>)
 8003d54:	4413      	add	r3, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fc1e 	bl	8002598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b37      	cmp	r3, #55	; 0x37
 8003d66:	d9ef      	bls.n	8003d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d68:	480d      	ldr	r0, [pc, #52]	; (8003da0 <prvInitialiseTaskLists+0x64>)
 8003d6a:	f7fe fc15 	bl	8002598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d6e:	480d      	ldr	r0, [pc, #52]	; (8003da4 <prvInitialiseTaskLists+0x68>)
 8003d70:	f7fe fc12 	bl	8002598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <prvInitialiseTaskLists+0x6c>)
 8003d76:	f7fe fc0f 	bl	8002598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d7a:	480c      	ldr	r0, [pc, #48]	; (8003dac <prvInitialiseTaskLists+0x70>)
 8003d7c:	f7fe fc0c 	bl	8002598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d80:	480b      	ldr	r0, [pc, #44]	; (8003db0 <prvInitialiseTaskLists+0x74>)
 8003d82:	f7fe fc09 	bl	8002598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <prvInitialiseTaskLists+0x78>)
 8003d88:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <prvInitialiseTaskLists+0x64>)
 8003d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <prvInitialiseTaskLists+0x7c>)
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <prvInitialiseTaskLists+0x68>)
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000814 	.word	0x20000814
 8003da0:	20000c74 	.word	0x20000c74
 8003da4:	20000c88 	.word	0x20000c88
 8003da8:	20000ca4 	.word	0x20000ca4
 8003dac:	20000cb8 	.word	0x20000cb8
 8003db0:	20000cd0 	.word	0x20000cd0
 8003db4:	20000c9c 	.word	0x20000c9c
 8003db8:	20000ca0 	.word	0x20000ca0

08003dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc2:	e019      	b.n	8003df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dc4:	f000 fd62 	bl	800488c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <prvCheckTasksWaitingTermination+0x50>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fc65 	bl	80026a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <prvCheckTasksWaitingTermination+0x54>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <prvCheckTasksWaitingTermination+0x54>)
 8003de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dee:	f000 fd7d 	bl	80048ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f810 	bl	8003e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e1      	bne.n	8003dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000cb8 	.word	0x20000cb8
 8003e10:	20000ce4 	.word	0x20000ce4
 8003e14:	20000ccc 	.word	0x20000ccc

08003e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3354      	adds	r3, #84	; 0x54
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f8b3 	bl	8004f90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d108      	bne.n	8003e46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 feeb 	bl	8004c14 <vPortFree>
				vPortFree( pxTCB );
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fee8 	bl	8004c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e44:	e018      	b.n	8003e78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d103      	bne.n	8003e58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fedf 	bl	8004c14 <vPortFree>
	}
 8003e56:	e00f      	b.n	8003e78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d00a      	beq.n	8003e78 <prvDeleteTCB+0x60>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60fb      	str	r3, [r7, #12]
}
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <prvDeleteTCB+0x5e>
	}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <prvResetNextTaskUnblockTime+0x40>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <prvResetNextTaskUnblockTime+0x14>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <prvResetNextTaskUnblockTime+0x16>
 8003e94:	2300      	movs	r3, #0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <prvResetNextTaskUnblockTime+0x44>)
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ea0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ea2:	e008      	b.n	8003eb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <prvResetNextTaskUnblockTime+0x40>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <prvResetNextTaskUnblockTime+0x44>)
 8003eb4:	6013      	str	r3, [r2, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	20000c9c 	.word	0x20000c9c
 8003ec4:	20000d04 	.word	0x20000d04

08003ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <xTaskGetSchedulerState+0x34>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	e008      	b.n	8003eee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <xTaskGetSchedulerState+0x38>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	e001      	b.n	8003eee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eee:	687b      	ldr	r3, [r7, #4]
	}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000cf0 	.word	0x20000cf0
 8003f00:	20000d0c 	.word	0x20000d0c

08003f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d056      	beq.n	8003fc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <xTaskPriorityDisinherit+0xd0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d00a      	beq.n	8003f3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60fb      	str	r3, [r7, #12]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	60bb      	str	r3, [r7, #8]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d02c      	beq.n	8003fc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d128      	bne.n	8003fc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fb92 	bl	80026a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <xTaskPriorityDisinherit+0xd4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d903      	bls.n	8003fa8 <xTaskPriorityDisinherit+0xa4>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <xTaskPriorityDisinherit+0xd4>)
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <xTaskPriorityDisinherit+0xd8>)
 8003fb6:	441a      	add	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7fe fb15 	bl	80025ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fc8:	697b      	ldr	r3, [r7, #20]
	}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000810 	.word	0x20000810
 8003fd8:	20000cec 	.word	0x20000cec
 8003fdc:	20000814 	.word	0x20000814

08003fe0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fea:	4b21      	ldr	r3, [pc, #132]	; (8004070 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fb54 	bl	80026a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004002:	d10a      	bne.n	800401a <prvAddCurrentTaskToDelayedList+0x3a>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <prvAddCurrentTaskToDelayedList+0x94>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4819      	ldr	r0, [pc, #100]	; (8004078 <prvAddCurrentTaskToDelayedList+0x98>)
 8004014:	f7fe faeb 	bl	80025ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004018:	e026      	b.n	8004068 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <prvAddCurrentTaskToDelayedList+0x94>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	429a      	cmp	r2, r3
 8004030:	d209      	bcs.n	8004046 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <prvAddCurrentTaskToDelayedList+0x94>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7fe faf8 	bl	8002634 <vListInsert>
}
 8004044:	e010      	b.n	8004068 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004046:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <prvAddCurrentTaskToDelayedList+0x94>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f7fe faee 	bl	8002634 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <prvAddCurrentTaskToDelayedList+0xa4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d202      	bcs.n	8004068 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000ce8 	.word	0x20000ce8
 8004074:	20000810 	.word	0x20000810
 8004078:	20000cd0 	.word	0x20000cd0
 800407c:	20000ca0 	.word	0x20000ca0
 8004080:	20000c9c 	.word	0x20000c9c
 8004084:	20000d04 	.word	0x20000d04

08004088 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004092:	f000 facb 	bl	800462c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <xTimerCreateTimerTask+0x80>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d021      	beq.n	80040e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040a6:	1d3a      	adds	r2, r7, #4
 80040a8:	f107 0108 	add.w	r1, r7, #8
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fa57 	bl	8002564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	9202      	str	r2, [sp, #8]
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	2302      	movs	r3, #2
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	460a      	mov	r2, r1
 80040c8:	4910      	ldr	r1, [pc, #64]	; (800410c <xTimerCreateTimerTask+0x84>)
 80040ca:	4811      	ldr	r0, [pc, #68]	; (8004110 <xTimerCreateTimerTask+0x88>)
 80040cc:	f7ff f8b6 	bl	800323c <xTaskCreateStatic>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4a10      	ldr	r2, [pc, #64]	; (8004114 <xTimerCreateTimerTask+0x8c>)
 80040d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTimerCreateTimerTask+0x8c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040de:	2301      	movs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	613b      	str	r3, [r7, #16]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040fe:	697b      	ldr	r3, [r7, #20]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000d40 	.word	0x20000d40
 800410c:	08005978 	.word	0x08005978
 8004110:	08004235 	.word	0x08004235
 8004114:	20000d44 	.word	0x20000d44

08004118 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	623b      	str	r3, [r7, #32]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004146:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <xTimerGenericCommand+0x98>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d02a      	beq.n	80041a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b05      	cmp	r3, #5
 800415e:	dc18      	bgt.n	8004192 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004160:	f7ff feb2 	bl	8003ec8 <xTaskGetSchedulerState>
 8004164:	4603      	mov	r3, r0
 8004166:	2b02      	cmp	r3, #2
 8004168:	d109      	bne.n	800417e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <xTimerGenericCommand+0x98>)
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	f107 0110 	add.w	r1, r7, #16
 8004172:	2300      	movs	r3, #0
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	f7fe fbff 	bl	8002978 <xQueueGenericSend>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24
 800417c:	e012      	b.n	80041a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <xTimerGenericCommand+0x98>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f107 0110 	add.w	r1, r7, #16
 8004186:	2300      	movs	r3, #0
 8004188:	2200      	movs	r2, #0
 800418a:	f7fe fbf5 	bl	8002978 <xQueueGenericSend>
 800418e:	6278      	str	r0, [r7, #36]	; 0x24
 8004190:	e008      	b.n	80041a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <xTimerGenericCommand+0x98>)
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	f107 0110 	add.w	r1, r7, #16
 800419a:	2300      	movs	r3, #0
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	f7fe fce9 	bl	8002b74 <xQueueGenericSendFromISR>
 80041a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000d40 	.word	0x20000d40

080041b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <prvProcessExpiredTimer+0x7c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fa69 	bl	80026a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d122      	bne.n	8004220 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	18d1      	adds	r1, r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f000 f8c8 	bl	800437c <prvInsertTimerInActiveList>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041f2:	2300      	movs	r3, #0
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	2100      	movs	r1, #0
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	f7ff ff8b 	bl	8004118 <xTimerGenericCommand>
 8004202:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	6978      	ldr	r0, [r7, #20]
 8004226:	4798      	blx	r3
}
 8004228:	bf00      	nop
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000d38 	.word	0x20000d38

08004234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f857 	bl	80042f4 <prvGetNextExpireTime>
 8004246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4619      	mov	r1, r3
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f803 	bl	8004258 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004252:	f000 f8d5 	bl	8004400 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004256:	e7f1      	b.n	800423c <prvTimerTask+0x8>

08004258 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004262:	f7ff fa3f 	bl	80036e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f866 	bl	800433c <prvSampleTimeNow>
 8004270:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d130      	bne.n	80042da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <prvProcessTimerOrBlockTask+0x3c>
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	429a      	cmp	r2, r3
 8004284:	d806      	bhi.n	8004294 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004286:	f7ff fa3b 	bl	8003700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff91 	bl	80041b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004292:	e024      	b.n	80042de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <prvProcessTimerOrBlockTask+0x90>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <prvProcessTimerOrBlockTask+0x94>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7fe ff8b 	bl	80031d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042be:	f7ff fa1f 	bl	8003700 <xTaskResumeAll>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <prvProcessTimerOrBlockTask+0x98>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
}
 80042d8:	e001      	b.n	80042de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042da:	f7ff fa11 	bl	8003700 <xTaskResumeAll>
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000d3c 	.word	0x20000d3c
 80042ec:	20000d40 	.word	0x20000d40
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <prvGetNextExpireTime+0x44>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <prvGetNextExpireTime+0x44>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e001      	b.n	800432a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000d38 	.word	0x20000d38

0800433c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004344:	f7ff fa7a 	bl	800383c <xTaskGetTickCount>
 8004348:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <prvSampleTimeNow+0x3c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	429a      	cmp	r2, r3
 8004352:	d205      	bcs.n	8004360 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004354:	f000 f908 	bl	8004568 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e002      	b.n	8004366 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <prvSampleTimeNow+0x3c>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000d48 	.word	0x20000d48

0800437c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d812      	bhi.n	80043c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	1ad2      	subs	r2, r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e01b      	b.n	80043ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <prvInsertTimerInActiveList+0x7c>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fe f937 	bl	8002634 <vListInsert>
 80043c6:	e012      	b.n	80043ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d206      	bcs.n	80043de <prvInsertTimerInActiveList+0x62>
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e007      	b.n	80043ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <prvInsertTimerInActiveList+0x80>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f7fe f923 	bl	8002634 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043ee:	697b      	ldr	r3, [r7, #20]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000d3c 	.word	0x20000d3c
 80043fc:	20000d38 	.word	0x20000d38

08004400 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	; 0x38
 8004404:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004406:	e09d      	b.n	8004544 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da18      	bge.n	8004440 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	3304      	adds	r3, #4
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	61fb      	str	r3, [r7, #28]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004436:	6850      	ldr	r0, [r2, #4]
 8004438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	4611      	mov	r1, r2
 800443e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db7d      	blt.n	8004542 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	3304      	adds	r3, #4
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe f924 	bl	80026a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800445c:	463b      	mov	r3, r7
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff6c 	bl	800433c <prvSampleTimeNow>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b09      	cmp	r3, #9
 800446a:	d86b      	bhi.n	8004544 <prvProcessReceivedCommands+0x144>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <prvProcessReceivedCommands+0x74>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	0800449d 	.word	0x0800449d
 8004478:	0800449d 	.word	0x0800449d
 800447c:	0800449d 	.word	0x0800449d
 8004480:	08004545 	.word	0x08004545
 8004484:	080044f9 	.word	0x080044f9
 8004488:	08004531 	.word	0x08004531
 800448c:	0800449d 	.word	0x0800449d
 8004490:	0800449d 	.word	0x0800449d
 8004494:	08004545 	.word	0x08004545
 8004498:	080044f9 	.word	0x080044f9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	18d1      	adds	r1, r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044aa:	f7ff ff67 	bl	800437c <prvInsertTimerInActiveList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d047      	beq.n	8004544 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d13f      	bne.n	8004544 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	441a      	add	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	2100      	movs	r1, #0
 80044d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d6:	f7ff fe1f 	bl	8004118 <xTimerGenericCommand>
 80044da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d130      	bne.n	8004544 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	61bb      	str	r3, [r7, #24]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	617b      	str	r3, [r7, #20]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	699a      	ldr	r2, [r3, #24]
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	18d1      	adds	r1, r2, r3
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800452a:	f7ff ff27 	bl	800437c <prvInsertTimerInActiveList>
					break;
 800452e:	e009      	b.n	8004544 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800453a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800453c:	f000 fb6a 	bl	8004c14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004540:	e000      	b.n	8004544 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004542:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <prvProcessReceivedCommands+0x164>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	1d39      	adds	r1, r7, #4
 800454a:	2200      	movs	r2, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fba9 	bl	8002ca4 <xQueueReceive>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	f47f af57 	bne.w	8004408 <prvProcessReceivedCommands+0x8>
	}
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	3730      	adds	r7, #48	; 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000d40 	.word	0x20000d40

08004568 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800456e:	e045      	b.n	80045fc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004570:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <prvSwitchTimerLists+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <prvSwitchTimerLists+0xbc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe f88b 	bl	80026a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d12e      	bne.n	80045fc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d90e      	bls.n	80045ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <prvSwitchTimerLists+0xbc>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fe f834 	bl	8002634 <vListInsert>
 80045cc:	e016      	b.n	80045fc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045ce:	2300      	movs	r3, #0
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	2100      	movs	r1, #0
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fd9d 	bl	8004118 <xTimerGenericCommand>
 80045de:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <prvSwitchTimerLists+0x94>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	603b      	str	r3, [r7, #0]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <prvSwitchTimerLists+0xbc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1b4      	bne.n	8004570 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <prvSwitchTimerLists+0xbc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <prvSwitchTimerLists+0xc0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <prvSwitchTimerLists+0xbc>)
 8004612:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004614:	4a04      	ldr	r2, [pc, #16]	; (8004628 <prvSwitchTimerLists+0xc0>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	6013      	str	r3, [r2, #0]
}
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000d38 	.word	0x20000d38
 8004628:	20000d3c 	.word	0x20000d3c

0800462c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004632:	f000 f92b 	bl	800488c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <prvCheckForValidListAndQueue+0x60>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d120      	bne.n	8004680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800463e:	4814      	ldr	r0, [pc, #80]	; (8004690 <prvCheckForValidListAndQueue+0x64>)
 8004640:	f7fd ffaa 	bl	8002598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004644:	4813      	ldr	r0, [pc, #76]	; (8004694 <prvCheckForValidListAndQueue+0x68>)
 8004646:	f7fd ffa7 	bl	8002598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <prvCheckForValidListAndQueue+0x6c>)
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <prvCheckForValidListAndQueue+0x64>)
 800464e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004650:	4b12      	ldr	r3, [pc, #72]	; (800469c <prvCheckForValidListAndQueue+0x70>)
 8004652:	4a10      	ldr	r2, [pc, #64]	; (8004694 <prvCheckForValidListAndQueue+0x68>)
 8004654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <prvCheckForValidListAndQueue+0x74>)
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <prvCheckForValidListAndQueue+0x78>)
 800465e:	2110      	movs	r1, #16
 8004660:	200a      	movs	r0, #10
 8004662:	f7fe f8b1 	bl	80027c8 <xQueueGenericCreateStatic>
 8004666:	4603      	mov	r3, r0
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <prvCheckForValidListAndQueue+0x60>)
 800466a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <prvCheckForValidListAndQueue+0x60>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <prvCheckForValidListAndQueue+0x60>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	490b      	ldr	r1, [pc, #44]	; (80046a8 <prvCheckForValidListAndQueue+0x7c>)
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fd82 	bl	8003184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004680:	f000 f934 	bl	80048ec <vPortExitCritical>
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000d40 	.word	0x20000d40
 8004690:	20000d10 	.word	0x20000d10
 8004694:	20000d24 	.word	0x20000d24
 8004698:	20000d38 	.word	0x20000d38
 800469c:	20000d3c 	.word	0x20000d3c
 80046a0:	20000dec 	.word	0x20000dec
 80046a4:	20000d4c 	.word	0x20000d4c
 80046a8:	08005980 	.word	0x08005980

080046ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b04      	subs	r3, #4
 80046bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b04      	subs	r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b04      	subs	r3, #4
 80046da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <pxPortInitialiseStack+0x54>)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3b14      	subs	r3, #20
 80046e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3b20      	subs	r3, #32
 80046f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046f4:	68fb      	ldr	r3, [r7, #12]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	08004705 	.word	0x08004705

08004704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <prvTaskExitError+0x54>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004716:	d00a      	beq.n	800472e <prvTaskExitError+0x2a>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <prvTaskExitError+0x28>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60bb      	str	r3, [r7, #8]
}
 8004740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004742:	bf00      	nop
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0fc      	beq.n	8004744 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	2000000c 	.word	0x2000000c
 800475c:	00000000 	.word	0x00000000

08004760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <pxCurrentTCBConst2>)
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	6808      	ldr	r0, [r1, #0]
 8004766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800476a:	f380 8809 	msr	PSP, r0
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8811 	msr	BASEPRI, r0
 800477a:	f04e 0e0d 	orr.w	lr, lr, #13
 800477e:	4770      	bx	lr

08004780 <pxCurrentTCBConst2>:
 8004780:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004788:	4806      	ldr	r0, [pc, #24]	; (80047a4 <prvPortStartFirstTask+0x1c>)
 800478a:	6800      	ldr	r0, [r0, #0]
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	f380 8808 	msr	MSP, r0
 8004792:	b662      	cpsie	i
 8004794:	b661      	cpsie	f
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	df00      	svc	0
 80047a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047a2:	bf00      	nop
 80047a4:	e000ed08 	.word	0xe000ed08

080047a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ae:	4b32      	ldr	r3, [pc, #200]	; (8004878 <xPortStartScheduler+0xd0>)
 80047b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b2a      	ldr	r3, [pc, #168]	; (800487c <xPortStartScheduler+0xd4>)
 80047d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <xPortStartScheduler+0xd8>)
 80047d8:	2207      	movs	r2, #7
 80047da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047dc:	e009      	b.n	80047f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <xPortStartScheduler+0xd8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	4a26      	ldr	r2, [pc, #152]	; (8004880 <xPortStartScheduler+0xd8>)
 80047e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b80      	cmp	r3, #128	; 0x80
 80047fc:	d0ef      	beq.n	80047de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <xPortStartScheduler+0xd8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1c3 0307 	rsb	r3, r3, #7
 8004806:	2b04      	cmp	r3, #4
 8004808:	d00a      	beq.n	8004820 <xPortStartScheduler+0x78>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60bb      	str	r3, [r7, #8]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004820:	4b17      	ldr	r3, [pc, #92]	; (8004880 <xPortStartScheduler+0xd8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	4a16      	ldr	r2, [pc, #88]	; (8004880 <xPortStartScheduler+0xd8>)
 8004828:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800482a:	4b15      	ldr	r3, [pc, #84]	; (8004880 <xPortStartScheduler+0xd8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <xPortStartScheduler+0xd8>)
 8004834:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <xPortStartScheduler+0xdc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <xPortStartScheduler+0xdc>)
 8004844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <xPortStartScheduler+0xdc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <xPortStartScheduler+0xdc>)
 8004850:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004854:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004856:	f000 f8b9 	bl	80049cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <xPortStartScheduler+0xe0>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004860:	f7ff ff92 	bl	8004788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004864:	f7ff f8b6 	bl	80039d4 <vTaskSwitchContext>
	prvTaskExitError();
 8004868:	f7ff ff4c 	bl	8004704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000e400 	.word	0xe000e400
 800487c:	20000e3c 	.word	0x20000e3c
 8004880:	20000e40 	.word	0x20000e40
 8004884:	e000ed20 	.word	0xe000ed20
 8004888:	2000000c 	.word	0x2000000c

0800488c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	607b      	str	r3, [r7, #4]
}
 80048a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <vPortEnterCritical+0x58>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <vPortEnterCritical+0x58>)
 80048ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <vPortEnterCritical+0x58>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10f      	bne.n	80048d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <vPortEnterCritical+0x5c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	603b      	str	r3, [r7, #0]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortEnterCritical+0x4a>
	}
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <vPortExitCritical+0x4c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <vPortExitCritical+0x24>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	607b      	str	r3, [r7, #4]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <vPortExitCritical+0x4c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3b01      	subs	r3, #1
 8004916:	4a08      	ldr	r2, [pc, #32]	; (8004938 <vPortExitCritical+0x4c>)
 8004918:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <vPortExitCritical+0x4c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d105      	bne.n	800492e <vPortExitCritical+0x42>
 8004922:	2300      	movs	r3, #0
 8004924:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f383 8811 	msr	BASEPRI, r3
}
 800492c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	2000000c 	.word	0x2000000c
 800493c:	00000000 	.word	0x00000000

08004940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004940:	f3ef 8009 	mrs	r0, PSP
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <pxCurrentTCBConst>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004950:	6010      	str	r0, [r2, #0]
 8004952:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004956:	f04f 0050 	mov.w	r0, #80	; 0x50
 800495a:	f380 8811 	msr	BASEPRI, r0
 800495e:	f7ff f839 	bl	80039d4 <vTaskSwitchContext>
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	6808      	ldr	r0, [r1, #0]
 8004972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004976:	f380 8809 	msr	PSP, r0
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	4770      	bx	lr

08004980 <pxCurrentTCBConst>:
 8004980:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	607b      	str	r3, [r7, #4]
}
 80049a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049a2:	f7fe ff59 	bl	8003858 <xTaskIncrementTick>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <SysTick_Handler+0x40>)
 80049ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	2300      	movs	r3, #0
 80049b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f383 8811 	msr	BASEPRI, r3
}
 80049be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <vPortSetupTimerInterrupt+0x30>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049d6:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <vPortSetupTimerInterrupt+0x38>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <vPortSetupTimerInterrupt+0x3c>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <vPortSetupTimerInterrupt+0x40>)
 80049ea:	3b01      	subs	r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ee:	4b03      	ldr	r3, [pc, #12]	; (80049fc <vPortSetupTimerInterrupt+0x30>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	e000e010 	.word	0xe000e010
 8004a00:	e000e018 	.word	0xe000e018
 8004a04:	20000000 	.word	0x20000000
 8004a08:	10624dd3 	.word	0x10624dd3
 8004a0c:	e000e014 	.word	0xe000e014

08004a10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a16:	f3ef 8305 	mrs	r3, IPSR
 8004a1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d914      	bls.n	8004a4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a22:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <vPortValidateInterruptPriority+0x6c>)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <vPortValidateInterruptPriority+0x70>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	7afa      	ldrb	r2, [r7, #11]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d20a      	bcs.n	8004a4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	607b      	str	r3, [r7, #4]
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <vPortValidateInterruptPriority+0x74>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <vPortValidateInterruptPriority+0x78>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d90a      	bls.n	8004a72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	603b      	str	r3, [r7, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <vPortValidateInterruptPriority+0x60>
	}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	e000e3f0 	.word	0xe000e3f0
 8004a80:	20000e3c 	.word	0x20000e3c
 8004a84:	e000ed0c 	.word	0xe000ed0c
 8004a88:	20000e40 	.word	0x20000e40

08004a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a98:	f7fe fe24 	bl	80036e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a9c:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <pvPortMalloc+0x174>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004aa4:	f000 f910 	bl	8004cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004aa8:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <pvPortMalloc+0x178>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 808e 	bne.w	8004bd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01d      	beq.n	8004af8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004abc:	2208      	movs	r2, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d014      	beq.n	8004af8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f023 0307 	bic.w	r3, r3, #7
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <pvPortMalloc+0x6c>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	617b      	str	r3, [r7, #20]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d069      	beq.n	8004bd2 <pvPortMalloc+0x146>
 8004afe:	4b42      	ldr	r3, [pc, #264]	; (8004c08 <pvPortMalloc+0x17c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d864      	bhi.n	8004bd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b08:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <pvPortMalloc+0x180>)
 8004b0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b0c:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <pvPortMalloc+0x180>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b12:	e004      	b.n	8004b1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d903      	bls.n	8004b30 <pvPortMalloc+0xa4>
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f1      	bne.n	8004b14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b30:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <pvPortMalloc+0x174>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d04b      	beq.n	8004bd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2208      	movs	r2, #8
 8004b40:	4413      	add	r3, r2
 8004b42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	2308      	movs	r3, #8
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d91f      	bls.n	8004b9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <pvPortMalloc+0xf8>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	613b      	str	r3, [r7, #16]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1ad2      	subs	r2, r2, r3
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b96:	69b8      	ldr	r0, [r7, #24]
 8004b98:	f000 f8f8 	bl	8004d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <pvPortMalloc+0x17c>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <pvPortMalloc+0x17c>)
 8004ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004baa:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <pvPortMalloc+0x17c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <pvPortMalloc+0x184>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d203      	bcs.n	8004bbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <pvPortMalloc+0x17c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <pvPortMalloc+0x184>)
 8004bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <pvPortMalloc+0x178>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bd2:	f7fe fd95 	bl	8003700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <pvPortMalloc+0x16a>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <pvPortMalloc+0x168>
	return pvReturn;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3728      	adds	r7, #40	; 0x28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	2000355c 	.word	0x2000355c
 8004c04:	20003568 	.word	0x20003568
 8004c08:	20003560 	.word	0x20003560
 8004c0c:	20003554 	.word	0x20003554
 8004c10:	20003564 	.word	0x20003564

08004c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d048      	beq.n	8004cb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c26:	2308      	movs	r3, #8
 8004c28:	425b      	negs	r3, r3
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <vPortFree+0xac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <vPortFree+0x44>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60fb      	str	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <vPortFree+0x62>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60bb      	str	r3, [r7, #8]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <vPortFree+0xac>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d019      	beq.n	8004cb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <vPortFree+0xac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c9c:	f7fe fd22 	bl	80036e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <vPortFree+0xb0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <vPortFree+0xb0>)
 8004cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cae:	6938      	ldr	r0, [r7, #16]
 8004cb0:	f000 f86c 	bl	8004d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cb4:	f7fe fd24 	bl	8003700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cb8:	bf00      	nop
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20003568 	.word	0x20003568
 8004cc4:	20003560 	.word	0x20003560

08004cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cce:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <prvHeapInit+0xac>)
 8004cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <prvHeapInit+0xac>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d00:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <prvHeapInit+0xb0>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <prvHeapInit+0xb0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4413      	add	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d14:	2208      	movs	r2, #8
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <prvHeapInit+0xb4>)
 8004d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <prvHeapInit+0xb4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <prvHeapInit+0xb4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <prvHeapInit+0xb4>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4a0a      	ldr	r2, [pc, #40]	; (8004d80 <prvHeapInit+0xb8>)
 8004d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <prvHeapInit+0xbc>)
 8004d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <prvHeapInit+0xc0>)
 8004d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d66:	601a      	str	r2, [r3, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000e44 	.word	0x20000e44
 8004d78:	20003554 	.word	0x20003554
 8004d7c:	2000355c 	.word	0x2000355c
 8004d80:	20003564 	.word	0x20003564
 8004d84:	20003560 	.word	0x20003560
 8004d88:	20003568 	.word	0x20003568

08004d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d94:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <prvInsertBlockIntoFreeList+0xa8>)
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e002      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x14>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d8f7      	bhi.n	8004d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	4413      	add	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d108      	bne.n	8004dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d118      	bne.n	8004e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <prvInsertBlockIntoFreeList+0xac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d00d      	beq.n	8004e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	441a      	add	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e008      	b.n	8004e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <prvInsertBlockIntoFreeList+0xac>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e003      	b.n	8004e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d002      	beq.n	8004e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	20003554 	.word	0x20003554
 8004e38:	2000355c 	.word	0x2000355c

08004e3c <__errno>:
 8004e3c:	4b01      	ldr	r3, [pc, #4]	; (8004e44 <__errno+0x8>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000010 	.word	0x20000010

08004e48 <__libc_init_array>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	4d0c      	ldr	r5, [pc, #48]	; (8004e80 <__libc_init_array+0x38>)
 8004e4e:	4c0d      	ldr	r4, [pc, #52]	; (8004e84 <__libc_init_array+0x3c>)
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	42a6      	cmp	r6, r4
 8004e56:	d109      	bne.n	8004e6c <__libc_init_array+0x24>
 8004e58:	f000 fcee 	bl	8005838 <_init>
 8004e5c:	2600      	movs	r6, #0
 8004e5e:	4d0a      	ldr	r5, [pc, #40]	; (8004e88 <__libc_init_array+0x40>)
 8004e60:	4c0a      	ldr	r4, [pc, #40]	; (8004e8c <__libc_init_array+0x44>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	42a6      	cmp	r6, r4
 8004e68:	d105      	bne.n	8004e76 <__libc_init_array+0x2e>
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e70:	4798      	blx	r3
 8004e72:	3601      	adds	r6, #1
 8004e74:	e7ee      	b.n	8004e54 <__libc_init_array+0xc>
 8004e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7a:	4798      	blx	r3
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	e7f2      	b.n	8004e66 <__libc_init_array+0x1e>
 8004e80:	08005b34 	.word	0x08005b34
 8004e84:	08005b34 	.word	0x08005b34
 8004e88:	08005b34 	.word	0x08005b34
 8004e8c:	08005b38 	.word	0x08005b38

08004e90 <__retarget_lock_acquire_recursive>:
 8004e90:	4770      	bx	lr

08004e92 <__retarget_lock_release_recursive>:
 8004e92:	4770      	bx	lr

08004e94 <memcpy>:
 8004e94:	440a      	add	r2, r1
 8004e96:	4291      	cmp	r1, r2
 8004e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e9c:	d100      	bne.n	8004ea0 <memcpy+0xc>
 8004e9e:	4770      	bx	lr
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eac:	d1f9      	bne.n	8004ea2 <memcpy+0xe>
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <memset>:
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4402      	add	r2, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memset+0xa>
 8004eb8:	4770      	bx	lr
 8004eba:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebe:	e7f9      	b.n	8004eb4 <memset+0x4>

08004ec0 <_malloc_r>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	1ccd      	adds	r5, r1, #3
 8004ec4:	f025 0503 	bic.w	r5, r5, #3
 8004ec8:	3508      	adds	r5, #8
 8004eca:	2d0c      	cmp	r5, #12
 8004ecc:	bf38      	it	cc
 8004ece:	250c      	movcc	r5, #12
 8004ed0:	2d00      	cmp	r5, #0
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	db01      	blt.n	8004eda <_malloc_r+0x1a>
 8004ed6:	42a9      	cmp	r1, r5
 8004ed8:	d903      	bls.n	8004ee2 <_malloc_r+0x22>
 8004eda:	230c      	movs	r3, #12
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	2000      	movs	r0, #0
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee2:	f000 f909 	bl	80050f8 <__malloc_lock>
 8004ee6:	4921      	ldr	r1, [pc, #132]	; (8004f6c <_malloc_r+0xac>)
 8004ee8:	680a      	ldr	r2, [r1, #0]
 8004eea:	4614      	mov	r4, r2
 8004eec:	b99c      	cbnz	r4, 8004f16 <_malloc_r+0x56>
 8004eee:	4f20      	ldr	r7, [pc, #128]	; (8004f70 <_malloc_r+0xb0>)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b923      	cbnz	r3, 8004efe <_malloc_r+0x3e>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f000 f8a6 	bl	8005048 <_sbrk_r>
 8004efc:	6038      	str	r0, [r7, #0]
 8004efe:	4629      	mov	r1, r5
 8004f00:	4630      	mov	r0, r6
 8004f02:	f000 f8a1 	bl	8005048 <_sbrk_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d123      	bne.n	8004f52 <_malloc_r+0x92>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	6033      	str	r3, [r6, #0]
 8004f10:	f000 f8f8 	bl	8005104 <__malloc_unlock>
 8004f14:	e7e3      	b.n	8004ede <_malloc_r+0x1e>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	1b5b      	subs	r3, r3, r5
 8004f1a:	d417      	bmi.n	8004f4c <_malloc_r+0x8c>
 8004f1c:	2b0b      	cmp	r3, #11
 8004f1e:	d903      	bls.n	8004f28 <_malloc_r+0x68>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	441c      	add	r4, r3
 8004f24:	6025      	str	r5, [r4, #0]
 8004f26:	e004      	b.n	8004f32 <_malloc_r+0x72>
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	42a2      	cmp	r2, r4
 8004f2c:	bf0c      	ite	eq
 8004f2e:	600b      	streq	r3, [r1, #0]
 8004f30:	6053      	strne	r3, [r2, #4]
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 f8e6 	bl	8005104 <__malloc_unlock>
 8004f38:	f104 000b 	add.w	r0, r4, #11
 8004f3c:	1d23      	adds	r3, r4, #4
 8004f3e:	f020 0007 	bic.w	r0, r0, #7
 8004f42:	1ac2      	subs	r2, r0, r3
 8004f44:	d0cc      	beq.n	8004ee0 <_malloc_r+0x20>
 8004f46:	1a1b      	subs	r3, r3, r0
 8004f48:	50a3      	str	r3, [r4, r2]
 8004f4a:	e7c9      	b.n	8004ee0 <_malloc_r+0x20>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	6864      	ldr	r4, [r4, #4]
 8004f50:	e7cc      	b.n	8004eec <_malloc_r+0x2c>
 8004f52:	1cc4      	adds	r4, r0, #3
 8004f54:	f024 0403 	bic.w	r4, r4, #3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d0e3      	beq.n	8004f24 <_malloc_r+0x64>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 f872 	bl	8005048 <_sbrk_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d1dd      	bne.n	8004f24 <_malloc_r+0x64>
 8004f68:	e7cf      	b.n	8004f0a <_malloc_r+0x4a>
 8004f6a:	bf00      	nop
 8004f6c:	2000356c 	.word	0x2000356c
 8004f70:	20003570 	.word	0x20003570

08004f74 <cleanup_glue>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	460c      	mov	r4, r1
 8004f78:	6809      	ldr	r1, [r1, #0]
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	b109      	cbz	r1, 8004f82 <cleanup_glue+0xe>
 8004f7e:	f7ff fff9 	bl	8004f74 <cleanup_glue>
 8004f82:	4621      	mov	r1, r4
 8004f84:	4628      	mov	r0, r5
 8004f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f8a:	f000 b8c1 	b.w	8005110 <_free_r>
	...

08004f90 <_reclaim_reent>:
 8004f90:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <_reclaim_reent+0xb4>)
 8004f92:	b570      	push	{r4, r5, r6, lr}
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4604      	mov	r4, r0
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	d051      	beq.n	8005040 <_reclaim_reent+0xb0>
 8004f9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f9e:	b143      	cbz	r3, 8004fb2 <_reclaim_reent+0x22>
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d14a      	bne.n	800503c <_reclaim_reent+0xac>
 8004fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	b111      	cbz	r1, 8004fb2 <_reclaim_reent+0x22>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f8af 	bl	8005110 <_free_r>
 8004fb2:	6961      	ldr	r1, [r4, #20]
 8004fb4:	b111      	cbz	r1, 8004fbc <_reclaim_reent+0x2c>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f8aa 	bl	8005110 <_free_r>
 8004fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fbe:	b111      	cbz	r1, 8004fc6 <_reclaim_reent+0x36>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 f8a5 	bl	8005110 <_free_r>
 8004fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004fc8:	b111      	cbz	r1, 8004fd0 <_reclaim_reent+0x40>
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 f8a0 	bl	8005110 <_free_r>
 8004fd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004fd2:	b111      	cbz	r1, 8004fda <_reclaim_reent+0x4a>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 f89b 	bl	8005110 <_free_r>
 8004fda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fdc:	b111      	cbz	r1, 8004fe4 <_reclaim_reent+0x54>
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f896 	bl	8005110 <_free_r>
 8004fe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004fe6:	b111      	cbz	r1, 8004fee <_reclaim_reent+0x5e>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 f891 	bl	8005110 <_free_r>
 8004fee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ff0:	b111      	cbz	r1, 8004ff8 <_reclaim_reent+0x68>
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f88c 	bl	8005110 <_free_r>
 8004ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffa:	b111      	cbz	r1, 8005002 <_reclaim_reent+0x72>
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 f887 	bl	8005110 <_free_r>
 8005002:	69a3      	ldr	r3, [r4, #24]
 8005004:	b1e3      	cbz	r3, 8005040 <_reclaim_reent+0xb0>
 8005006:	4620      	mov	r0, r4
 8005008:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800500a:	4798      	blx	r3
 800500c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800500e:	b1b9      	cbz	r1, 8005040 <_reclaim_reent+0xb0>
 8005010:	4620      	mov	r0, r4
 8005012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005016:	f7ff bfad 	b.w	8004f74 <cleanup_glue>
 800501a:	5949      	ldr	r1, [r1, r5]
 800501c:	b941      	cbnz	r1, 8005030 <_reclaim_reent+0xa0>
 800501e:	3504      	adds	r5, #4
 8005020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005022:	2d80      	cmp	r5, #128	; 0x80
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	d1f8      	bne.n	800501a <_reclaim_reent+0x8a>
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f871 	bl	8005110 <_free_r>
 800502e:	e7ba      	b.n	8004fa6 <_reclaim_reent+0x16>
 8005030:	680e      	ldr	r6, [r1, #0]
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f86c 	bl	8005110 <_free_r>
 8005038:	4631      	mov	r1, r6
 800503a:	e7ef      	b.n	800501c <_reclaim_reent+0x8c>
 800503c:	2500      	movs	r5, #0
 800503e:	e7ef      	b.n	8005020 <_reclaim_reent+0x90>
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	bf00      	nop
 8005044:	20000010 	.word	0x20000010

08005048 <_sbrk_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	2300      	movs	r3, #0
 800504c:	4d05      	ldr	r5, [pc, #20]	; (8005064 <_sbrk_r+0x1c>)
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f7fb ff5e 	bl	8000f14 <_sbrk>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_sbrk_r+0x1a>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_sbrk_r+0x1a>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	2000362c 	.word	0x2000362c

08005068 <sniprintf>:
 8005068:	b40c      	push	{r2, r3}
 800506a:	b530      	push	{r4, r5, lr}
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <sniprintf+0x64>)
 800506e:	1e0c      	subs	r4, r1, #0
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	b09d      	sub	sp, #116	; 0x74
 8005074:	da08      	bge.n	8005088 <sniprintf+0x20>
 8005076:	238b      	movs	r3, #139	; 0x8b
 8005078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800507c:	602b      	str	r3, [r5, #0]
 800507e:	b01d      	add	sp, #116	; 0x74
 8005080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005084:	b002      	add	sp, #8
 8005086:	4770      	bx	lr
 8005088:	f44f 7302 	mov.w	r3, #520	; 0x208
 800508c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005090:	bf0c      	ite	eq
 8005092:	4623      	moveq	r3, r4
 8005094:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005098:	9304      	str	r3, [sp, #16]
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050a0:	9002      	str	r0, [sp, #8]
 80050a2:	9006      	str	r0, [sp, #24]
 80050a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050a8:	4628      	mov	r0, r5
 80050aa:	ab21      	add	r3, sp, #132	; 0x84
 80050ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050ae:	a902      	add	r1, sp, #8
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	f000 f8d5 	bl	8005260 <_svfiprintf_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	bfbc      	itt	lt
 80050ba:	238b      	movlt	r3, #139	; 0x8b
 80050bc:	602b      	strlt	r3, [r5, #0]
 80050be:	2c00      	cmp	r4, #0
 80050c0:	d0dd      	beq.n	800507e <sniprintf+0x16>
 80050c2:	2200      	movs	r2, #0
 80050c4:	9b02      	ldr	r3, [sp, #8]
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e7d9      	b.n	800507e <sniprintf+0x16>
 80050ca:	bf00      	nop
 80050cc:	20000010 	.word	0x20000010

080050d0 <strncpy>:
 80050d0:	4603      	mov	r3, r0
 80050d2:	b510      	push	{r4, lr}
 80050d4:	3901      	subs	r1, #1
 80050d6:	b132      	cbz	r2, 80050e6 <strncpy+0x16>
 80050d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80050dc:	3a01      	subs	r2, #1
 80050de:	f803 4b01 	strb.w	r4, [r3], #1
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	d1f7      	bne.n	80050d6 <strncpy+0x6>
 80050e6:	2100      	movs	r1, #0
 80050e8:	441a      	add	r2, r3
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d100      	bne.n	80050f0 <strncpy+0x20>
 80050ee:	bd10      	pop	{r4, pc}
 80050f0:	f803 1b01 	strb.w	r1, [r3], #1
 80050f4:	e7f9      	b.n	80050ea <strncpy+0x1a>
	...

080050f8 <__malloc_lock>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__malloc_lock+0x8>)
 80050fa:	f7ff bec9 	b.w	8004e90 <__retarget_lock_acquire_recursive>
 80050fe:	bf00      	nop
 8005100:	20003624 	.word	0x20003624

08005104 <__malloc_unlock>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__malloc_unlock+0x8>)
 8005106:	f7ff bec4 	b.w	8004e92 <__retarget_lock_release_recursive>
 800510a:	bf00      	nop
 800510c:	20003624 	.word	0x20003624

08005110 <_free_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4605      	mov	r5, r0
 8005114:	2900      	cmp	r1, #0
 8005116:	d043      	beq.n	80051a0 <_free_r+0x90>
 8005118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800511c:	1f0c      	subs	r4, r1, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfb8      	it	lt
 8005122:	18e4      	addlt	r4, r4, r3
 8005124:	f7ff ffe8 	bl	80050f8 <__malloc_lock>
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <_free_r+0x94>)
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	4610      	mov	r0, r2
 800512e:	b933      	cbnz	r3, 800513e <_free_r+0x2e>
 8005130:	6063      	str	r3, [r4, #4]
 8005132:	6014      	str	r4, [r2, #0]
 8005134:	4628      	mov	r0, r5
 8005136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800513a:	f7ff bfe3 	b.w	8005104 <__malloc_unlock>
 800513e:	42a3      	cmp	r3, r4
 8005140:	d90a      	bls.n	8005158 <_free_r+0x48>
 8005142:	6821      	ldr	r1, [r4, #0]
 8005144:	1862      	adds	r2, r4, r1
 8005146:	4293      	cmp	r3, r2
 8005148:	bf01      	itttt	eq
 800514a:	681a      	ldreq	r2, [r3, #0]
 800514c:	685b      	ldreq	r3, [r3, #4]
 800514e:	1852      	addeq	r2, r2, r1
 8005150:	6022      	streq	r2, [r4, #0]
 8005152:	6063      	str	r3, [r4, #4]
 8005154:	6004      	str	r4, [r0, #0]
 8005156:	e7ed      	b.n	8005134 <_free_r+0x24>
 8005158:	461a      	mov	r2, r3
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	b10b      	cbz	r3, 8005162 <_free_r+0x52>
 800515e:	42a3      	cmp	r3, r4
 8005160:	d9fa      	bls.n	8005158 <_free_r+0x48>
 8005162:	6811      	ldr	r1, [r2, #0]
 8005164:	1850      	adds	r0, r2, r1
 8005166:	42a0      	cmp	r0, r4
 8005168:	d10b      	bne.n	8005182 <_free_r+0x72>
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	4401      	add	r1, r0
 800516e:	1850      	adds	r0, r2, r1
 8005170:	4283      	cmp	r3, r0
 8005172:	6011      	str	r1, [r2, #0]
 8005174:	d1de      	bne.n	8005134 <_free_r+0x24>
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4401      	add	r1, r0
 800517c:	6011      	str	r1, [r2, #0]
 800517e:	6053      	str	r3, [r2, #4]
 8005180:	e7d8      	b.n	8005134 <_free_r+0x24>
 8005182:	d902      	bls.n	800518a <_free_r+0x7a>
 8005184:	230c      	movs	r3, #12
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	e7d4      	b.n	8005134 <_free_r+0x24>
 800518a:	6820      	ldr	r0, [r4, #0]
 800518c:	1821      	adds	r1, r4, r0
 800518e:	428b      	cmp	r3, r1
 8005190:	bf01      	itttt	eq
 8005192:	6819      	ldreq	r1, [r3, #0]
 8005194:	685b      	ldreq	r3, [r3, #4]
 8005196:	1809      	addeq	r1, r1, r0
 8005198:	6021      	streq	r1, [r4, #0]
 800519a:	6063      	str	r3, [r4, #4]
 800519c:	6054      	str	r4, [r2, #4]
 800519e:	e7c9      	b.n	8005134 <_free_r+0x24>
 80051a0:	bd38      	pop	{r3, r4, r5, pc}
 80051a2:	bf00      	nop
 80051a4:	2000356c 	.word	0x2000356c

080051a8 <__ssputs_r>:
 80051a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	688e      	ldr	r6, [r1, #8]
 80051ae:	4682      	mov	sl, r0
 80051b0:	429e      	cmp	r6, r3
 80051b2:	460c      	mov	r4, r1
 80051b4:	4690      	mov	r8, r2
 80051b6:	461f      	mov	r7, r3
 80051b8:	d838      	bhi.n	800522c <__ssputs_r+0x84>
 80051ba:	898a      	ldrh	r2, [r1, #12]
 80051bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051c0:	d032      	beq.n	8005228 <__ssputs_r+0x80>
 80051c2:	6825      	ldr	r5, [r4, #0]
 80051c4:	6909      	ldr	r1, [r1, #16]
 80051c6:	3301      	adds	r3, #1
 80051c8:	eba5 0901 	sub.w	r9, r5, r1
 80051cc:	6965      	ldr	r5, [r4, #20]
 80051ce:	444b      	add	r3, r9
 80051d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051d8:	106d      	asrs	r5, r5, #1
 80051da:	429d      	cmp	r5, r3
 80051dc:	bf38      	it	cc
 80051de:	461d      	movcc	r5, r3
 80051e0:	0553      	lsls	r3, r2, #21
 80051e2:	d531      	bpl.n	8005248 <__ssputs_r+0xa0>
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7ff fe6b 	bl	8004ec0 <_malloc_r>
 80051ea:	4606      	mov	r6, r0
 80051ec:	b950      	cbnz	r0, 8005204 <__ssputs_r+0x5c>
 80051ee:	230c      	movs	r3, #12
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f4:	f8ca 3000 	str.w	r3, [sl]
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005204:	464a      	mov	r2, r9
 8005206:	6921      	ldr	r1, [r4, #16]
 8005208:	f7ff fe44 	bl	8004e94 <memcpy>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	6126      	str	r6, [r4, #16]
 800521a:	444e      	add	r6, r9
 800521c:	6026      	str	r6, [r4, #0]
 800521e:	463e      	mov	r6, r7
 8005220:	6165      	str	r5, [r4, #20]
 8005222:	eba5 0509 	sub.w	r5, r5, r9
 8005226:	60a5      	str	r5, [r4, #8]
 8005228:	42be      	cmp	r6, r7
 800522a:	d900      	bls.n	800522e <__ssputs_r+0x86>
 800522c:	463e      	mov	r6, r7
 800522e:	4632      	mov	r2, r6
 8005230:	4641      	mov	r1, r8
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	f000 fab8 	bl	80057a8 <memmove>
 8005238:	68a3      	ldr	r3, [r4, #8]
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	1b9b      	subs	r3, r3, r6
 800523e:	4432      	add	r2, r6
 8005240:	2000      	movs	r0, #0
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	6022      	str	r2, [r4, #0]
 8005246:	e7db      	b.n	8005200 <__ssputs_r+0x58>
 8005248:	462a      	mov	r2, r5
 800524a:	f000 fac7 	bl	80057dc <_realloc_r>
 800524e:	4606      	mov	r6, r0
 8005250:	2800      	cmp	r0, #0
 8005252:	d1e1      	bne.n	8005218 <__ssputs_r+0x70>
 8005254:	4650      	mov	r0, sl
 8005256:	6921      	ldr	r1, [r4, #16]
 8005258:	f7ff ff5a 	bl	8005110 <_free_r>
 800525c:	e7c7      	b.n	80051ee <__ssputs_r+0x46>
	...

08005260 <_svfiprintf_r>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	4698      	mov	r8, r3
 8005266:	898b      	ldrh	r3, [r1, #12]
 8005268:	4607      	mov	r7, r0
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	460d      	mov	r5, r1
 800526e:	4614      	mov	r4, r2
 8005270:	b09d      	sub	sp, #116	; 0x74
 8005272:	d50e      	bpl.n	8005292 <_svfiprintf_r+0x32>
 8005274:	690b      	ldr	r3, [r1, #16]
 8005276:	b963      	cbnz	r3, 8005292 <_svfiprintf_r+0x32>
 8005278:	2140      	movs	r1, #64	; 0x40
 800527a:	f7ff fe21 	bl	8004ec0 <_malloc_r>
 800527e:	6028      	str	r0, [r5, #0]
 8005280:	6128      	str	r0, [r5, #16]
 8005282:	b920      	cbnz	r0, 800528e <_svfiprintf_r+0x2e>
 8005284:	230c      	movs	r3, #12
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800528c:	e0d1      	b.n	8005432 <_svfiprintf_r+0x1d2>
 800528e:	2340      	movs	r3, #64	; 0x40
 8005290:	616b      	str	r3, [r5, #20]
 8005292:	2300      	movs	r3, #0
 8005294:	9309      	str	r3, [sp, #36]	; 0x24
 8005296:	2320      	movs	r3, #32
 8005298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800529c:	2330      	movs	r3, #48	; 0x30
 800529e:	f04f 0901 	mov.w	r9, #1
 80052a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800544c <_svfiprintf_r+0x1ec>
 80052aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ae:	4623      	mov	r3, r4
 80052b0:	469a      	mov	sl, r3
 80052b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052b6:	b10a      	cbz	r2, 80052bc <_svfiprintf_r+0x5c>
 80052b8:	2a25      	cmp	r2, #37	; 0x25
 80052ba:	d1f9      	bne.n	80052b0 <_svfiprintf_r+0x50>
 80052bc:	ebba 0b04 	subs.w	fp, sl, r4
 80052c0:	d00b      	beq.n	80052da <_svfiprintf_r+0x7a>
 80052c2:	465b      	mov	r3, fp
 80052c4:	4622      	mov	r2, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	4638      	mov	r0, r7
 80052ca:	f7ff ff6d 	bl	80051a8 <__ssputs_r>
 80052ce:	3001      	adds	r0, #1
 80052d0:	f000 80aa 	beq.w	8005428 <_svfiprintf_r+0x1c8>
 80052d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052d6:	445a      	add	r2, fp
 80052d8:	9209      	str	r2, [sp, #36]	; 0x24
 80052da:	f89a 3000 	ldrb.w	r3, [sl]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80a2 	beq.w	8005428 <_svfiprintf_r+0x1c8>
 80052e4:	2300      	movs	r3, #0
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ee:	f10a 0a01 	add.w	sl, sl, #1
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	9307      	str	r3, [sp, #28]
 80052f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052fa:	931a      	str	r3, [sp, #104]	; 0x68
 80052fc:	4654      	mov	r4, sl
 80052fe:	2205      	movs	r2, #5
 8005300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005304:	4851      	ldr	r0, [pc, #324]	; (800544c <_svfiprintf_r+0x1ec>)
 8005306:	f000 fa41 	bl	800578c <memchr>
 800530a:	9a04      	ldr	r2, [sp, #16]
 800530c:	b9d8      	cbnz	r0, 8005346 <_svfiprintf_r+0xe6>
 800530e:	06d0      	lsls	r0, r2, #27
 8005310:	bf44      	itt	mi
 8005312:	2320      	movmi	r3, #32
 8005314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005318:	0711      	lsls	r1, r2, #28
 800531a:	bf44      	itt	mi
 800531c:	232b      	movmi	r3, #43	; 0x2b
 800531e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005322:	f89a 3000 	ldrb.w	r3, [sl]
 8005326:	2b2a      	cmp	r3, #42	; 0x2a
 8005328:	d015      	beq.n	8005356 <_svfiprintf_r+0xf6>
 800532a:	4654      	mov	r4, sl
 800532c:	2000      	movs	r0, #0
 800532e:	f04f 0c0a 	mov.w	ip, #10
 8005332:	9a07      	ldr	r2, [sp, #28]
 8005334:	4621      	mov	r1, r4
 8005336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800533a:	3b30      	subs	r3, #48	; 0x30
 800533c:	2b09      	cmp	r3, #9
 800533e:	d94e      	bls.n	80053de <_svfiprintf_r+0x17e>
 8005340:	b1b0      	cbz	r0, 8005370 <_svfiprintf_r+0x110>
 8005342:	9207      	str	r2, [sp, #28]
 8005344:	e014      	b.n	8005370 <_svfiprintf_r+0x110>
 8005346:	eba0 0308 	sub.w	r3, r0, r8
 800534a:	fa09 f303 	lsl.w	r3, r9, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	46a2      	mov	sl, r4
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	e7d2      	b.n	80052fc <_svfiprintf_r+0x9c>
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	1d19      	adds	r1, r3, #4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	9103      	str	r1, [sp, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	bfbb      	ittet	lt
 8005362:	425b      	neglt	r3, r3
 8005364:	f042 0202 	orrlt.w	r2, r2, #2
 8005368:	9307      	strge	r3, [sp, #28]
 800536a:	9307      	strlt	r3, [sp, #28]
 800536c:	bfb8      	it	lt
 800536e:	9204      	strlt	r2, [sp, #16]
 8005370:	7823      	ldrb	r3, [r4, #0]
 8005372:	2b2e      	cmp	r3, #46	; 0x2e
 8005374:	d10c      	bne.n	8005390 <_svfiprintf_r+0x130>
 8005376:	7863      	ldrb	r3, [r4, #1]
 8005378:	2b2a      	cmp	r3, #42	; 0x2a
 800537a:	d135      	bne.n	80053e8 <_svfiprintf_r+0x188>
 800537c:	9b03      	ldr	r3, [sp, #12]
 800537e:	3402      	adds	r4, #2
 8005380:	1d1a      	adds	r2, r3, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	9203      	str	r2, [sp, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	bfb8      	it	lt
 800538a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800545c <_svfiprintf_r+0x1fc>
 8005394:	2203      	movs	r2, #3
 8005396:	4650      	mov	r0, sl
 8005398:	7821      	ldrb	r1, [r4, #0]
 800539a:	f000 f9f7 	bl	800578c <memchr>
 800539e:	b140      	cbz	r0, 80053b2 <_svfiprintf_r+0x152>
 80053a0:	2340      	movs	r3, #64	; 0x40
 80053a2:	eba0 000a 	sub.w	r0, r0, sl
 80053a6:	fa03 f000 	lsl.w	r0, r3, r0
 80053aa:	9b04      	ldr	r3, [sp, #16]
 80053ac:	3401      	adds	r4, #1
 80053ae:	4303      	orrs	r3, r0
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b6:	2206      	movs	r2, #6
 80053b8:	4825      	ldr	r0, [pc, #148]	; (8005450 <_svfiprintf_r+0x1f0>)
 80053ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053be:	f000 f9e5 	bl	800578c <memchr>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d038      	beq.n	8005438 <_svfiprintf_r+0x1d8>
 80053c6:	4b23      	ldr	r3, [pc, #140]	; (8005454 <_svfiprintf_r+0x1f4>)
 80053c8:	bb1b      	cbnz	r3, 8005412 <_svfiprintf_r+0x1b2>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	3307      	adds	r3, #7
 80053ce:	f023 0307 	bic.w	r3, r3, #7
 80053d2:	3308      	adds	r3, #8
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	4433      	add	r3, r6
 80053da:	9309      	str	r3, [sp, #36]	; 0x24
 80053dc:	e767      	b.n	80052ae <_svfiprintf_r+0x4e>
 80053de:	460c      	mov	r4, r1
 80053e0:	2001      	movs	r0, #1
 80053e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e6:	e7a5      	b.n	8005334 <_svfiprintf_r+0xd4>
 80053e8:	2300      	movs	r3, #0
 80053ea:	f04f 0c0a 	mov.w	ip, #10
 80053ee:	4619      	mov	r1, r3
 80053f0:	3401      	adds	r4, #1
 80053f2:	9305      	str	r3, [sp, #20]
 80053f4:	4620      	mov	r0, r4
 80053f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053fa:	3a30      	subs	r2, #48	; 0x30
 80053fc:	2a09      	cmp	r2, #9
 80053fe:	d903      	bls.n	8005408 <_svfiprintf_r+0x1a8>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0c5      	beq.n	8005390 <_svfiprintf_r+0x130>
 8005404:	9105      	str	r1, [sp, #20]
 8005406:	e7c3      	b.n	8005390 <_svfiprintf_r+0x130>
 8005408:	4604      	mov	r4, r0
 800540a:	2301      	movs	r3, #1
 800540c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005410:	e7f0      	b.n	80053f4 <_svfiprintf_r+0x194>
 8005412:	ab03      	add	r3, sp, #12
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	462a      	mov	r2, r5
 8005418:	4638      	mov	r0, r7
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <_svfiprintf_r+0x1f8>)
 800541c:	a904      	add	r1, sp, #16
 800541e:	f3af 8000 	nop.w
 8005422:	1c42      	adds	r2, r0, #1
 8005424:	4606      	mov	r6, r0
 8005426:	d1d6      	bne.n	80053d6 <_svfiprintf_r+0x176>
 8005428:	89ab      	ldrh	r3, [r5, #12]
 800542a:	065b      	lsls	r3, r3, #25
 800542c:	f53f af2c 	bmi.w	8005288 <_svfiprintf_r+0x28>
 8005430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005432:	b01d      	add	sp, #116	; 0x74
 8005434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005438:	ab03      	add	r3, sp, #12
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	462a      	mov	r2, r5
 800543e:	4638      	mov	r0, r7
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <_svfiprintf_r+0x1f8>)
 8005442:	a904      	add	r1, sp, #16
 8005444:	f000 f87c 	bl	8005540 <_printf_i>
 8005448:	e7eb      	b.n	8005422 <_svfiprintf_r+0x1c2>
 800544a:	bf00      	nop
 800544c:	08005b00 	.word	0x08005b00
 8005450:	08005b0a 	.word	0x08005b0a
 8005454:	00000000 	.word	0x00000000
 8005458:	080051a9 	.word	0x080051a9
 800545c:	08005b06 	.word	0x08005b06

08005460 <_printf_common>:
 8005460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005464:	4616      	mov	r6, r2
 8005466:	4699      	mov	r9, r3
 8005468:	688a      	ldr	r2, [r1, #8]
 800546a:	690b      	ldr	r3, [r1, #16]
 800546c:	4607      	mov	r7, r0
 800546e:	4293      	cmp	r3, r2
 8005470:	bfb8      	it	lt
 8005472:	4613      	movlt	r3, r2
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800547a:	460c      	mov	r4, r1
 800547c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005480:	b10a      	cbz	r2, 8005486 <_printf_common+0x26>
 8005482:	3301      	adds	r3, #1
 8005484:	6033      	str	r3, [r6, #0]
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	0699      	lsls	r1, r3, #26
 800548a:	bf42      	ittt	mi
 800548c:	6833      	ldrmi	r3, [r6, #0]
 800548e:	3302      	addmi	r3, #2
 8005490:	6033      	strmi	r3, [r6, #0]
 8005492:	6825      	ldr	r5, [r4, #0]
 8005494:	f015 0506 	ands.w	r5, r5, #6
 8005498:	d106      	bne.n	80054a8 <_printf_common+0x48>
 800549a:	f104 0a19 	add.w	sl, r4, #25
 800549e:	68e3      	ldr	r3, [r4, #12]
 80054a0:	6832      	ldr	r2, [r6, #0]
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	42ab      	cmp	r3, r5
 80054a6:	dc28      	bgt.n	80054fa <_printf_common+0x9a>
 80054a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054ac:	1e13      	subs	r3, r2, #0
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	bf18      	it	ne
 80054b2:	2301      	movne	r3, #1
 80054b4:	0692      	lsls	r2, r2, #26
 80054b6:	d42d      	bmi.n	8005514 <_printf_common+0xb4>
 80054b8:	4649      	mov	r1, r9
 80054ba:	4638      	mov	r0, r7
 80054bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054c0:	47c0      	blx	r8
 80054c2:	3001      	adds	r0, #1
 80054c4:	d020      	beq.n	8005508 <_printf_common+0xa8>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	68e5      	ldr	r5, [r4, #12]
 80054ca:	f003 0306 	and.w	r3, r3, #6
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	bf18      	it	ne
 80054d2:	2500      	movne	r5, #0
 80054d4:	6832      	ldr	r2, [r6, #0]
 80054d6:	f04f 0600 	mov.w	r6, #0
 80054da:	68a3      	ldr	r3, [r4, #8]
 80054dc:	bf08      	it	eq
 80054de:	1aad      	subeq	r5, r5, r2
 80054e0:	6922      	ldr	r2, [r4, #16]
 80054e2:	bf08      	it	eq
 80054e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054e8:	4293      	cmp	r3, r2
 80054ea:	bfc4      	itt	gt
 80054ec:	1a9b      	subgt	r3, r3, r2
 80054ee:	18ed      	addgt	r5, r5, r3
 80054f0:	341a      	adds	r4, #26
 80054f2:	42b5      	cmp	r5, r6
 80054f4:	d11a      	bne.n	800552c <_printf_common+0xcc>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e008      	b.n	800550c <_printf_common+0xac>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4652      	mov	r2, sl
 80054fe:	4649      	mov	r1, r9
 8005500:	4638      	mov	r0, r7
 8005502:	47c0      	blx	r8
 8005504:	3001      	adds	r0, #1
 8005506:	d103      	bne.n	8005510 <_printf_common+0xb0>
 8005508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	3501      	adds	r5, #1
 8005512:	e7c4      	b.n	800549e <_printf_common+0x3e>
 8005514:	2030      	movs	r0, #48	; 0x30
 8005516:	18e1      	adds	r1, r4, r3
 8005518:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005522:	4422      	add	r2, r4
 8005524:	3302      	adds	r3, #2
 8005526:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800552a:	e7c5      	b.n	80054b8 <_printf_common+0x58>
 800552c:	2301      	movs	r3, #1
 800552e:	4622      	mov	r2, r4
 8005530:	4649      	mov	r1, r9
 8005532:	4638      	mov	r0, r7
 8005534:	47c0      	blx	r8
 8005536:	3001      	adds	r0, #1
 8005538:	d0e6      	beq.n	8005508 <_printf_common+0xa8>
 800553a:	3601      	adds	r6, #1
 800553c:	e7d9      	b.n	80054f2 <_printf_common+0x92>
	...

08005540 <_printf_i>:
 8005540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	460c      	mov	r4, r1
 8005546:	7e27      	ldrb	r7, [r4, #24]
 8005548:	4691      	mov	r9, r2
 800554a:	2f78      	cmp	r7, #120	; 0x78
 800554c:	4680      	mov	r8, r0
 800554e:	469a      	mov	sl, r3
 8005550:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005556:	d807      	bhi.n	8005568 <_printf_i+0x28>
 8005558:	2f62      	cmp	r7, #98	; 0x62
 800555a:	d80a      	bhi.n	8005572 <_printf_i+0x32>
 800555c:	2f00      	cmp	r7, #0
 800555e:	f000 80d9 	beq.w	8005714 <_printf_i+0x1d4>
 8005562:	2f58      	cmp	r7, #88	; 0x58
 8005564:	f000 80a4 	beq.w	80056b0 <_printf_i+0x170>
 8005568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800556c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005570:	e03a      	b.n	80055e8 <_printf_i+0xa8>
 8005572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005576:	2b15      	cmp	r3, #21
 8005578:	d8f6      	bhi.n	8005568 <_printf_i+0x28>
 800557a:	a001      	add	r0, pc, #4	; (adr r0, 8005580 <_printf_i+0x40>)
 800557c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005580:	080055d9 	.word	0x080055d9
 8005584:	080055ed 	.word	0x080055ed
 8005588:	08005569 	.word	0x08005569
 800558c:	08005569 	.word	0x08005569
 8005590:	08005569 	.word	0x08005569
 8005594:	08005569 	.word	0x08005569
 8005598:	080055ed 	.word	0x080055ed
 800559c:	08005569 	.word	0x08005569
 80055a0:	08005569 	.word	0x08005569
 80055a4:	08005569 	.word	0x08005569
 80055a8:	08005569 	.word	0x08005569
 80055ac:	080056fb 	.word	0x080056fb
 80055b0:	0800561d 	.word	0x0800561d
 80055b4:	080056dd 	.word	0x080056dd
 80055b8:	08005569 	.word	0x08005569
 80055bc:	08005569 	.word	0x08005569
 80055c0:	0800571d 	.word	0x0800571d
 80055c4:	08005569 	.word	0x08005569
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	08005569 	.word	0x08005569
 80055d0:	08005569 	.word	0x08005569
 80055d4:	080056e5 	.word	0x080056e5
 80055d8:	680b      	ldr	r3, [r1, #0]
 80055da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	600a      	str	r2, [r1, #0]
 80055e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0a4      	b.n	8005736 <_printf_i+0x1f6>
 80055ec:	6825      	ldr	r5, [r4, #0]
 80055ee:	6808      	ldr	r0, [r1, #0]
 80055f0:	062e      	lsls	r6, r5, #24
 80055f2:	f100 0304 	add.w	r3, r0, #4
 80055f6:	d50a      	bpl.n	800560e <_printf_i+0xce>
 80055f8:	6805      	ldr	r5, [r0, #0]
 80055fa:	600b      	str	r3, [r1, #0]
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	da03      	bge.n	8005608 <_printf_i+0xc8>
 8005600:	232d      	movs	r3, #45	; 0x2d
 8005602:	426d      	negs	r5, r5
 8005604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005608:	230a      	movs	r3, #10
 800560a:	485e      	ldr	r0, [pc, #376]	; (8005784 <_printf_i+0x244>)
 800560c:	e019      	b.n	8005642 <_printf_i+0x102>
 800560e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005612:	6805      	ldr	r5, [r0, #0]
 8005614:	600b      	str	r3, [r1, #0]
 8005616:	bf18      	it	ne
 8005618:	b22d      	sxthne	r5, r5
 800561a:	e7ef      	b.n	80055fc <_printf_i+0xbc>
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	6825      	ldr	r5, [r4, #0]
 8005620:	1d18      	adds	r0, r3, #4
 8005622:	6008      	str	r0, [r1, #0]
 8005624:	0628      	lsls	r0, r5, #24
 8005626:	d501      	bpl.n	800562c <_printf_i+0xec>
 8005628:	681d      	ldr	r5, [r3, #0]
 800562a:	e002      	b.n	8005632 <_printf_i+0xf2>
 800562c:	0669      	lsls	r1, r5, #25
 800562e:	d5fb      	bpl.n	8005628 <_printf_i+0xe8>
 8005630:	881d      	ldrh	r5, [r3, #0]
 8005632:	2f6f      	cmp	r7, #111	; 0x6f
 8005634:	bf0c      	ite	eq
 8005636:	2308      	moveq	r3, #8
 8005638:	230a      	movne	r3, #10
 800563a:	4852      	ldr	r0, [pc, #328]	; (8005784 <_printf_i+0x244>)
 800563c:	2100      	movs	r1, #0
 800563e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005642:	6866      	ldr	r6, [r4, #4]
 8005644:	2e00      	cmp	r6, #0
 8005646:	bfa8      	it	ge
 8005648:	6821      	ldrge	r1, [r4, #0]
 800564a:	60a6      	str	r6, [r4, #8]
 800564c:	bfa4      	itt	ge
 800564e:	f021 0104 	bicge.w	r1, r1, #4
 8005652:	6021      	strge	r1, [r4, #0]
 8005654:	b90d      	cbnz	r5, 800565a <_printf_i+0x11a>
 8005656:	2e00      	cmp	r6, #0
 8005658:	d04d      	beq.n	80056f6 <_printf_i+0x1b6>
 800565a:	4616      	mov	r6, r2
 800565c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005660:	fb03 5711 	mls	r7, r3, r1, r5
 8005664:	5dc7      	ldrb	r7, [r0, r7]
 8005666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800566a:	462f      	mov	r7, r5
 800566c:	42bb      	cmp	r3, r7
 800566e:	460d      	mov	r5, r1
 8005670:	d9f4      	bls.n	800565c <_printf_i+0x11c>
 8005672:	2b08      	cmp	r3, #8
 8005674:	d10b      	bne.n	800568e <_printf_i+0x14e>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	07df      	lsls	r7, r3, #31
 800567a:	d508      	bpl.n	800568e <_printf_i+0x14e>
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	6861      	ldr	r1, [r4, #4]
 8005680:	4299      	cmp	r1, r3
 8005682:	bfde      	ittt	le
 8005684:	2330      	movle	r3, #48	; 0x30
 8005686:	f806 3c01 	strble.w	r3, [r6, #-1]
 800568a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800568e:	1b92      	subs	r2, r2, r6
 8005690:	6122      	str	r2, [r4, #16]
 8005692:	464b      	mov	r3, r9
 8005694:	4621      	mov	r1, r4
 8005696:	4640      	mov	r0, r8
 8005698:	f8cd a000 	str.w	sl, [sp]
 800569c:	aa03      	add	r2, sp, #12
 800569e:	f7ff fedf 	bl	8005460 <_printf_common>
 80056a2:	3001      	adds	r0, #1
 80056a4:	d14c      	bne.n	8005740 <_printf_i+0x200>
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056aa:	b004      	add	sp, #16
 80056ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b0:	4834      	ldr	r0, [pc, #208]	; (8005784 <_printf_i+0x244>)
 80056b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056b6:	680e      	ldr	r6, [r1, #0]
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80056be:	061f      	lsls	r7, r3, #24
 80056c0:	600e      	str	r6, [r1, #0]
 80056c2:	d514      	bpl.n	80056ee <_printf_i+0x1ae>
 80056c4:	07d9      	lsls	r1, r3, #31
 80056c6:	bf44      	itt	mi
 80056c8:	f043 0320 	orrmi.w	r3, r3, #32
 80056cc:	6023      	strmi	r3, [r4, #0]
 80056ce:	b91d      	cbnz	r5, 80056d8 <_printf_i+0x198>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	f023 0320 	bic.w	r3, r3, #32
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	2310      	movs	r3, #16
 80056da:	e7af      	b.n	800563c <_printf_i+0xfc>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	f043 0320 	orr.w	r3, r3, #32
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	2378      	movs	r3, #120	; 0x78
 80056e6:	4828      	ldr	r0, [pc, #160]	; (8005788 <_printf_i+0x248>)
 80056e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ec:	e7e3      	b.n	80056b6 <_printf_i+0x176>
 80056ee:	065e      	lsls	r6, r3, #25
 80056f0:	bf48      	it	mi
 80056f2:	b2ad      	uxthmi	r5, r5
 80056f4:	e7e6      	b.n	80056c4 <_printf_i+0x184>
 80056f6:	4616      	mov	r6, r2
 80056f8:	e7bb      	b.n	8005672 <_printf_i+0x132>
 80056fa:	680b      	ldr	r3, [r1, #0]
 80056fc:	6826      	ldr	r6, [r4, #0]
 80056fe:	1d1d      	adds	r5, r3, #4
 8005700:	6960      	ldr	r0, [r4, #20]
 8005702:	600d      	str	r5, [r1, #0]
 8005704:	0635      	lsls	r5, r6, #24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	d501      	bpl.n	800570e <_printf_i+0x1ce>
 800570a:	6018      	str	r0, [r3, #0]
 800570c:	e002      	b.n	8005714 <_printf_i+0x1d4>
 800570e:	0671      	lsls	r1, r6, #25
 8005710:	d5fb      	bpl.n	800570a <_printf_i+0x1ca>
 8005712:	8018      	strh	r0, [r3, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	4616      	mov	r6, r2
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	e7ba      	b.n	8005692 <_printf_i+0x152>
 800571c:	680b      	ldr	r3, [r1, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	600a      	str	r2, [r1, #0]
 8005722:	681e      	ldr	r6, [r3, #0]
 8005724:	2100      	movs	r1, #0
 8005726:	4630      	mov	r0, r6
 8005728:	6862      	ldr	r2, [r4, #4]
 800572a:	f000 f82f 	bl	800578c <memchr>
 800572e:	b108      	cbz	r0, 8005734 <_printf_i+0x1f4>
 8005730:	1b80      	subs	r0, r0, r6
 8005732:	6060      	str	r0, [r4, #4]
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	2300      	movs	r3, #0
 800573a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800573e:	e7a8      	b.n	8005692 <_printf_i+0x152>
 8005740:	4632      	mov	r2, r6
 8005742:	4649      	mov	r1, r9
 8005744:	4640      	mov	r0, r8
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	47d0      	blx	sl
 800574a:	3001      	adds	r0, #1
 800574c:	d0ab      	beq.n	80056a6 <_printf_i+0x166>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	079b      	lsls	r3, r3, #30
 8005752:	d413      	bmi.n	800577c <_printf_i+0x23c>
 8005754:	68e0      	ldr	r0, [r4, #12]
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	4298      	cmp	r0, r3
 800575a:	bfb8      	it	lt
 800575c:	4618      	movlt	r0, r3
 800575e:	e7a4      	b.n	80056aa <_printf_i+0x16a>
 8005760:	2301      	movs	r3, #1
 8005762:	4632      	mov	r2, r6
 8005764:	4649      	mov	r1, r9
 8005766:	4640      	mov	r0, r8
 8005768:	47d0      	blx	sl
 800576a:	3001      	adds	r0, #1
 800576c:	d09b      	beq.n	80056a6 <_printf_i+0x166>
 800576e:	3501      	adds	r5, #1
 8005770:	68e3      	ldr	r3, [r4, #12]
 8005772:	9903      	ldr	r1, [sp, #12]
 8005774:	1a5b      	subs	r3, r3, r1
 8005776:	42ab      	cmp	r3, r5
 8005778:	dcf2      	bgt.n	8005760 <_printf_i+0x220>
 800577a:	e7eb      	b.n	8005754 <_printf_i+0x214>
 800577c:	2500      	movs	r5, #0
 800577e:	f104 0619 	add.w	r6, r4, #25
 8005782:	e7f5      	b.n	8005770 <_printf_i+0x230>
 8005784:	08005b11 	.word	0x08005b11
 8005788:	08005b22 	.word	0x08005b22

0800578c <memchr>:
 800578c:	4603      	mov	r3, r0
 800578e:	b510      	push	{r4, lr}
 8005790:	b2c9      	uxtb	r1, r1
 8005792:	4402      	add	r2, r0
 8005794:	4293      	cmp	r3, r2
 8005796:	4618      	mov	r0, r3
 8005798:	d101      	bne.n	800579e <memchr+0x12>
 800579a:	2000      	movs	r0, #0
 800579c:	e003      	b.n	80057a6 <memchr+0x1a>
 800579e:	7804      	ldrb	r4, [r0, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	428c      	cmp	r4, r1
 80057a4:	d1f6      	bne.n	8005794 <memchr+0x8>
 80057a6:	bd10      	pop	{r4, pc}

080057a8 <memmove>:
 80057a8:	4288      	cmp	r0, r1
 80057aa:	b510      	push	{r4, lr}
 80057ac:	eb01 0402 	add.w	r4, r1, r2
 80057b0:	d902      	bls.n	80057b8 <memmove+0x10>
 80057b2:	4284      	cmp	r4, r0
 80057b4:	4623      	mov	r3, r4
 80057b6:	d807      	bhi.n	80057c8 <memmove+0x20>
 80057b8:	1e43      	subs	r3, r0, #1
 80057ba:	42a1      	cmp	r1, r4
 80057bc:	d008      	beq.n	80057d0 <memmove+0x28>
 80057be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057c6:	e7f8      	b.n	80057ba <memmove+0x12>
 80057c8:	4601      	mov	r1, r0
 80057ca:	4402      	add	r2, r0
 80057cc:	428a      	cmp	r2, r1
 80057ce:	d100      	bne.n	80057d2 <memmove+0x2a>
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057da:	e7f7      	b.n	80057cc <memmove+0x24>

080057dc <_realloc_r>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	4607      	mov	r7, r0
 80057e0:	4614      	mov	r4, r2
 80057e2:	460e      	mov	r6, r1
 80057e4:	b921      	cbnz	r1, 80057f0 <_realloc_r+0x14>
 80057e6:	4611      	mov	r1, r2
 80057e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057ec:	f7ff bb68 	b.w	8004ec0 <_malloc_r>
 80057f0:	b922      	cbnz	r2, 80057fc <_realloc_r+0x20>
 80057f2:	f7ff fc8d 	bl	8005110 <_free_r>
 80057f6:	4625      	mov	r5, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057fc:	f000 f814 	bl	8005828 <_malloc_usable_size_r>
 8005800:	42a0      	cmp	r0, r4
 8005802:	d20f      	bcs.n	8005824 <_realloc_r+0x48>
 8005804:	4621      	mov	r1, r4
 8005806:	4638      	mov	r0, r7
 8005808:	f7ff fb5a 	bl	8004ec0 <_malloc_r>
 800580c:	4605      	mov	r5, r0
 800580e:	2800      	cmp	r0, #0
 8005810:	d0f2      	beq.n	80057f8 <_realloc_r+0x1c>
 8005812:	4631      	mov	r1, r6
 8005814:	4622      	mov	r2, r4
 8005816:	f7ff fb3d 	bl	8004e94 <memcpy>
 800581a:	4631      	mov	r1, r6
 800581c:	4638      	mov	r0, r7
 800581e:	f7ff fc77 	bl	8005110 <_free_r>
 8005822:	e7e9      	b.n	80057f8 <_realloc_r+0x1c>
 8005824:	4635      	mov	r5, r6
 8005826:	e7e7      	b.n	80057f8 <_realloc_r+0x1c>

08005828 <_malloc_usable_size_r>:
 8005828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582c:	1f18      	subs	r0, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfbc      	itt	lt
 8005832:	580b      	ldrlt	r3, [r1, r0]
 8005834:	18c0      	addlt	r0, r0, r3
 8005836:	4770      	bx	lr

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
