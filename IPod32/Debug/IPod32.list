
IPod32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004860  08004860  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004860  08004860  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a84  20000074  080048dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af8  080048dc  00021af8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132d5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6c  00000000  00000000  00033372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00036f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002853  00000000  00000000  00037ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011940  00000000  00000000  0003a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bc4  00000000  00000000  0004c07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcc3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e4  00000000  00000000  000dcc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004720 	.word	0x08004720

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004720 	.word	0x08004720

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb2c 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f836 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f87a 	bl	8000254 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000160:	f000 f932 	bl	80003c8 <USER_RCC_Init>
  USER_GPIO_Init();
 8000164:	f000 f946 	bl	80003f4 <USER_GPIO_Init>
  USER_USART1_Init();
 8000168:	f000 f896 	bl	8000298 <USER_USART1_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f001 fab2 	bl	80016d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  inputQueueHandle = osMessageQueueNew(20, sizeof(uint8_t), &inputQueue_attributes);
 8000170:	4a0d      	ldr	r2, [pc, #52]	; (80001a8 <main+0x58>)
 8000172:	2101      	movs	r1, #1
 8000174:	2014      	movs	r0, #20
 8000176:	f001 fbeb 	bl	8001950 <osMessageQueueNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a0b      	ldr	r2, [pc, #44]	; (80001ac <main+0x5c>)
 800017e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <main+0x60>)
 8000182:	2100      	movs	r1, #0
 8000184:	480b      	ldr	r0, [pc, #44]	; (80001b4 <main+0x64>)
 8000186:	f001 fb0b 	bl	80017a0 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <main+0x68>)
 800018e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  pollKeypadTaskHandle = osThreadNew(poll_keyboard_button_task, NULL, &pollKeypad_attributes);
 8000190:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <main+0x6c>)
 8000192:	2100      	movs	r1, #0
 8000194:	480a      	ldr	r0, [pc, #40]	; (80001c0 <main+0x70>)
 8000196:	f001 fb03 	bl	80017a0 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <main+0x74>)
 800019e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a0:	f001 faca 	bl	8001738 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <main+0x54>
 80001a6:	bf00      	nop
 80001a8:	080047d0 	.word	0x080047d0
 80001ac:	20000098 	.word	0x20000098
 80001b0:	08004788 	.word	0x08004788
 80001b4:	080004b1 	.word	0x080004b1
 80001b8:	20000090 	.word	0x20000090
 80001bc:	080047ac 	.word	0x080047ac
 80001c0:	0800058d 	.word	0x0800058d
 80001c4:	20000094 	.word	0x20000094

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f004 f9dc 	bl	8004594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fbdf 	bl	80009d4 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800021c:	f000 f978 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fe4c 	bl	8000ed8 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000246:	f000 f963 	bl	8000510 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	; 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x40>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x40>)
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x40>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0320 	and.w	r3, r3, #32
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x40>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x40>)
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x40>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0304 	and.w	r3, r3, #4
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <USER_USART1_Init>:

/* USER CODE BEGIN 4 */
void USER_USART1_Init(void) {
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <USER_USART1_Init+0x40>)
 800029e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80002a2:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <USER_USART1_Init+0x40>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <USER_USART1_Init+0x40>)
 80002aa:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 80002ae:	f023 0313 	bic.w	r3, r3, #19
 80002b2:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <USER_USART1_Init+0x40>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <USER_USART1_Init+0x40>)
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002be:	f043 030c 	orr.w	r3, r3, #12
 80002c2:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <USER_USART1_Init+0x40>)
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <USER_USART1_Init+0x40>)
 80002ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80002ce:	6113      	str	r3, [r2, #16]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40013800 	.word	0x40013800

080002dc <config_pin>:

	}
	return USART1->DR;
}

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	460b      	mov	r3, r1
 80002e6:	70fb      	strb	r3, [r7, #3]
 80002e8:	4613      	mov	r3, r2
 80002ea:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 80002ec:	78bb      	ldrb	r3, [r7, #2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d104      	bne.n	80002fc <config_pin+0x20>
		//Input
		modeBits = 0b00;
 80002f2:	2300      	movs	r3, #0
 80002f4:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 80002f6:	2301      	movs	r3, #1
 80002f8:	73bb      	strb	r3, [r7, #14]
 80002fa:	e014      	b.n	8000326 <config_pin+0x4a>
	} else if(mode == 1){
 80002fc:	78bb      	ldrb	r3, [r7, #2]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d104      	bne.n	800030c <config_pin+0x30>
		//Output
		modeBits = 0b01;
 8000302:	2301      	movs	r3, #1
 8000304:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 8000306:	2300      	movs	r3, #0
 8000308:	73bb      	strb	r3, [r7, #14]
 800030a:	e00c      	b.n	8000326 <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 800030c:	2300      	movs	r3, #0
 800030e:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 8000310:	2302      	movs	r3, #2
 8000312:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	78fa      	ldrb	r2, [r7, #3]
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 8000326:	7bbb      	ldrb	r3, [r7, #14]
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	b2db      	uxtb	r3, r3
 800032c:	f003 030c 	and.w	r3, r3, #12
 8000330:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 8000332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000336:	f003 0303 	and.w	r3, r3, #3
 800033a:	b25a      	sxtb	r2, r3
 800033c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000340:	4313      	orrs	r3, r2
 8000342:	b25b      	sxtb	r3, r3
 8000344:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b07      	cmp	r3, #7
 800034a:	d81a      	bhi.n	8000382 <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	78fa      	ldrb	r2, [r7, #3]
 8000352:	0092      	lsls	r2, r2, #2
 8000354:	210f      	movs	r1, #15
 8000356:	fa01 f202 	lsl.w	r2, r1, r2
 800035a:	43d2      	mvns	r2, r2
 800035c:	401a      	ands	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	78fa      	ldrb	r2, [r7, #3]
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	210f      	movs	r1, #15
 800036c:	4091      	lsls	r1, r2
 800036e:	7b78      	ldrb	r0, [r7, #13]
 8000370:	78fa      	ldrb	r2, [r7, #3]
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	fa00 f202 	lsl.w	r2, r0, r2
 8000378:	400a      	ands	r2, r1
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 8000380:	e01c      	b.n	80003bc <config_pin+0xe0>
		pin -= 8;
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	3b08      	subs	r3, #8
 8000386:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	78fa      	ldrb	r2, [r7, #3]
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	210f      	movs	r1, #15
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	43d2      	mvns	r2, r2
 8000398:	401a      	ands	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	78fa      	ldrb	r2, [r7, #3]
 80003a4:	0092      	lsls	r2, r2, #2
 80003a6:	210f      	movs	r1, #15
 80003a8:	4091      	lsls	r1, r2
 80003aa:	7b78      	ldrb	r0, [r7, #13]
 80003ac:	78fa      	ldrb	r2, [r7, #3]
 80003ae:	0092      	lsls	r2, r2, #2
 80003b0:	fa00 f202 	lsl.w	r2, r0, r2
 80003b4:	400a      	ands	r2, r1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	605a      	str	r2, [r3, #4]
}
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
	...

080003c8 <USER_RCC_Init>:

void USER_RCC_Init(void){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <USER_RCC_Init+0x28>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <USER_RCC_Init+0x28>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <USER_RCC_Init+0x28>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <USER_RCC_Init+0x28>)
 80003de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e2:	f043 0314 	orr.w	r3, r3, #20
 80003e6:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN;
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 80003f8:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <USER_GPIO_Init+0xb4>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4a2a      	ldr	r2, [pc, #168]	; (80004a8 <USER_GPIO_Init+0xb4>)
 80003fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000402:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 8000404:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <USER_GPIO_Init+0xb4>)
 800040a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800040e:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	4a24      	ldr	r2, [pc, #144]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000416:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800041a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <USER_GPIO_Init+0xb4>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000426:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <USER_GPIO_Init+0xb4>)
 800042a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800042e:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <USER_GPIO_Init+0xb8>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <USER_GPIO_Init+0xb8>)
 8000436:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800043a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <USER_GPIO_Init+0xb8>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4a1a      	ldr	r2, [pc, #104]	; (80004ac <USER_GPIO_Init+0xb8>)
 8000442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000446:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000448:	2202      	movs	r2, #2
 800044a:	2100      	movs	r1, #0
 800044c:	4816      	ldr	r0, [pc, #88]	; (80004a8 <USER_GPIO_Init+0xb4>)
 800044e:	f7ff ff45 	bl	80002dc <config_pin>
	config_pin(GPIOA, 1, 2);
 8000452:	2202      	movs	r2, #2
 8000454:	2101      	movs	r1, #1
 8000456:	4814      	ldr	r0, [pc, #80]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000458:	f7ff ff40 	bl	80002dc <config_pin>
	config_pin(GPIOA, 2, 2);
 800045c:	2202      	movs	r2, #2
 800045e:	2102      	movs	r1, #2
 8000460:	4811      	ldr	r0, [pc, #68]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000462:	f7ff ff3b 	bl	80002dc <config_pin>
	config_pin(GPIOA, 3, 2);
 8000466:	2202      	movs	r2, #2
 8000468:	2103      	movs	r1, #3
 800046a:	480f      	ldr	r0, [pc, #60]	; (80004a8 <USER_GPIO_Init+0xb4>)
 800046c:	f7ff ff36 	bl	80002dc <config_pin>
	config_pin(GPIOA, 4, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000476:	f7ff ff31 	bl	80002dc <config_pin>
	config_pin(GPIOA, 5, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	2105      	movs	r1, #5
 800047e:	480a      	ldr	r0, [pc, #40]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000480:	f7ff ff2c 	bl	80002dc <config_pin>
	config_pin(GPIOA, 6, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	2106      	movs	r1, #6
 8000488:	4807      	ldr	r0, [pc, #28]	; (80004a8 <USER_GPIO_Init+0xb4>)
 800048a:	f7ff ff27 	bl	80002dc <config_pin>
	config_pin(GPIOA, 7, 1);
 800048e:	2201      	movs	r2, #1
 8000490:	2107      	movs	r1, #7
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <USER_GPIO_Init+0xb4>)
 8000494:	f7ff ff22 	bl	80002dc <config_pin>
	config_pin(GPIOC, 13, 1);
 8000498:	2201      	movs	r2, #1
 800049a:	210d      	movs	r1, #13
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <USER_GPIO_Init+0xb8>)
 800049e:	f7ff ff1d 	bl	80002dc <config_pin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010800 	.word	0x40010800
 80004ac:	40011000 	.word	0x40011000

080004b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t message;
	osMessageQueueGet(inputQueueHandle, &message, NULL, 200);
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <StartDefaultTask+0x34>)
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	f107 010f 	add.w	r1, r7, #15
 80004c0:	23c8      	movs	r3, #200	; 0xc8
 80004c2:	2200      	movs	r2, #0
 80004c4:	f001 fb3e 	bl	8001b44 <osMessageQueueGet>

	GPIOC->BSRR = (message==1)?
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
			 GPIO_BSRR_BR13:
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d102      	bne.n	80004d4 <StartDefaultTask+0x24>
 80004ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004d2:	e001      	b.n	80004d8 <StartDefaultTask+0x28>
 80004d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIOC->BSRR = (message==1)?
 80004d8:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <StartDefaultTask+0x38>)
 80004da:	6113      	str	r3, [r2, #16]
			 GPIO_BSRR_BS13;
    osDelay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 fa09 	bl	80018f4 <osDelay>
  {
 80004e2:	e7e9      	b.n	80004b8 <StartDefaultTask+0x8>
 80004e4:	20000098 	.word	0x20000098
 80004e8:	40011000 	.word	0x40011000

080004ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d101      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fe:	f000 f96d 	bl	80007dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40000800 	.word	0x40000800

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <pollButton>:

#include "poll_keyboard_task.h"


extern osMessageQueueId_t inputQueueHandle;
uint8_t pollButton(uint8_t row, uint8_t col){
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	460a      	mov	r2, r1
 8000526:	71fb      	strb	r3, [r7, #7]
 8000528:	4613      	mov	r3, r2
 800052a:	71bb      	strb	r3, [r7, #6]
	//Set all row pins to 1, except polling row
	for(int i = 4; i < 8; i++){
 800052c:	2304      	movs	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e00c      	b.n	800054c <pollButton+0x30>
		GPIOA->ODR |= 1 << i;
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <pollButton+0x6c>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	2101      	movs	r1, #1
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <pollButton+0x6c>)
 8000542:	430b      	orrs	r3, r1
 8000544:	60d3      	str	r3, [r2, #12]
	for(int i = 4; i < 8; i++){
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b07      	cmp	r3, #7
 8000550:	ddef      	ble.n	8000532 <pollButton+0x16>
	}
	GPIOA->ODR &= ~(1 << row);
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <pollButton+0x6c>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	79fa      	ldrb	r2, [r7, #7]
 8000558:	2101      	movs	r1, #1
 800055a:	fa01 f202 	lsl.w	r2, r1, r2
 800055e:	43d2      	mvns	r2, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a09      	ldr	r2, [pc, #36]	; (8000588 <pollButton+0x6c>)
 8000564:	400b      	ands	r3, r1
 8000566:	60d3      	str	r3, [r2, #12]

	//Read col
	//return 0;
	return GPIOA->IDR & (1 << col);
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <pollButton+0x6c>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	2101      	movs	r1, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4013      	ands	r3, r2
 800057a:	b2db      	uxtb	r3, r3
}
 800057c:	4618      	mov	r0, r3
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800

0800058c <poll_keyboard_button_task>:


void poll_keyboard_button_task(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
	/* FAVOR DE IGNORAR, NI SE SI ESTA BIEN*/
	uint8_t isPressed;
	while(1){
		for(int i = 0; i < 4; i++){
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e025      	b.n	80005e4 <poll_keyboard_button_task+0x58>
			  for(int j = 0; j < 4; j++){
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	e01c      	b.n	80005d8 <poll_keyboard_button_task+0x4c>
				  int out = pollButton(j + 4, i);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3304      	adds	r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffb5 	bl	800051c <pollButton>
 80005b2:	4603      	mov	r3, r0
 80005b4:	607b      	str	r3, [r7, #4]
//				  int index = i * 4 + j;

				  isPressed = (out==0) ? 1 : 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf0c      	ite	eq
 80005bc:	2301      	moveq	r3, #1
 80005be:	2300      	movne	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	70fb      	strb	r3, [r7, #3]
				  osMessageQueuePut(inputQueueHandle, &isPressed, 0U, 100);
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <poll_keyboard_button_task+0x68>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	1cf9      	adds	r1, r7, #3
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2200      	movs	r2, #0
 80005ce:	f001 fa45 	bl	8001a5c <osMessageQueuePut>
			  for(int j = 0; j < 4; j++){
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	3301      	adds	r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	dddf      	ble.n	800059e <poll_keyboard_button_task+0x12>
		for(int i = 0; i < 4; i++){
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	ddd6      	ble.n	8000598 <poll_keyboard_button_task+0xc>
			  }
			}
		osDelay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f001 f982 	bl	80018f4 <osDelay>
		for(int i = 0; i < 4; i++){
 80005f0:	e7cf      	b.n	8000592 <poll_keyboard_button_task+0x6>
 80005f2:	bf00      	nop
 80005f4:	20000098 	.word	0x20000098

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_MspInit+0x68>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <HAL_MspInit+0x68>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_MspInit+0x68>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_MspInit+0x68>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <HAL_MspInit+0x68>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_MspInit+0x68>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	210f      	movs	r1, #15
 8000632:	f06f 0001 	mvn.w	r0, #1
 8000636:	f000 f9a2 	bl	800097e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_MspInit+0x6c>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_MspInit+0x6c>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	40010000 	.word	0x40010000

08000668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000678:	2200      	movs	r2, #0
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	201e      	movs	r0, #30
 800067e:	f000 f97e 	bl	800097e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000682:	201e      	movs	r0, #30
 8000684:	f000 f997 	bl	80009b6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_InitTick+0xa0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <HAL_InitTick+0xa0>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	61d3      	str	r3, [r2, #28]
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_InitTick+0xa0>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006a0:	f107 0210 	add.w	r2, r7, #16
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd7a 	bl	80011a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80006b0:	f000 fd64 	bl	800117c <HAL_RCC_GetPCLK1Freq>
 80006b4:	4603      	mov	r3, r0
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <HAL_InitTick+0xa4>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9b      	lsrs	r3, r3, #18
 80006c4:	3b01      	subs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_InitTick+0xa8>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_InitTick+0xac>)
 80006cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HAL_InitTick+0xa8>)
 80006d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_InitTick+0xa8>)
 80006d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006da:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_InitTick+0xa8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_InitTick+0xa8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <HAL_InitTick+0xa8>)
 80006ea:	f000 fda9 	bl	8001240 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d104      	bne.n	80006fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <HAL_InitTick+0xa8>)
 80006f6:	f000 fdfb 	bl	80012f0 <HAL_TIM_Base_Start_IT>
 80006fa:	4603      	mov	r3, r0
 80006fc:	e000      	b.n	8000700 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	431bde83 	.word	0x431bde83
 8000710:	2000009c 	.word	0x2000009c
 8000714:	40000800 	.word	0x40000800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <TIM4_IRQHandler+0x10>)
 800074a:	f000 fe23 	bl	8001394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000009c 	.word	0x2000009c

08000758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078a:	f7ff ffe5 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f003 fecd 	bl	800452c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fcdd 	bl	8000150 <main>
  bx lr
 8000796:	4770      	bx	lr
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007a0:	08004868 	.word	0x08004868
  ldr r2, =_sbss
 80007a4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007a8:	20001af8 	.word	0x20001af8

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f8d1 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	200f      	movs	r0, #15
 80007c8:	f7ff ff4e 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff ff14 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x1c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <HAL_IncTick+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_IncTick+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000008 	.word	0x20000008
 80007fc:	200000e4 	.word	0x200000e4

08000800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <HAL_GetTick+0x10>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	200000e4 	.word	0x200000e4

08000814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_GetPriorityGrouping+0x18>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 0307 	and.w	r3, r3, #7
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db0b      	blt.n	80008a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 021f 	and.w	r2, r3, #31
 8000890:	4906      	ldr	r1, [pc, #24]	; (80008ac <__NVIC_EnableIRQ+0x34>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	2001      	movs	r0, #1
 800089a:	fa00 f202 	lsl.w	r2, r0, r2
 800089e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff4f 	bl	8000814 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff64 	bl	800085c <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ffb2 	bl	8000904 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff81 	bl	80008b0 <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff57 	bl	8000878 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e272      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8087 	beq.w	8000b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009f4:	4b92      	ldr	r3, [pc, #584]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d00c      	beq.n	8000a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a00:	4b8f      	ldr	r3, [pc, #572]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 030c 	and.w	r3, r3, #12
 8000a08:	2b08      	cmp	r3, #8
 8000a0a:	d112      	bne.n	8000a32 <HAL_RCC_OscConfig+0x5e>
 8000a0c:	4b8c      	ldr	r3, [pc, #560]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a18:	d10b      	bne.n	8000a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a1a:	4b89      	ldr	r3, [pc, #548]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d06c      	beq.n	8000b00 <HAL_RCC_OscConfig+0x12c>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d168      	bne.n	8000b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e24c      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a3a:	d106      	bne.n	8000a4a <HAL_RCC_OscConfig+0x76>
 8000a3c:	4b80      	ldr	r3, [pc, #512]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a7f      	ldr	r2, [pc, #508]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	e02e      	b.n	8000aa8 <HAL_RCC_OscConfig+0xd4>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10c      	bne.n	8000a6c <HAL_RCC_OscConfig+0x98>
 8000a52:	4b7b      	ldr	r3, [pc, #492]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a7a      	ldr	r2, [pc, #488]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	4b78      	ldr	r3, [pc, #480]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a77      	ldr	r2, [pc, #476]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e01d      	b.n	8000aa8 <HAL_RCC_OscConfig+0xd4>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a74:	d10c      	bne.n	8000a90 <HAL_RCC_OscConfig+0xbc>
 8000a76:	4b72      	ldr	r3, [pc, #456]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a71      	ldr	r2, [pc, #452]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	4b6f      	ldr	r3, [pc, #444]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a6e      	ldr	r2, [pc, #440]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	e00b      	b.n	8000aa8 <HAL_RCC_OscConfig+0xd4>
 8000a90:	4b6b      	ldr	r3, [pc, #428]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a6a      	ldr	r2, [pc, #424]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a67      	ldr	r2, [pc, #412]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ab0:	f7ff fea6 	bl	8000800 <HAL_GetTick>
 8000ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab6:	e008      	b.n	8000aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ab8:	f7ff fea2 	bl	8000800 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b64      	cmp	r3, #100	; 0x64
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e200      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aca:	4b5d      	ldr	r3, [pc, #372]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f0      	beq.n	8000ab8 <HAL_RCC_OscConfig+0xe4>
 8000ad6:	e014      	b.n	8000b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fe92 	bl	8000800 <HAL_GetTick>
 8000adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ae0:	f7ff fe8e 	bl	8000800 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e1ec      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af2:	4b53      	ldr	r3, [pc, #332]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f0      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x10c>
 8000afe:	e000      	b.n	8000b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d063      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b0e:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00b      	beq.n	8000b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b1a:	4b49      	ldr	r3, [pc, #292]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d11c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x18c>
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d116      	bne.n	8000b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b32:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <HAL_RCC_OscConfig+0x176>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d001      	beq.n	8000b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e1c0      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b4a:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	4939      	ldr	r1, [pc, #228]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b5e:	e03a      	b.n	8000bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d020      	beq.n	8000baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <HAL_RCC_OscConfig+0x270>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fe47 	bl	8000800 <HAL_GetTick>
 8000b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b74:	e008      	b.n	8000b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b76:	f7ff fe43 	bl	8000800 <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d901      	bls.n	8000b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b84:	2303      	movs	r3, #3
 8000b86:	e1a1      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f0      	beq.n	8000b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4927      	ldr	r1, [pc, #156]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
 8000ba8:	e015      	b.n	8000bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_RCC_OscConfig+0x270>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fe26 	bl	8000800 <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fe22 	bl	8000800 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e180      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d03a      	beq.n	8000c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d019      	beq.n	8000c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_RCC_OscConfig+0x274>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf0:	f7ff fe06 	bl	8000800 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fe02 	bl	8000800 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e160      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f0      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 faf4 	bl	8001204 <RCC_Delay>
 8000c1c:	e01c      	b.n	8000c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_RCC_OscConfig+0x274>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c24:	f7ff fdec 	bl	8000800 <HAL_GetTick>
 8000c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c2a:	e00f      	b.n	8000c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fde8 	bl	8000800 <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d908      	bls.n	8000c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e146      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	42420000 	.word	0x42420000
 8000c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c4c:	4b92      	ldr	r3, [pc, #584]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1e9      	bne.n	8000c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 80a6 	beq.w	8000db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c6a:	4b8b      	ldr	r3, [pc, #556]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10d      	bne.n	8000c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b88      	ldr	r3, [pc, #544]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a87      	ldr	r2, [pc, #540]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b85      	ldr	r3, [pc, #532]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c92:	4b82      	ldr	r3, [pc, #520]	; (8000e9c <HAL_RCC_OscConfig+0x4c8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d118      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c9e:	4b7f      	ldr	r3, [pc, #508]	; (8000e9c <HAL_RCC_OscConfig+0x4c8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a7e      	ldr	r2, [pc, #504]	; (8000e9c <HAL_RCC_OscConfig+0x4c8>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000caa:	f7ff fda9 	bl	8000800 <HAL_GetTick>
 8000cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb0:	e008      	b.n	8000cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb2:	f7ff fda5 	bl	8000800 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b64      	cmp	r3, #100	; 0x64
 8000cbe:	d901      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e103      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc4:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <HAL_RCC_OscConfig+0x4c8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0f0      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d106      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x312>
 8000cd8:	4b6f      	ldr	r3, [pc, #444]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	4a6e      	ldr	r2, [pc, #440]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6213      	str	r3, [r2, #32]
 8000ce4:	e02d      	b.n	8000d42 <HAL_RCC_OscConfig+0x36e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x334>
 8000cee:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4a69      	ldr	r2, [pc, #420]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	6213      	str	r3, [r2, #32]
 8000cfa:	4b67      	ldr	r3, [pc, #412]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	4a66      	ldr	r2, [pc, #408]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d00:	f023 0304 	bic.w	r3, r3, #4
 8000d04:	6213      	str	r3, [r2, #32]
 8000d06:	e01c      	b.n	8000d42 <HAL_RCC_OscConfig+0x36e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	d10c      	bne.n	8000d2a <HAL_RCC_OscConfig+0x356>
 8000d10:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a60      	ldr	r2, [pc, #384]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6213      	str	r3, [r2, #32]
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	4a5d      	ldr	r2, [pc, #372]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6213      	str	r3, [r2, #32]
 8000d28:	e00b      	b.n	8000d42 <HAL_RCC_OscConfig+0x36e>
 8000d2a:	4b5b      	ldr	r3, [pc, #364]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	4a5a      	ldr	r2, [pc, #360]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	6213      	str	r3, [r2, #32]
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	4a57      	ldr	r2, [pc, #348]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d3c:	f023 0304 	bic.w	r3, r3, #4
 8000d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d015      	beq.n	8000d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fd59 	bl	8000800 <HAL_GetTick>
 8000d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d50:	e00a      	b.n	8000d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d52:	f7ff fd55 	bl	8000800 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e0b1      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0ee      	beq.n	8000d52 <HAL_RCC_OscConfig+0x37e>
 8000d74:	e014      	b.n	8000da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d76:	f7ff fd43 	bl	8000800 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d7c:	e00a      	b.n	8000d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fd3f 	bl	8000800 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e09b      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d94:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1ee      	bne.n	8000d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d105      	bne.n	8000db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000da6:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a3b      	ldr	r2, [pc, #236]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8087 	beq.w	8000eca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dbc:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d061      	beq.n	8000e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d146      	bne.n	8000e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_RCC_OscConfig+0x4cc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fd13 	bl	8000800 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dde:	f7ff fd0f 	bl	8000800 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e06d      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df0:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f0      	bne.n	8000dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	d108      	bne.n	8000e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	4921      	ldr	r1, [pc, #132]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a19      	ldr	r1, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	491b      	ldr	r1, [pc, #108]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_RCC_OscConfig+0x4cc>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fce3 	bl	8000800 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e3e:	f7ff fcdf 	bl	8000800 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e03d      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x46a>
 8000e5c:	e035      	b.n	8000eca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_RCC_OscConfig+0x4cc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fccc 	bl	8000800 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6c:	f7ff fcc8 	bl	8000800 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e026      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f0      	bne.n	8000e6c <HAL_RCC_OscConfig+0x498>
 8000e8a:	e01e      	b.n	8000eca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d107      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e019      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_RCC_OscConfig+0x500>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e0d0      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d910      	bls.n	8000f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efa:	4b67      	ldr	r3, [pc, #412]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f023 0207 	bic.w	r2, r3, #7
 8000f02:	4965      	ldr	r1, [pc, #404]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d001      	beq.n	8000f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0b8      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d020      	beq.n	8000f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f34:	4b59      	ldr	r3, [pc, #356]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a58      	ldr	r2, [pc, #352]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f4c:	4b53      	ldr	r3, [pc, #332]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	494d      	ldr	r1, [pc, #308]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d040      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d107      	bne.n	8000f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d115      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e07f      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d107      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f96:	4b41      	ldr	r3, [pc, #260]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d109      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e073      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e06b      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f023 0203 	bic.w	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4936      	ldr	r1, [pc, #216]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fc8:	f7ff fc1a 	bl	8000800 <HAL_GetTick>
 8000fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fce:	e00a      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd0:	f7ff fc16 	bl	8000800 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e053      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 020c 	and.w	r2, r3, #12
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d1eb      	bne.n	8000fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d210      	bcs.n	8001028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 0207 	bic.w	r2, r3, #7
 800100e:	4922      	ldr	r1, [pc, #136]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d001      	beq.n	8001028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e032      	b.n	800108e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4916      	ldr	r1, [pc, #88]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	4313      	orrs	r3, r2
 8001044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d009      	beq.n	8001066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	490e      	ldr	r1, [pc, #56]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	4313      	orrs	r3, r2
 8001064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001066:	f000 f821 	bl	80010ac <HAL_RCC_GetSysClockFreq>
 800106a:	4602      	mov	r2, r0
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	490a      	ldr	r1, [pc, #40]	; (80010a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001078:	5ccb      	ldrb	r3, [r1, r3]
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff faee 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000
 800109c:	40021000 	.word	0x40021000
 80010a0:	080047e8 	.word	0x080047e8
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010ac:	b490      	push	{r4, r7}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_RCC_GetSysClockFreq+0xac>)
 80010b4:	1d3c      	adds	r4, r7, #4
 80010b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010bc:	f240 2301 	movw	r3, #513	; 0x201
 80010c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_GetSysClockFreq+0xb0>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d002      	beq.n	80010ec <HAL_RCC_GetSysClockFreq+0x40>
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_GetSysClockFreq+0x46>
 80010ea:	e02b      	b.n	8001144 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010ee:	623b      	str	r3, [r7, #32]
      break;
 80010f0:	e02b      	b.n	800114a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3328      	adds	r3, #40	; 0x28
 80010fc:	443b      	add	r3, r7
 80010fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001102:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d012      	beq.n	8001134 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	0c5b      	lsrs	r3, r3, #17
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	3328      	adds	r3, #40	; 0x28
 800111a:	443b      	add	r3, r7
 800111c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001120:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001126:	fb03 f202 	mul.w	r2, r3, r2
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	e004      	b.n	800113e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	623b      	str	r3, [r7, #32]
      break;
 8001142:	e002      	b.n	800114a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001146:	623b      	str	r3, [r7, #32]
      break;
 8001148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800114a:	6a3b      	ldr	r3, [r7, #32]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bc90      	pop	{r4, r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	08004760 	.word	0x08004760
 800115c:	40021000 	.word	0x40021000
 8001160:	007a1200 	.word	0x007a1200
 8001164:	003d0900 	.word	0x003d0900

08001168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_RCC_GetHCLKFreq+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000000 	.word	0x20000000

0800117c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001180:	f7ff fff2 	bl	8001168 <HAL_RCC_GetHCLKFreq>
 8001184:	4602      	mov	r2, r0
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	4903      	ldr	r1, [pc, #12]	; (80011a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001198:	4618      	mov	r0, r3
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	080047f8 	.word	0x080047f8

080011a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	220f      	movs	r2, #15
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_RCC_GetClockConfig+0x58>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0203 	and.w	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_RCC_GetClockConfig+0x58>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_RCC_GetClockConfig+0x58>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_RCC_GetClockConfig+0x58>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_RCC_GetClockConfig+0x5c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0207 	and.w	r2, r3, #7
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40022000 	.word	0x40022000

08001204 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <RCC_Delay+0x34>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <RCC_Delay+0x38>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0a5b      	lsrs	r3, r3, #9
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001220:	bf00      	nop
  }
  while (Delay --);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	60fa      	str	r2, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <RCC_Delay+0x1c>
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000000 	.word	0x20000000
 800123c:	10624dd3 	.word	0x10624dd3

08001240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e041      	b.n	80012d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f839 	bl	80012de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2202      	movs	r2, #2
 8001270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f000 f9b4 	bl	80015ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d001      	beq.n	8001308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e03a      	b.n	800137e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_TIM_Base_Start_IT+0x98>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00e      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x58>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001332:	d009      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x58>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_TIM_Base_Start_IT+0x9c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d004      	beq.n	8001348 <HAL_TIM_Base_Start_IT+0x58>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_TIM_Base_Start_IT+0xa0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d111      	bne.n	800136c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d010      	beq.n	800137c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800136a:	e007      	b.n	800137c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40012c00 	.word	0x40012c00
 800138c:	40000400 	.word	0x40000400
 8001390:	40000800 	.word	0x40000800

08001394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d122      	bne.n	80013f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d11b      	bne.n	80013f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f06f 0202 	mvn.w	r2, #2
 80013c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f8ed 	bl	80015b6 <HAL_TIM_IC_CaptureCallback>
 80013dc:	e005      	b.n	80013ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f8e0 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f8ef 	bl	80015c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d122      	bne.n	8001444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b04      	cmp	r3, #4
 800140a:	d11b      	bne.n	8001444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f06f 0204 	mvn.w	r2, #4
 8001414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2202      	movs	r2, #2
 800141a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f8c3 	bl	80015b6 <HAL_TIM_IC_CaptureCallback>
 8001430:	e005      	b.n	800143e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f8b6 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f8c5 	bl	80015c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b08      	cmp	r3, #8
 8001450:	d122      	bne.n	8001498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b08      	cmp	r3, #8
 800145e:	d11b      	bne.n	8001498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f06f 0208 	mvn.w	r2, #8
 8001468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f899 	bl	80015b6 <HAL_TIM_IC_CaptureCallback>
 8001484:	e005      	b.n	8001492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f88c 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f89b 	bl	80015c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d122      	bne.n	80014ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d11b      	bne.n	80014ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f06f 0210 	mvn.w	r2, #16
 80014bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2208      	movs	r2, #8
 80014c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f86f 	bl	80015b6 <HAL_TIM_IC_CaptureCallback>
 80014d8:	e005      	b.n	80014e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f862 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f871 	bl	80015c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10e      	bne.n	8001518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f06f 0201 	mvn.w	r2, #1
 8001510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe ffea 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	2b80      	cmp	r3, #128	; 0x80
 8001524:	d10e      	bne.n	8001544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001530:	2b80      	cmp	r3, #128	; 0x80
 8001532:	d107      	bne.n	8001544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800153c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8bf 	bl	80016c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b40      	cmp	r3, #64	; 0x40
 8001550:	d10e      	bne.n	8001570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155c:	2b40      	cmp	r3, #64	; 0x40
 800155e:	d107      	bne.n	8001570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f835 	bl	80015da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b20      	cmp	r3, #32
 800157c:	d10e      	bne.n	800159c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b20      	cmp	r3, #32
 800158a:	d107      	bne.n	800159c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0220 	mvn.w	r2, #32
 8001594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f88a 	bl	80016b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <TIM_Base_SetConfig+0xb8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00b      	beq.n	800161c <TIM_Base_SetConfig+0x30>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160a:	d007      	beq.n	800161c <TIM_Base_SetConfig+0x30>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <TIM_Base_SetConfig+0xbc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d003      	beq.n	800161c <TIM_Base_SetConfig+0x30>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a25      	ldr	r2, [pc, #148]	; (80016ac <TIM_Base_SetConfig+0xc0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d108      	bne.n	800162e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <TIM_Base_SetConfig+0xb8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00b      	beq.n	800164e <TIM_Base_SetConfig+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d007      	beq.n	800164e <TIM_Base_SetConfig+0x62>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <TIM_Base_SetConfig+0xbc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d003      	beq.n	800164e <TIM_Base_SetConfig+0x62>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <TIM_Base_SetConfig+0xc0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d108      	bne.n	8001660 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <TIM_Base_SetConfig+0xb8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d103      	bne.n	8001694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	615a      	str	r2, [r3, #20]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40000800 	.word	0x40000800

080016b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016da:	f3ef 8305 	mrs	r3, IPSR
 80016de:	60bb      	str	r3, [r7, #8]
  return(result);
 80016e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e6:	f3ef 8310 	mrs	r3, PRIMASK
 80016ea:	607b      	str	r3, [r7, #4]
  return(result);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <osKernelInitialize+0x32>
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <osKernelInitialize+0x60>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d109      	bne.n	800170e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016fa:	f3ef 8311 	mrs	r3, BASEPRI
 80016fe:	603b      	str	r3, [r7, #0]
  return(result);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001706:	f06f 0305 	mvn.w	r3, #5
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e00c      	b.n	8001728 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <osKernelInitialize+0x60>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <osKernelInitialize+0x60>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e002      	b.n	8001728 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001728:	68fb      	ldr	r3, [r7, #12]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	200000e8 	.word	0x200000e8

08001738 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800173e:	f3ef 8305 	mrs	r3, IPSR
 8001742:	60bb      	str	r3, [r7, #8]
  return(result);
 8001744:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10f      	bne.n	800176a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800174a:	f3ef 8310 	mrs	r3, PRIMASK
 800174e:	607b      	str	r3, [r7, #4]
  return(result);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <osKernelStart+0x32>
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <osKernelStart+0x64>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d109      	bne.n	8001772 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800175e:	f3ef 8311 	mrs	r3, BASEPRI
 8001762:	603b      	str	r3, [r7, #0]
  return(result);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <osKernelStart+0x3a>
    stat = osErrorISR;
 800176a:	f06f 0305 	mvn.w	r3, #5
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e00e      	b.n	8001790 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <osKernelStart+0x64>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <osKernelStart+0x64>)
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001780:	f001 faba 	bl	8002cf8 <vTaskStartScheduler>
      stat = osOK;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e002      	b.n	8001790 <osKernelStart+0x58>
    } else {
      stat = osError;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000e8 	.word	0x200000e8

080017a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b092      	sub	sp, #72	; 0x48
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017b0:	f3ef 8305 	mrs	r3, IPSR
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 8094 	bne.w	80018e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017be:	f3ef 8310 	mrs	r3, PRIMASK
 80017c2:	623b      	str	r3, [r7, #32]
  return(result);
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 808d 	bne.w	80018e6 <osThreadNew+0x146>
 80017cc:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <osThreadNew+0x150>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d106      	bne.n	80017e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017d4:	f3ef 8311 	mrs	r3, BASEPRI
 80017d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 8082 	bne.w	80018e6 <osThreadNew+0x146>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d07e      	beq.n	80018e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80017ec:	2318      	movs	r3, #24
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80017f0:	2300      	movs	r3, #0
 80017f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80017f4:	f107 031b 	add.w	r3, r7, #27
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d045      	beq.n	8001892 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <osThreadNew+0x74>
        name = attr->name;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <osThreadNew+0x9a>
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	2b38      	cmp	r3, #56	; 0x38
 800182c:	d805      	bhi.n	800183a <osThreadNew+0x9a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <osThreadNew+0x9e>
        return (NULL);
 800183a:	2300      	movs	r3, #0
 800183c:	e054      	b.n	80018e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00e      	beq.n	8001874 <osThreadNew+0xd4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2bbb      	cmp	r3, #187	; 0xbb
 800185c:	d90a      	bls.n	8001874 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <osThreadNew+0xd4>
        mem = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
 8001872:	e010      	b.n	8001896 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <osThreadNew+0xf6>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d108      	bne.n	8001896 <osThreadNew+0xf6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d104      	bne.n	8001896 <osThreadNew+0xf6>
          mem = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	e001      	b.n	8001896 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	2b01      	cmp	r3, #1
 800189a:	d110      	bne.n	80018be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018a4:	9202      	str	r2, [sp, #8]
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f001 f83c 	bl	8002930 <xTaskCreateStatic>
 80018b8:	4603      	mov	r3, r0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e013      	b.n	80018e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d110      	bne.n	80018e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f001 f886 	bl	80029e8 <xTaskCreate>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <osThreadNew+0x146>
          hTask = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018e6:	697b      	ldr	r3, [r7, #20]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3738      	adds	r7, #56	; 0x38
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200000e8 	.word	0x200000e8

080018f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018fc:	f3ef 8305 	mrs	r3, IPSR
 8001900:	613b      	str	r3, [r7, #16]
  return(result);
 8001902:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10f      	bne.n	8001928 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001908:	f3ef 8310 	mrs	r3, PRIMASK
 800190c:	60fb      	str	r3, [r7, #12]
  return(result);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <osDelay+0x34>
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <osDelay+0x58>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d109      	bne.n	8001930 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800191c:	f3ef 8311 	mrs	r3, BASEPRI
 8001920:	60bb      	str	r3, [r7, #8]
  return(result);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <osDelay+0x3c>
    stat = osErrorISR;
 8001928:	f06f 0305 	mvn.w	r3, #5
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e007      	b.n	8001940 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <osDelay+0x4c>
      vTaskDelay(ticks);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f001 f9a8 	bl	8002c90 <vTaskDelay>
    }
  }

  return (stat);
 8001940:	697b      	ldr	r3, [r7, #20]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200000e8 	.word	0x200000e8

08001950 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001960:	f3ef 8305 	mrs	r3, IPSR
 8001964:	61bb      	str	r3, [r7, #24]
  return(result);
 8001966:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001968:	2b00      	cmp	r3, #0
 800196a:	d16f      	bne.n	8001a4c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800196c:	f3ef 8310 	mrs	r3, PRIMASK
 8001970:	617b      	str	r3, [r7, #20]
  return(result);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d169      	bne.n	8001a4c <osMessageQueueNew+0xfc>
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <osMessageQueueNew+0x108>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d105      	bne.n	800198c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001980:	f3ef 8311 	mrs	r3, BASEPRI
 8001984:	613b      	str	r3, [r7, #16]
  return(result);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d15f      	bne.n	8001a4c <osMessageQueueNew+0xfc>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d05c      	beq.n	8001a4c <osMessageQueueNew+0xfc>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d059      	beq.n	8001a4c <osMessageQueueNew+0xfc>
    mem = -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d029      	beq.n	80019f8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d012      	beq.n	80019d2 <osMessageQueueNew+0x82>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b4f      	cmp	r3, #79	; 0x4f
 80019b2:	d90e      	bls.n	80019d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00a      	beq.n	80019d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d302      	bcc.n	80019d2 <osMessageQueueNew+0x82>
        mem = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	e014      	b.n	80019fc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d110      	bne.n	80019fc <osMessageQueueNew+0xac>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <osMessageQueueNew+0xac>
          mem = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	e001      	b.n	80019fc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10b      	bne.n	8001a1a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	9100      	str	r1, [sp, #0]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fa53 	bl	8001ebc <xQueueGenericCreateStatic>
 8001a16:	6278      	str	r0, [r7, #36]	; 0x24
 8001a18:	e008      	b.n	8001a2c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001a20:	2200      	movs	r2, #0
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fac0 	bl	8001faa <xQueueGenericCreate>
 8001a2a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e001      	b.n	8001a44 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001a44:	69f9      	ldr	r1, [r7, #28]
 8001a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a48:	f000 ff16 	bl	8002878 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000e8 	.word	0x200000e8

08001a5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a74:	f3ef 8305 	mrs	r3, IPSR
 8001a78:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a7a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10f      	bne.n	8001aa0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a80:	f3ef 8310 	mrs	r3, PRIMASK
 8001a84:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <osMessageQueuePut+0x44>
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <osMessageQueuePut+0xe0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d12e      	bne.n	8001af2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a94:	f3ef 8311 	mrs	r3, BASEPRI
 8001a98:	617b      	str	r3, [r7, #20]
  return(result);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d028      	beq.n	8001af2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <osMessageQueuePut+0x56>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <osMessageQueuePut+0x56>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8001ab2:	f06f 0303 	mvn.w	r3, #3
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ab8:	e039      	b.n	8001b2e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001abe:	f107 0210 	add.w	r2, r7, #16
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6a38      	ldr	r0, [r7, #32]
 8001ac8:	f000 fbce 	bl	8002268 <xQueueGenericSendFromISR>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d003      	beq.n	8001ada <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8001ad2:	f06f 0302 	mvn.w	r3, #2
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ad8:	e029      	b.n	8001b2e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d026      	beq.n	8001b2e <osMessageQueuePut+0xd2>
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <osMessageQueuePut+0xe4>)
 8001ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001af0:	e01d      	b.n	8001b2e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <osMessageQueuePut+0xa2>
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8001afe:	f06f 0303 	mvn.w	r3, #3
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
 8001b04:	e014      	b.n	8001b30 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	6a38      	ldr	r0, [r7, #32]
 8001b0e:	f000 faad 	bl	800206c <xQueueGenericSend>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d00b      	beq.n	8001b30 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8001b1e:	f06f 0301 	mvn.w	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	e004      	b.n	8001b30 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8001b26:	f06f 0302 	mvn.w	r3, #2
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e000      	b.n	8001b30 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b2e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200000e8 	.word	0x200000e8
 8001b40:	e000ed04 	.word	0xe000ed04

08001b44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b5a:	f3ef 8305 	mrs	r3, IPSR
 8001b5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b60:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b66:	f3ef 8310 	mrs	r3, PRIMASK
 8001b6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <osMessageQueueGet+0x42>
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <osMessageQueueGet+0xdc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d12e      	bne.n	8001bd8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b7e:	617b      	str	r3, [r7, #20]
  return(result);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d028      	beq.n	8001bd8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <osMessageQueueGet+0x54>
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <osMessageQueueGet+0x54>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8001b98:	f06f 0303 	mvn.w	r3, #3
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b9e:	e038      	b.n	8001c12 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	6a38      	ldr	r0, [r7, #32]
 8001bae:	f000 fcd3 	bl	8002558 <xQueueReceiveFromISR>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d003      	beq.n	8001bc0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8001bb8:	f06f 0302 	mvn.w	r3, #2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001bbe:	e028      	b.n	8001c12 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d025      	beq.n	8001c12 <osMessageQueueGet+0xce>
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <osMessageQueueGet+0xe0>)
 8001bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001bd6:	e01c      	b.n	8001c12 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <osMessageQueueGet+0xa0>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8001be4:	f06f 0303 	mvn.w	r3, #3
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	e013      	b.n	8001c14 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6a38      	ldr	r0, [r7, #32]
 8001bf2:	f000 fbd1 	bl	8002398 <xQueueReceive>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d00b      	beq.n	8001c14 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8001c02:	f06f 0301 	mvn.w	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	e004      	b.n	8001c14 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8001c0a:	f06f 0302 	mvn.w	r3, #2
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	e000      	b.n	8001c14 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001c12:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000e8 	.word	0x200000e8
 8001c24:	e000ed04 	.word	0xe000ed04

08001c28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <vApplicationGetIdleTaskMemory+0x28>)
 8001c38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	200000ec 	.word	0x200000ec
 8001c54:	200001a8 	.word	0x200001a8

08001c58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <vApplicationGetTimerTaskMemory+0x2c>)
 8001c68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <vApplicationGetTimerTaskMemory+0x30>)
 8001c6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c76:	601a      	str	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200003a8 	.word	0x200003a8
 8001c88:	20000464 	.word	0x20000464

08001c8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f103 0208 	add.w	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0208 	add.w	r2, r3, #8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f103 0208 	add.w	r2, r3, #8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b085      	sub	sp, #20
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3e:	d103      	bne.n	8001d48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e00c      	b.n	8001d62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e002      	b.n	8001d56 <vListInsert+0x2e>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d2f6      	bcs.n	8001d50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6892      	ldr	r2, [r2, #8]
 8001dae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6852      	ldr	r2, [r2, #4]
 8001db8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d103      	bne.n	8001dcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
	...

08001dec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e12:	bf00      	nop
 8001e14:	e7fe      	b.n	8001e14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001e16:	f002 f8b1 	bl	8003f7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	441a      	add	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	3b01      	subs	r3, #1
 8001e48:	68f9      	ldr	r1, [r7, #12]
 8001e4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	441a      	add	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	22ff      	movs	r2, #255	; 0xff
 8001e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d114      	bne.n	8001e96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01a      	beq.n	8001eaa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3310      	adds	r3, #16
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 f9d9 	bl	8003230 <xTaskRemoveFromEventList>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <xQueueGenericReset+0xcc>)
 8001e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	f3bf 8f6f 	isb	sy
 8001e94:	e009      	b.n	8001eaa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3310      	adds	r3, #16
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fef6 	bl	8001c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3324      	adds	r3, #36	; 0x24
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fef1 	bl	8001c8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001eaa:	f002 f897 	bl	8003fdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ee2:	bf00      	nop
 8001ee4:	e7fe      	b.n	8001ee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001efe:	bf00      	nop
 8001f00:	e7fe      	b.n	8001f00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <xQueueGenericCreateStatic+0x52>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <xQueueGenericCreateStatic+0x56>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <xQueueGenericCreateStatic+0x58>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	623b      	str	r3, [r7, #32]
}
 8001f2a:	bf00      	nop
 8001f2c:	e7fe      	b.n	8001f2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <xQueueGenericCreateStatic+0x7e>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <xQueueGenericCreateStatic+0x82>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <xQueueGenericCreateStatic+0x84>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	61fb      	str	r3, [r7, #28]
}
 8001f56:	bf00      	nop
 8001f58:	e7fe      	b.n	8001f58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f5a:	2350      	movs	r3, #80	; 0x50
 8001f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b50      	cmp	r3, #80	; 0x50
 8001f62:	d00a      	beq.n	8001f7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	61bb      	str	r3, [r7, #24]
}
 8001f76:	bf00      	nop
 8001f78:	e7fe      	b.n	8001f78 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f8c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f843 	bl	8002026 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3730      	adds	r7, #48	; 0x30
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b08a      	sub	sp, #40	; 0x28
 8001fae:	af02      	add	r7, sp, #8
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	613b      	str	r3, [r7, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	e7fe      	b.n	8001fd2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e004      	b.n	8001fea <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3350      	adds	r3, #80	; 0x50
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 f8c4 	bl	800417c <pvPortMalloc>
 8001ff4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00f      	beq.n	800201c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	3350      	adds	r3, #80	; 0x50
 8002000:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800200a:	79fa      	ldrb	r2, [r7, #7]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f805 	bl	8002026 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800201c:	69bb      	ldr	r3, [r7, #24]
	}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e002      	b.n	8002048 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002054:	2101      	movs	r1, #1
 8002056:	69b8      	ldr	r0, [r7, #24]
 8002058:	f7ff fec8 	bl	8001dec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <xQueueGenericSend+0x32>
	__asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <xQueueGenericSend+0x40>
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <xQueueGenericSend+0x44>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <xQueueGenericSend+0x46>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <xQueueGenericSend+0x60>
	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020c8:	bf00      	nop
 80020ca:	e7fe      	b.n	80020ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d103      	bne.n	80020da <xQueueGenericSend+0x6e>
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <xQueueGenericSend+0x72>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <xQueueGenericSend+0x74>
 80020de:	2300      	movs	r3, #0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <xQueueGenericSend+0x8e>
	__asm volatile
 80020e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e8:	f383 8811 	msr	BASEPRI, r3
 80020ec:	f3bf 8f6f 	isb	sy
 80020f0:	f3bf 8f4f 	dsb	sy
 80020f4:	623b      	str	r3, [r7, #32]
}
 80020f6:	bf00      	nop
 80020f8:	e7fe      	b.n	80020f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020fa:	f001 fa5f 	bl	80035bc <xTaskGetSchedulerState>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <xQueueGenericSend+0x9e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <xQueueGenericSend+0xa2>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <xQueueGenericSend+0xa4>
 800210e:	2300      	movs	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <xQueueGenericSend+0xbe>
	__asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	61fb      	str	r3, [r7, #28]
}
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800212a:	f001 ff27 	bl	8003f7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <xQueueGenericSend+0xd4>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d129      	bne.n	8002194 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002146:	f000 fa87 	bl	8002658 <prvCopyDataToQueue>
 800214a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	3324      	adds	r3, #36	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f001 f869 	bl	8003230 <xTaskRemoveFromEventList>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <xQueueGenericSend+0x1f8>)
 8002166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	e00a      	b.n	800218c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800217c:	4b39      	ldr	r3, [pc, #228]	; (8002264 <xQueueGenericSend+0x1f8>)
 800217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800218c:	f001 ff26 	bl	8003fdc <vPortExitCritical>
				return pdPASS;
 8002190:	2301      	movs	r3, #1
 8002192:	e063      	b.n	800225c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800219a:	f001 ff1f 	bl	8003fdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	e05c      	b.n	800225c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f8a3 	bl	80032f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021b6:	f001 ff11 	bl	8003fdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021ba:	f000 fe0d 	bl	8002dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021be:	f001 fedd 	bl	8003f7c <vPortEnterCritical>
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ce:	d103      	bne.n	80021d8 <xQueueGenericSend+0x16c>
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d103      	bne.n	80021ee <xQueueGenericSend+0x182>
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021ee:	f001 fef5 	bl	8003fdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021f2:	1d3a      	adds	r2, r7, #4
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 f892 	bl	8003324 <xTaskCheckForTimeOut>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d124      	bne.n	8002250 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002208:	f000 fb1e 	bl	8002848 <prvIsQueueFull>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d018      	beq.n	8002244 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	3310      	adds	r3, #16
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f000 ffb8 	bl	8003190 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002222:	f000 faa9 	bl	8002778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002226:	f000 fde5 	bl	8002df4 <xTaskResumeAll>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f af7c 	bne.w	800212a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <xQueueGenericSend+0x1f8>)
 8002234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	e772      	b.n	800212a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002246:	f000 fa97 	bl	8002778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800224a:	f000 fdd3 	bl	8002df4 <xTaskResumeAll>
 800224e:	e76c      	b.n	800212a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002252:	f000 fa91 	bl	8002778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002256:	f000 fdcd 	bl	8002df4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800225a:	2300      	movs	r3, #0
		}
	}
}
 800225c:	4618      	mov	r0, r3
 800225e:	3738      	adds	r7, #56	; 0x38
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <xQueueGenericSendFromISR+0x3c>
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <xQueueGenericSendFromISR+0x40>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <xQueueGenericSendFromISR+0x42>
 80022a8:	2300      	movs	r3, #0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	623b      	str	r3, [r7, #32]
}
 80022c0:	bf00      	nop
 80022c2:	e7fe      	b.n	80022c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d103      	bne.n	80022d2 <xQueueGenericSendFromISR+0x6a>
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <xQueueGenericSendFromISR+0x6e>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <xQueueGenericSendFromISR+0x70>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	61fb      	str	r3, [r7, #28]
}
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022f2:	f001 ff05 	bl	8004100 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022f6:	f3ef 8211 	mrs	r2, BASEPRI
 80022fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	61ba      	str	r2, [r7, #24]
 800230c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800230e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <xQueueGenericSendFromISR+0xbc>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d12c      	bne.n	800237e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002334:	f000 f990 	bl	8002658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002338:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d112      	bne.n	8002368 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	3324      	adds	r3, #36	; 0x24
 800234e:	4618      	mov	r0, r3
 8002350:	f000 ff6e 	bl	8003230 <xTaskRemoveFromEventList>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00b      	beq.n	8002378 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e007      	b.n	8002378 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800236c:	3301      	adds	r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	b25a      	sxtb	r2, r3
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002378:	2301      	movs	r3, #1
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800237c:	e001      	b.n	8002382 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800238c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002390:	4618      	mov	r0, r3
 8002392:	3738      	adds	r7, #56	; 0x38
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <xQueueReceive+0x30>
	__asm volatile
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	623b      	str	r3, [r7, #32]
}
 80023c4:	bf00      	nop
 80023c6:	e7fe      	b.n	80023c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <xQueueReceive+0x3e>
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <xQueueReceive+0x42>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <xQueueReceive+0x44>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <xQueueReceive+0x5e>
	__asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	61fb      	str	r3, [r7, #28]
}
 80023f2:	bf00      	nop
 80023f4:	e7fe      	b.n	80023f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023f6:	f001 f8e1 	bl	80035bc <xTaskGetSchedulerState>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <xQueueReceive+0x6e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <xQueueReceive+0x72>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueReceive+0x74>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueReceive+0x8e>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	61bb      	str	r3, [r7, #24]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002426:	f001 fda9 	bl	8003f7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01f      	beq.n	8002476 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800243a:	f000 f977 	bl	800272c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00f      	beq.n	800246e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	3310      	adds	r3, #16
 8002452:	4618      	mov	r0, r3
 8002454:	f000 feec 	bl	8003230 <xTaskRemoveFromEventList>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <xQueueReceive+0x1bc>)
 8002460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800246e:	f001 fdb5 	bl	8003fdc <vPortExitCritical>
				return pdPASS;
 8002472:	2301      	movs	r3, #1
 8002474:	e069      	b.n	800254a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800247c:	f001 fdae 	bl	8003fdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002480:	2300      	movs	r3, #0
 8002482:	e062      	b.n	800254a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f000 ff32 	bl	80032f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002498:	f001 fda0 	bl	8003fdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800249c:	f000 fc9c 	bl	8002dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024a0:	f001 fd6c 	bl	8003f7c <vPortEnterCritical>
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d103      	bne.n	80024ba <xQueueReceive+0x122>
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d103      	bne.n	80024d0 <xQueueReceive+0x138>
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024d0:	f001 fd84 	bl	8003fdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024d4:	1d3a      	adds	r2, r7, #4
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 ff21 	bl	8003324 <xTaskCheckForTimeOut>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d123      	bne.n	8002530 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ea:	f000 f997 	bl	800281c <prvIsQueueEmpty>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d017      	beq.n	8002524 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fe47 	bl	8003190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002504:	f000 f938 	bl	8002778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002508:	f000 fc74 	bl	8002df4 <xTaskResumeAll>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d189      	bne.n	8002426 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <xQueueReceive+0x1bc>)
 8002514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	e780      	b.n	8002426 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002526:	f000 f927 	bl	8002778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800252a:	f000 fc63 	bl	8002df4 <xTaskResumeAll>
 800252e:	e77a      	b.n	8002426 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002532:	f000 f921 	bl	8002778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002536:	f000 fc5d 	bl	8002df4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800253a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253c:	f000 f96e 	bl	800281c <prvIsQueueEmpty>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f43f af6f 	beq.w	8002426 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800254a:	4618      	mov	r0, r3
 800254c:	3730      	adds	r7, #48	; 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000ed04 	.word	0xe000ed04

08002558 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	623b      	str	r3, [r7, #32]
}
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <xQueueReceiveFromISR+0x3a>
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <xQueueReceiveFromISR+0x3e>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <xQueueReceiveFromISR+0x40>
 8002596:	2300      	movs	r3, #0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	61fb      	str	r3, [r7, #28]
}
 80025ae:	bf00      	nop
 80025b0:	e7fe      	b.n	80025b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025b2:	f001 fda5 	bl	8004100 <vPortValidateInterruptPriority>
	__asm volatile
 80025b6:	f3ef 8211 	mrs	r2, BASEPRI
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	61ba      	str	r2, [r7, #24]
 80025cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80025ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02f      	beq.n	800263e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ec:	f000 f89e 	bl	800272c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80025f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d112      	bne.n	8002628 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	3310      	adds	r3, #16
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fe0e 	bl	8003230 <xTaskRemoveFromEventList>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800262c:	3301      	adds	r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	b25a      	sxtb	r2, r3
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002638:	2301      	movs	r3, #1
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
 800263c:	e001      	b.n	8002642 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f383 8811 	msr	BASEPRI, r3
}
 800264c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002650:	4618      	mov	r0, r3
 8002652:	3738      	adds	r7, #56	; 0x38
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d14d      	bne.n	800271a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 ffb8 	bl	80035f8 <xTaskPriorityDisinherit>
 8002688:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	e043      	b.n	800271a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d119      	bne.n	80026cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6898      	ldr	r0, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	461a      	mov	r2, r3
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	f001 ff68 	bl	8004578 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	441a      	add	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d32b      	bcc.n	800271a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	e026      	b.n	800271a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68d8      	ldr	r0, [r3, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	461a      	mov	r2, r3
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	f001 ff4e 	bl	8004578 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	425b      	negs	r3, r3
 80026e6:	441a      	add	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	425b      	negs	r3, r3
 8002702:	441a      	add	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d105      	bne.n	800271a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	3b01      	subs	r3, #1
 8002718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002722:	697b      	ldr	r3, [r7, #20]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d018      	beq.n	8002770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	441a      	add	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	d303      	bcc.n	8002760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68d9      	ldr	r1, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	461a      	mov	r2, r3
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	f001 ff04 	bl	8004578 <memcpy>
	}
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002780:	f001 fbfc 	bl	8003f7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800278c:	e011      	b.n	80027b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3324      	adds	r3, #36	; 0x24
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fd48 	bl	8003230 <xTaskRemoveFromEventList>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027a6:	f000 fe1f 	bl	80033e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	dce9      	bgt.n	800278e <prvUnlockQueue+0x16>
 80027ba:	e000      	b.n	80027be <prvUnlockQueue+0x46>
					break;
 80027bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	22ff      	movs	r2, #255	; 0xff
 80027c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027c6:	f001 fc09 	bl	8003fdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027ca:	f001 fbd7 	bl	8003f7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d6:	e011      	b.n	80027fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d012      	beq.n	8002806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3310      	adds	r3, #16
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fd23 	bl	8003230 <xTaskRemoveFromEventList>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027f0:	f000 fdfa 	bl	80033e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002800:	2b00      	cmp	r3, #0
 8002802:	dce9      	bgt.n	80027d8 <prvUnlockQueue+0x60>
 8002804:	e000      	b.n	8002808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	22ff      	movs	r2, #255	; 0xff
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002810:	f001 fbe4 	bl	8003fdc <vPortExitCritical>
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002824:	f001 fbaa 	bl	8003f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002830:	2301      	movs	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e001      	b.n	800283a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800283a:	f001 fbcf 	bl	8003fdc <vPortExitCritical>

	return xReturn;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002850:	f001 fb94 	bl	8003f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	429a      	cmp	r2, r3
 800285e:	d102      	bne.n	8002866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002860:	2301      	movs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e001      	b.n	800286a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800286a:	f001 fbb7 	bl	8003fdc <vPortExitCritical>

	return xReturn;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e014      	b.n	80028b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002888:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <vQueueAddToRegistry+0x4c>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002894:	490b      	ldr	r1, [pc, #44]	; (80028c4 <vQueueAddToRegistry+0x4c>)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <vQueueAddToRegistry+0x4c>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028aa:	e006      	b.n	80028ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3301      	adds	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b07      	cmp	r3, #7
 80028b6:	d9e7      	bls.n	8002888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000864 	.word	0x20000864

080028c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028d8:	f001 fb50 	bl	8003f7c <vPortEnterCritical>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <vQueueWaitForMessageRestricted+0x2a>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d103      	bne.n	8002908 <vQueueWaitForMessageRestricted+0x40>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002908:	f001 fb68 	bl	8003fdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3324      	adds	r3, #36	; 0x24
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fc5b 	bl	80031d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff28 	bl	8002778 <prvUnlockQueue>
	}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08e      	sub	sp, #56	; 0x38
 8002934:	af04      	add	r7, sp, #16
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	623b      	str	r3, [r7, #32]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xTaskCreateStatic+0x46>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	61fb      	str	r3, [r7, #28]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002976:	23bc      	movs	r3, #188	; 0xbc
 8002978:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2bbc      	cmp	r3, #188	; 0xbc
 800297e:	d00a      	beq.n	8002996 <xTaskCreateStatic+0x66>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	61bb      	str	r3, [r7, #24]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01e      	beq.n	80029da <xTaskCreateStatic+0xaa>
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01b      	beq.n	80029da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029b4:	2300      	movs	r3, #0
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f851 	bl	8002a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029d4:	f000 f8ec 	bl	8002bb0 <prvAddNewTaskToReadyList>
 80029d8:	e001      	b.n	80029de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029de:	697b      	ldr	r3, [r7, #20]
	}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af04      	add	r7, sp, #16
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fbbd 	bl	800417c <pvPortMalloc>
 8002a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00e      	beq.n	8002a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a0a:	20bc      	movs	r0, #188	; 0xbc
 8002a0c:	f001 fbb6 	bl	800417c <pvPortMalloc>
 8002a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1e:	e005      	b.n	8002a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f001 fc6f 	bl	8004304 <vPortFree>
 8002a26:	e001      	b.n	8002a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9303      	str	r3, [sp, #12]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	9302      	str	r3, [sp, #8]
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f80f 	bl	8002a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a56:	69f8      	ldr	r0, [r7, #28]
 8002a58:	f000 f8aa 	bl	8002bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e002      	b.n	8002a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
 8002a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a68:	69bb      	ldr	r3, [r7, #24]
	}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	21a5      	movs	r1, #165	; 0xa5
 8002a8e:	f001 fd81 	bl	8004594 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	617b      	str	r3, [r7, #20]
}
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e012      	b.n	8002af8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	7819      	ldrb	r1, [r3, #0]
 8002ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	3334      	adds	r3, #52	; 0x34
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	d9e9      	bls.n	8002ad2 <prvInitialiseNewTask+0x5e>
 8002afe:	e000      	b.n	8002b02 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002b00:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	2b37      	cmp	r3, #55	; 0x37
 8002b0e:	d901      	bls.n	8002b14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b10:	2337      	movs	r3, #55	; 0x37
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f8cd 	bl	8001cca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	3318      	adds	r3, #24
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f8c8 	bl	8001cca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	3354      	adds	r3, #84	; 0x54
 8002b64:	2260      	movs	r2, #96	; 0x60
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 fd13 	bl	8004594 <memset>
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <prvInitialiseNewTask+0x130>)
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <prvInitialiseNewTask+0x134>)
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <prvInitialiseNewTask+0x138>)
 8002b7e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	69b8      	ldr	r0, [r7, #24]
 8002b86:	f001 f90b 	bl	8003da0 <pxPortInitialiseStack>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	08004820 	.word	0x08004820
 8002ba8:	08004840 	.word	0x08004840
 8002bac:	08004800 	.word	0x08004800

08002bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bb8:	f001 f9e0 	bl	8003f7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <prvAddNewTaskToReadyList+0xc4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	4a2c      	ldr	r2, [pc, #176]	; (8002c74 <prvAddNewTaskToReadyList+0xc4>)
 8002bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <prvAddNewTaskToReadyList+0xc8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bce:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <prvAddNewTaskToReadyList+0xc8>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <prvAddNewTaskToReadyList+0xc4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d110      	bne.n	8002bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bdc:	f000 fc28 	bl	8003430 <prvInitialiseTaskLists>
 8002be0:	e00d      	b.n	8002bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <prvAddNewTaskToReadyList+0xcc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <prvAddNewTaskToReadyList+0xc8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d802      	bhi.n	8002bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <prvAddNewTaskToReadyList+0xc8>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <prvAddNewTaskToReadyList+0xd0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <prvAddNewTaskToReadyList+0xd0>)
 8002c06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <prvAddNewTaskToReadyList+0xd0>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <prvAddNewTaskToReadyList+0xd4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d903      	bls.n	8002c24 <prvAddNewTaskToReadyList+0x74>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <prvAddNewTaskToReadyList+0xd4>)
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <prvAddNewTaskToReadyList+0xd8>)
 8002c32:	441a      	add	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7ff f851 	bl	8001ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c40:	f001 f9cc 	bl	8003fdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <prvAddNewTaskToReadyList+0xcc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <prvAddNewTaskToReadyList+0xc8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d207      	bcs.n	8002c6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <prvAddNewTaskToReadyList+0xdc>)
 8002c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000d78 	.word	0x20000d78
 8002c78:	200008a4 	.word	0x200008a4
 8002c7c:	20000d84 	.word	0x20000d84
 8002c80:	20000d94 	.word	0x20000d94
 8002c84:	20000d80 	.word	0x20000d80
 8002c88:	200008a8 	.word	0x200008a8
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <vTaskDelay+0x60>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <vTaskDelay+0x30>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60bb      	str	r3, [r7, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cc0:	f000 f88a 	bl	8002dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fd04 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ccc:	f000 f892 	bl	8002df4 <xTaskResumeAll>
 8002cd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <vTaskDelay+0x64>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000da0 	.word	0x20000da0
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d06:	463a      	mov	r2, r7
 8002d08:	1d39      	adds	r1, r7, #4
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe ff8a 	bl	8001c28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	9202      	str	r2, [sp, #8]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2300      	movs	r3, #0
 8002d24:	460a      	mov	r2, r1
 8002d26:	4924      	ldr	r1, [pc, #144]	; (8002db8 <vTaskStartScheduler+0xc0>)
 8002d28:	4824      	ldr	r0, [pc, #144]	; (8002dbc <vTaskStartScheduler+0xc4>)
 8002d2a:	f7ff fe01 	bl	8002930 <xTaskCreateStatic>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <vTaskStartScheduler+0xc8>)
 8002d32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <vTaskStartScheduler+0xc8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e001      	b.n	8002d46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d4c:	f000 fd16 	bl	800377c <xTimerCreateTimerTask>
 8002d50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d11b      	bne.n	8002d90 <vTaskStartScheduler+0x98>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	613b      	str	r3, [r7, #16]
}
 8002d6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <vTaskStartScheduler+0xcc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3354      	adds	r3, #84	; 0x54
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <vTaskStartScheduler+0xd0>)
 8002d74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <vTaskStartScheduler+0xd4>)
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <vTaskStartScheduler+0xd8>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <vTaskStartScheduler+0xdc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d8a:	f001 f885 	bl	8003e98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d8e:	e00e      	b.n	8002dae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d10a      	bne.n	8002dae <vTaskStartScheduler+0xb6>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	60fb      	str	r3, [r7, #12]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <vTaskStartScheduler+0xb4>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	08004770 	.word	0x08004770
 8002dbc:	08003401 	.word	0x08003401
 8002dc0:	20000d9c 	.word	0x20000d9c
 8002dc4:	200008a4 	.word	0x200008a4
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	20000d98 	.word	0x20000d98
 8002dd0:	20000d84 	.word	0x20000d84
 8002dd4:	20000d7c 	.word	0x20000d7c

08002dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <vTaskSuspendAll+0x18>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <vTaskSuspendAll+0x18>)
 8002de4:	6013      	str	r3, [r2, #0]
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000da0 	.word	0x20000da0

08002df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e02:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <xTaskResumeAll+0x118>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	603b      	str	r3, [r7, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e20:	f001 f8ac 	bl	8003f7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <xTaskResumeAll+0x118>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4a38      	ldr	r2, [pc, #224]	; (8002f0c <xTaskResumeAll+0x118>)
 8002e2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e2e:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <xTaskResumeAll+0x118>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d162      	bne.n	8002efc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <xTaskResumeAll+0x11c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d05e      	beq.n	8002efc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e3e:	e02f      	b.n	8002ea0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e40:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <xTaskResumeAll+0x120>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe ffa3 	bl	8001d98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3304      	adds	r3, #4
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe ff9e 	bl	8001d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <xTaskResumeAll+0x124>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d903      	bls.n	8002e70 <xTaskResumeAll+0x7c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <xTaskResumeAll+0x124>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <xTaskResumeAll+0x128>)
 8002e7e:	441a      	add	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7fe ff2b 	bl	8001ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <xTaskResumeAll+0x12c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <xTaskResumeAll+0x130>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <xTaskResumeAll+0x120>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1cb      	bne.n	8002e40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002eae:	f000 fb61 	bl	8003574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <xTaskResumeAll+0x134>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ebe:	f000 f845 	bl	8002f4c <xTaskIncrementTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <xTaskResumeAll+0x130>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f1      	bne.n	8002ebe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <xTaskResumeAll+0x134>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <xTaskResumeAll+0x130>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <xTaskResumeAll+0x138>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002efc:	f001 f86e 	bl	8003fdc <vPortExitCritical>

	return xAlreadyYielded;
 8002f00:	68bb      	ldr	r3, [r7, #8]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000da0 	.word	0x20000da0
 8002f10:	20000d78 	.word	0x20000d78
 8002f14:	20000d38 	.word	0x20000d38
 8002f18:	20000d80 	.word	0x20000d80
 8002f1c:	200008a8 	.word	0x200008a8
 8002f20:	200008a4 	.word	0x200008a4
 8002f24:	20000d8c 	.word	0x20000d8c
 8002f28:	20000d88 	.word	0x20000d88
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <xTaskGetTickCount+0x18>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f3c:	687b      	ldr	r3, [r7, #4]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	20000d7c 	.word	0x20000d7c

08002f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <xTaskIncrementTick+0x150>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 808e 	bne.w	800307c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f60:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <xTaskIncrementTick+0x154>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f68:	4a4d      	ldr	r2, [pc, #308]	; (80030a0 <xTaskIncrementTick+0x154>)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d120      	bne.n	8002fb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f74:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <xTaskIncrementTick+0x48>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	603b      	str	r3, [r7, #0]
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xTaskIncrementTick+0x46>
 8002f94:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <xTaskIncrementTick+0x15c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4a41      	ldr	r2, [pc, #260]	; (80030a8 <xTaskIncrementTick+0x15c>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b40      	ldr	r3, [pc, #256]	; (80030ac <xTaskIncrementTick+0x160>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <xTaskIncrementTick+0x160>)
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	f000 fadf 	bl	8003574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <xTaskIncrementTick+0x164>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d34e      	bcc.n	800305e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc0:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xTaskIncrementTick+0x82>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xTaskIncrementTick+0x84>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd4:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <xTaskIncrementTick+0x164>)
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	601a      	str	r2, [r3, #0]
					break;
 8002fdc:	e03f      	b.n	800305e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <xTaskIncrementTick+0x158>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d203      	bcs.n	8002ffe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ff6:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <xTaskIncrementTick+0x164>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6013      	str	r3, [r2, #0]
						break;
 8002ffc:	e02f      	b.n	800305e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3304      	adds	r3, #4
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fec8 	bl	8001d98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3318      	adds	r3, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe febf 	bl	8001d98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <xTaskIncrementTick+0x168>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d903      	bls.n	800302e <xTaskIncrementTick+0xe2>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	4a22      	ldr	r2, [pc, #136]	; (80030b4 <xTaskIncrementTick+0x168>)
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <xTaskIncrementTick+0x16c>)
 800303c:	441a      	add	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3304      	adds	r3, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7fe fe4c 	bl	8001ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <xTaskIncrementTick+0x170>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	429a      	cmp	r2, r3
 8003056:	d3b3      	bcc.n	8002fc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003058:	2301      	movs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305c:	e7b0      	b.n	8002fc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800305e:	4b17      	ldr	r3, [pc, #92]	; (80030bc <xTaskIncrementTick+0x170>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	4914      	ldr	r1, [pc, #80]	; (80030b8 <xTaskIncrementTick+0x16c>)
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d907      	bls.n	8003086 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e004      	b.n	8003086 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <xTaskIncrementTick+0x174>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a0f      	ldr	r2, [pc, #60]	; (80030c0 <xTaskIncrementTick+0x174>)
 8003084:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <xTaskIncrementTick+0x178>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800308e:	2301      	movs	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003092:	697b      	ldr	r3, [r7, #20]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000da0 	.word	0x20000da0
 80030a0:	20000d7c 	.word	0x20000d7c
 80030a4:	20000d30 	.word	0x20000d30
 80030a8:	20000d34 	.word	0x20000d34
 80030ac:	20000d90 	.word	0x20000d90
 80030b0:	20000d98 	.word	0x20000d98
 80030b4:	20000d80 	.word	0x20000d80
 80030b8:	200008a8 	.word	0x200008a8
 80030bc:	200008a4 	.word	0x200008a4
 80030c0:	20000d88 	.word	0x20000d88
 80030c4:	20000d8c 	.word	0x20000d8c

080030c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <vTaskSwitchContext+0xb0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <vTaskSwitchContext+0xb4>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030dc:	e046      	b.n	800316c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <vTaskSwitchContext+0xb4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030e4:	4b26      	ldr	r3, [pc, #152]	; (8003180 <vTaskSwitchContext+0xb8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e010      	b.n	800310e <vTaskSwitchContext+0x46>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <vTaskSwitchContext+0x40>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	607b      	str	r3, [r7, #4]
}
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <vTaskSwitchContext+0x3e>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	491d      	ldr	r1, [pc, #116]	; (8003184 <vTaskSwitchContext+0xbc>)
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0e4      	beq.n	80030ec <vTaskSwitchContext+0x24>
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4a15      	ldr	r2, [pc, #84]	; (8003184 <vTaskSwitchContext+0xbc>)
 800312e:	4413      	add	r3, r2
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3308      	adds	r3, #8
 8003144:	429a      	cmp	r2, r3
 8003146:	d104      	bne.n	8003152 <vTaskSwitchContext+0x8a>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <vTaskSwitchContext+0xc0>)
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4a08      	ldr	r2, [pc, #32]	; (8003180 <vTaskSwitchContext+0xb8>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <vTaskSwitchContext+0xc0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3354      	adds	r3, #84	; 0x54
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <vTaskSwitchContext+0xc4>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000da0 	.word	0x20000da0
 800317c:	20000d8c 	.word	0x20000d8c
 8003180:	20000d80 	.word	0x20000d80
 8003184:	200008a8 	.word	0x200008a8
 8003188:	200008a4 	.word	0x200008a4
 800318c:	20000010 	.word	0x20000010

08003190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	60fb      	str	r3, [r7, #12]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <vTaskPlaceOnEventList+0x44>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3318      	adds	r3, #24
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fdb2 	bl	8001d28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031c4:	2101      	movs	r1, #1
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f000 fa84 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200008a4 	.word	0x200008a4

080031d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	617b      	str	r3, [r7, #20]
}
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <vTaskPlaceOnEventListRestricted+0x54>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3318      	adds	r3, #24
 8003206:	4619      	mov	r1, r3
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7fe fd6a 	bl	8001ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	68b8      	ldr	r0, [r7, #8]
 800321e:	f000 fa59 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
	}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200008a4 	.word	0x200008a4

08003230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	60fb      	str	r3, [r7, #12]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	3318      	adds	r3, #24
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fd99 	bl	8001d98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <xTaskRemoveFromEventList+0xb0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3304      	adds	r3, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fd90 	bl	8001d98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <xTaskRemoveFromEventList+0xb4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d903      	bls.n	800328c <xTaskRemoveFromEventList+0x5c>
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <xTaskRemoveFromEventList+0xb4>)
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <xTaskRemoveFromEventList+0xb8>)
 800329a:	441a      	add	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7fe fd1d 	bl	8001ce2 <vListInsertEnd>
 80032a8:	e005      	b.n	80032b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3318      	adds	r3, #24
 80032ae:	4619      	mov	r1, r3
 80032b0:	480e      	ldr	r0, [pc, #56]	; (80032ec <xTaskRemoveFromEventList+0xbc>)
 80032b2:	f7fe fd16 	bl	8001ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <xTaskRemoveFromEventList+0xc0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d905      	bls.n	80032d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <xTaskRemoveFromEventList+0xc4>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e001      	b.n	80032d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80032d4:	697b      	ldr	r3, [r7, #20]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000da0 	.word	0x20000da0
 80032e4:	20000d80 	.word	0x20000d80
 80032e8:	200008a8 	.word	0x200008a8
 80032ec:	20000d38 	.word	0x20000d38
 80032f0:	200008a4 	.word	0x200008a4
 80032f4:	20000d8c 	.word	0x20000d8c

080032f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <vTaskInternalSetTimeOutState+0x24>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <vTaskInternalSetTimeOutState+0x28>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000d90 	.word	0x20000d90
 8003320:	20000d7c 	.word	0x20000d7c

08003324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	613b      	str	r3, [r7, #16]
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	60fb      	str	r3, [r7, #12]
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003366:	f000 fe09 	bl	8003f7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <xTaskCheckForTimeOut+0xbc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d102      	bne.n	800338a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e023      	b.n	80033d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <xTaskCheckForTimeOut+0xc0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d007      	beq.n	80033a6 <xTaskCheckForTimeOut+0x82>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	e015      	b.n	80033d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d20b      	bcs.n	80033c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad2      	subs	r2, r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff9b 	bl	80032f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e004      	b.n	80033d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033d2:	f000 fe03 	bl	8003fdc <vPortExitCritical>

	return xReturn;
 80033d6:	69fb      	ldr	r3, [r7, #28]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000d7c 	.word	0x20000d7c
 80033e4:	20000d90 	.word	0x20000d90

080033e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <vTaskMissedYield+0x14>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000d8c 	.word	0x20000d8c

08003400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003408:	f000 f852 	bl	80034b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <prvIdleTask+0x28>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d9f9      	bls.n	8003408 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <prvIdleTask+0x2c>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003424:	e7f0      	b.n	8003408 <prvIdleTask+0x8>
 8003426:	bf00      	nop
 8003428:	200008a8 	.word	0x200008a8
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	e00c      	b.n	8003456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <prvInitialiseTaskLists+0x60>)
 8003448:	4413      	add	r3, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fc1e 	bl	8001c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3301      	adds	r3, #1
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b37      	cmp	r3, #55	; 0x37
 800345a:	d9ef      	bls.n	800343c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800345c:	480d      	ldr	r0, [pc, #52]	; (8003494 <prvInitialiseTaskLists+0x64>)
 800345e:	f7fe fc15 	bl	8001c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003462:	480d      	ldr	r0, [pc, #52]	; (8003498 <prvInitialiseTaskLists+0x68>)
 8003464:	f7fe fc12 	bl	8001c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003468:	480c      	ldr	r0, [pc, #48]	; (800349c <prvInitialiseTaskLists+0x6c>)
 800346a:	f7fe fc0f 	bl	8001c8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800346e:	480c      	ldr	r0, [pc, #48]	; (80034a0 <prvInitialiseTaskLists+0x70>)
 8003470:	f7fe fc0c 	bl	8001c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003474:	480b      	ldr	r0, [pc, #44]	; (80034a4 <prvInitialiseTaskLists+0x74>)
 8003476:	f7fe fc09 	bl	8001c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <prvInitialiseTaskLists+0x78>)
 800347c:	4a05      	ldr	r2, [pc, #20]	; (8003494 <prvInitialiseTaskLists+0x64>)
 800347e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <prvInitialiseTaskLists+0x7c>)
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <prvInitialiseTaskLists+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200008a8 	.word	0x200008a8
 8003494:	20000d08 	.word	0x20000d08
 8003498:	20000d1c 	.word	0x20000d1c
 800349c:	20000d38 	.word	0x20000d38
 80034a0:	20000d4c 	.word	0x20000d4c
 80034a4:	20000d64 	.word	0x20000d64
 80034a8:	20000d30 	.word	0x20000d30
 80034ac:	20000d34 	.word	0x20000d34

080034b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034b6:	e019      	b.n	80034ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034b8:	f000 fd60 	bl	8003f7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <prvCheckTasksWaitingTermination+0x50>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fc65 	bl	8001d98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <prvCheckTasksWaitingTermination+0x54>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <prvCheckTasksWaitingTermination+0x54>)
 80034d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <prvCheckTasksWaitingTermination+0x58>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <prvCheckTasksWaitingTermination+0x58>)
 80034e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034e2:	f000 fd7b 	bl	8003fdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f810 	bl	800350c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <prvCheckTasksWaitingTermination+0x58>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e1      	bne.n	80034b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000d4c 	.word	0x20000d4c
 8003504:	20000d78 	.word	0x20000d78
 8003508:	20000d60 	.word	0x20000d60

0800350c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3354      	adds	r3, #84	; 0x54
 8003518:	4618      	mov	r0, r3
 800351a:	f001 f851 	bl	80045c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fee9 	bl	8004304 <vPortFree>
				vPortFree( pxTCB );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fee6 	bl	8004304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003538:	e018      	b.n	800356c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003540:	2b01      	cmp	r3, #1
 8003542:	d103      	bne.n	800354c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fedd 	bl	8004304 <vPortFree>
	}
 800354a:	e00f      	b.n	800356c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003552:	2b02      	cmp	r3, #2
 8003554:	d00a      	beq.n	800356c <prvDeleteTCB+0x60>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60fb      	str	r3, [r7, #12]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <prvDeleteTCB+0x5e>
	}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <prvResetNextTaskUnblockTime+0x40>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <prvResetNextTaskUnblockTime+0x14>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <prvResetNextTaskUnblockTime+0x16>
 8003588:	2300      	movs	r3, #0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <prvResetNextTaskUnblockTime+0x44>)
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003596:	e008      	b.n	80035aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <prvResetNextTaskUnblockTime+0x40>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <prvResetNextTaskUnblockTime+0x44>)
 80035a8:	6013      	str	r3, [r2, #0]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	20000d30 	.word	0x20000d30
 80035b8:	20000d98 	.word	0x20000d98

080035bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <xTaskGetSchedulerState+0x34>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035ca:	2301      	movs	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	e008      	b.n	80035e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <xTaskGetSchedulerState+0x38>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035d8:	2302      	movs	r3, #2
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	e001      	b.n	80035e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035e2:	687b      	ldr	r3, [r7, #4]
	}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000d84 	.word	0x20000d84
 80035f4:	20000da0 	.word	0x20000da0

080035f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d056      	beq.n	80036bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <xTaskPriorityDisinherit+0xd0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d00a      	beq.n	800362e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60fb      	str	r3, [r7, #12]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60bb      	str	r3, [r7, #8]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	429a      	cmp	r2, r3
 8003660:	d02c      	beq.n	80036bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	2b00      	cmp	r3, #0
 8003668:	d128      	bne.n	80036bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3304      	adds	r3, #4
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fb92 	bl	8001d98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <xTaskPriorityDisinherit+0xd4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d903      	bls.n	800369c <xTaskPriorityDisinherit+0xa4>
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <xTaskPriorityDisinherit+0xd4>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <xTaskPriorityDisinherit+0xd8>)
 80036aa:	441a      	add	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7fe fb15 	bl	8001ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036bc:	697b      	ldr	r3, [r7, #20]
	}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200008a4 	.word	0x200008a4
 80036cc:	20000d80 	.word	0x20000d80
 80036d0:	200008a8 	.word	0x200008a8

080036d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <prvAddCurrentTaskToDelayedList+0x90>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036e4:	4b20      	ldr	r3, [pc, #128]	; (8003768 <prvAddCurrentTaskToDelayedList+0x94>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fb54 	bl	8001d98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d10a      	bne.n	800370e <prvAddCurrentTaskToDelayedList+0x3a>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <prvAddCurrentTaskToDelayedList+0x94>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4819      	ldr	r0, [pc, #100]	; (800376c <prvAddCurrentTaskToDelayedList+0x98>)
 8003708:	f7fe faeb 	bl	8001ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800370c:	e026      	b.n	800375c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <prvAddCurrentTaskToDelayedList+0x94>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d209      	bcs.n	800373a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <prvAddCurrentTaskToDelayedList+0x94>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3304      	adds	r3, #4
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7fe faf8 	bl	8001d28 <vListInsert>
}
 8003738:	e010      	b.n	800375c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <prvAddCurrentTaskToDelayedList+0xa0>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <prvAddCurrentTaskToDelayedList+0x94>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f7fe faee 	bl	8001d28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <prvAddCurrentTaskToDelayedList+0xa4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	d202      	bcs.n	800375c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000d7c 	.word	0x20000d7c
 8003768:	200008a4 	.word	0x200008a4
 800376c:	20000d64 	.word	0x20000d64
 8003770:	20000d34 	.word	0x20000d34
 8003774:	20000d30 	.word	0x20000d30
 8003778:	20000d98 	.word	0x20000d98

0800377c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003786:	f000 facb 	bl	8003d20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <xTimerCreateTimerTask+0x80>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d021      	beq.n	80037d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800379a:	1d3a      	adds	r2, r7, #4
 800379c:	f107 0108 	add.w	r1, r7, #8
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fa57 	bl	8001c58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	9202      	str	r2, [sp, #8]
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	2302      	movs	r3, #2
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	2300      	movs	r3, #0
 80037ba:	460a      	mov	r2, r1
 80037bc:	4910      	ldr	r1, [pc, #64]	; (8003800 <xTimerCreateTimerTask+0x84>)
 80037be:	4811      	ldr	r0, [pc, #68]	; (8003804 <xTimerCreateTimerTask+0x88>)
 80037c0:	f7ff f8b6 	bl	8002930 <xTaskCreateStatic>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <xTimerCreateTimerTask+0x8c>)
 80037c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <xTimerCreateTimerTask+0x8c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	613b      	str	r3, [r7, #16]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80037f2:	697b      	ldr	r3, [r7, #20]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000dd4 	.word	0x20000dd4
 8003800:	08004778 	.word	0x08004778
 8003804:	08003929 	.word	0x08003929
 8003808:	20000dd8 	.word	0x20000dd8

0800380c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	623b      	str	r3, [r7, #32]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <xTimerGenericCommand+0x98>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d02a      	beq.n	8003898 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b05      	cmp	r3, #5
 8003852:	dc18      	bgt.n	8003886 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003854:	f7ff feb2 	bl	80035bc <xTaskGetSchedulerState>
 8003858:	4603      	mov	r3, r0
 800385a:	2b02      	cmp	r3, #2
 800385c:	d109      	bne.n	8003872 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <xTimerGenericCommand+0x98>)
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	f107 0110 	add.w	r1, r7, #16
 8003866:	2300      	movs	r3, #0
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	f7fe fbff 	bl	800206c <xQueueGenericSend>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24
 8003870:	e012      	b.n	8003898 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <xTimerGenericCommand+0x98>)
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	f107 0110 	add.w	r1, r7, #16
 800387a:	2300      	movs	r3, #0
 800387c:	2200      	movs	r2, #0
 800387e:	f7fe fbf5 	bl	800206c <xQueueGenericSend>
 8003882:	6278      	str	r0, [r7, #36]	; 0x24
 8003884:	e008      	b.n	8003898 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <xTimerGenericCommand+0x98>)
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	f107 0110 	add.w	r1, r7, #16
 800388e:	2300      	movs	r3, #0
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	f7fe fce9 	bl	8002268 <xQueueGenericSendFromISR>
 8003896:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800389a:	4618      	mov	r0, r3
 800389c:	3728      	adds	r7, #40	; 0x28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000dd4 	.word	0x20000dd4

080038a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <prvProcessExpiredTimer+0x7c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fa69 	bl	8001d98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d122      	bne.n	8003914 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	18d1      	adds	r1, r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f000 f8c8 	bl	8003a70 <prvInsertTimerInActiveList>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	2100      	movs	r1, #0
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	f7ff ff8b 	bl	800380c <xTimerGenericCommand>
 80038f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60fb      	str	r3, [r7, #12]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	4798      	blx	r3
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000dcc 	.word	0x20000dcc

08003928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f857 	bl	80039e8 <prvGetNextExpireTime>
 800393a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4619      	mov	r1, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f803 	bl	800394c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003946:	f000 f8d5 	bl	8003af4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800394a:	e7f1      	b.n	8003930 <prvTimerTask+0x8>

0800394c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003956:	f7ff fa3f 	bl	8002dd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f866 	bl	8003a30 <prvSampleTimeNow>
 8003964:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d130      	bne.n	80039ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <prvProcessTimerOrBlockTask+0x3c>
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	429a      	cmp	r2, r3
 8003978:	d806      	bhi.n	8003988 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800397a:	f7ff fa3b 	bl	8002df4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff91 	bl	80038a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003986:	e024      	b.n	80039d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <prvProcessTimerOrBlockTask+0x90>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <prvProcessTimerOrBlockTask+0x94>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f7fe ff8b 	bl	80028c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80039b2:	f7ff fa1f 	bl	8002df4 <xTaskResumeAll>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <prvProcessTimerOrBlockTask+0x98>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
}
 80039cc:	e001      	b.n	80039d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80039ce:	f7ff fa11 	bl	8002df4 <xTaskResumeAll>
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000dd0 	.word	0x20000dd0
 80039e0:	20000dd4 	.word	0x20000dd4
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <prvGetNextExpireTime+0x44>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <prvGetNextExpireTime+0x44>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e001      	b.n	8003a1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000dcc 	.word	0x20000dcc

08003a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003a38:	f7ff fa7a 	bl	8002f30 <xTaskGetTickCount>
 8003a3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <prvSampleTimeNow+0x3c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d205      	bcs.n	8003a54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a48:	f000 f908 	bl	8003c5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e002      	b.n	8003a5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a5a:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <prvSampleTimeNow+0x3c>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a60:	68fb      	ldr	r3, [r7, #12]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000ddc 	.word	0x20000ddc

08003a70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d812      	bhi.n	8003abc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e01b      	b.n	8003ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <prvInsertTimerInActiveList+0x7c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fe f937 	bl	8001d28 <vListInsert>
 8003aba:	e012      	b.n	8003ae2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d206      	bcs.n	8003ad2 <prvInsertTimerInActiveList+0x62>
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e007      	b.n	8003ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <prvInsertTimerInActiveList+0x80>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f7fe f923 	bl	8001d28 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ae2:	697b      	ldr	r3, [r7, #20]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000dd0 	.word	0x20000dd0
 8003af0:	20000dcc 	.word	0x20000dcc

08003af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08e      	sub	sp, #56	; 0x38
 8003af8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003afa:	e09d      	b.n	8003c38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	da18      	bge.n	8003b34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	3304      	adds	r3, #4
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	61fb      	str	r3, [r7, #28]
}
 8003b20:	bf00      	nop
 8003b22:	e7fe      	b.n	8003b22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2a:	6850      	ldr	r0, [r2, #4]
 8003b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2e:	6892      	ldr	r2, [r2, #8]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	db7d      	blt.n	8003c36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe f924 	bl	8001d98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b50:	463b      	mov	r3, r7
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ff6c 	bl	8003a30 <prvSampleTimeNow>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d86b      	bhi.n	8003c38 <prvProcessReceivedCommands+0x144>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <prvProcessReceivedCommands+0x74>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b91 	.word	0x08003b91
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003b91 	.word	0x08003b91
 8003b74:	08003c39 	.word	0x08003c39
 8003b78:	08003bed 	.word	0x08003bed
 8003b7c:	08003c25 	.word	0x08003c25
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003b91 	.word	0x08003b91
 8003b88:	08003c39 	.word	0x08003c39
 8003b8c:	08003bed 	.word	0x08003bed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	18d1      	adds	r1, r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9e:	f7ff ff67 	bl	8003a70 <prvInsertTimerInActiveList>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d047      	beq.n	8003c38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d13f      	bne.n	8003c38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	441a      	add	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bca:	f7ff fe1f 	bl	800380c <xTimerGenericCommand>
 8003bce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d130      	bne.n	8003c38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61bb      	str	r3, [r7, #24]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	617b      	str	r3, [r7, #20]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	18d1      	adds	r1, r2, r3
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c1e:	f7ff ff27 	bl	8003a70 <prvInsertTimerInActiveList>
					break;
 8003c22:	e009      	b.n	8003c38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c30:	f000 fb68 	bl	8004304 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c34:	e000      	b.n	8003c38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003c36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <prvProcessReceivedCommands+0x164>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1d39      	adds	r1, r7, #4
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fba9 	bl	8002398 <xQueueReceive>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f47f af57 	bne.w	8003afc <prvProcessReceivedCommands+0x8>
	}
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000dd4 	.word	0x20000dd4

08003c5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c62:	e045      	b.n	8003cf0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <prvSwitchTimerLists+0xbc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <prvSwitchTimerLists+0xbc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe f88b 	bl	8001d98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d12e      	bne.n	8003cf0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d90e      	bls.n	8003cc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <prvSwitchTimerLists+0xbc>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f7fe f834 	bl	8001d28 <vListInsert>
 8003cc0:	e016      	b.n	8003cf0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff fd9d 	bl	800380c <xTimerGenericCommand>
 8003cd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	603b      	str	r3, [r7, #0]
}
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <prvSwitchTimerLists+0xbc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1b4      	bne.n	8003c64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvSwitchTimerLists+0xbc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <prvSwitchTimerLists+0xc0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <prvSwitchTimerLists+0xbc>)
 8003d06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <prvSwitchTimerLists+0xc0>)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	6013      	str	r3, [r2, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000dcc 	.word	0x20000dcc
 8003d1c:	20000dd0 	.word	0x20000dd0

08003d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d26:	f000 f929 	bl	8003f7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <prvCheckForValidListAndQueue+0x60>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d120      	bne.n	8003d74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d32:	4814      	ldr	r0, [pc, #80]	; (8003d84 <prvCheckForValidListAndQueue+0x64>)
 8003d34:	f7fd ffaa 	bl	8001c8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d38:	4813      	ldr	r0, [pc, #76]	; (8003d88 <prvCheckForValidListAndQueue+0x68>)
 8003d3a:	f7fd ffa7 	bl	8001c8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <prvCheckForValidListAndQueue+0x6c>)
 8003d40:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <prvCheckForValidListAndQueue+0x64>)
 8003d42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <prvCheckForValidListAndQueue+0x70>)
 8003d46:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <prvCheckForValidListAndQueue+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <prvCheckForValidListAndQueue+0x74>)
 8003d50:	4a11      	ldr	r2, [pc, #68]	; (8003d98 <prvCheckForValidListAndQueue+0x78>)
 8003d52:	2110      	movs	r1, #16
 8003d54:	200a      	movs	r0, #10
 8003d56:	f7fe f8b1 	bl	8001ebc <xQueueGenericCreateStatic>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <prvCheckForValidListAndQueue+0x60>)
 8003d5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <prvCheckForValidListAndQueue+0x60>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <prvCheckForValidListAndQueue+0x60>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	490b      	ldr	r1, [pc, #44]	; (8003d9c <prvCheckForValidListAndQueue+0x7c>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fd82 	bl	8002878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d74:	f000 f932 	bl	8003fdc <vPortExitCritical>
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000dd4 	.word	0x20000dd4
 8003d84:	20000da4 	.word	0x20000da4
 8003d88:	20000db8 	.word	0x20000db8
 8003d8c:	20000dcc 	.word	0x20000dcc
 8003d90:	20000dd0 	.word	0x20000dd0
 8003d94:	20000e80 	.word	0x20000e80
 8003d98:	20000de0 	.word	0x20000de0
 8003d9c:	08004780 	.word	0x08004780

08003da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3b04      	subs	r3, #4
 8003db0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3b04      	subs	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b04      	subs	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dd0:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <pxPortInitialiseStack+0x54>)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b14      	subs	r3, #20
 8003dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3b20      	subs	r3, #32
 8003de6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	08003df9 	.word	0x08003df9

08003df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <prvTaskExitError+0x54>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d00a      	beq.n	8003e22 <prvTaskExitError+0x2a>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	60fb      	str	r3, [r7, #12]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <prvTaskExitError+0x28>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	60bb      	str	r3, [r7, #8]
}
 8003e34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e36:	bf00      	nop
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0fc      	beq.n	8003e38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <pxCurrentTCBConst2>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e5a:	f380 8809 	msr	PSP, r0
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e6e:	4770      	bx	lr

08003e70 <pxCurrentTCBConst2>:
 8003e70:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e78:	4806      	ldr	r0, [pc, #24]	; (8003e94 <prvPortStartFirstTask+0x1c>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f380 8808 	msr	MSP, r0
 8003e82:	b662      	cpsie	i
 8003e84:	b661      	cpsie	f
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	df00      	svc	0
 8003e90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e92:	bf00      	nop
 8003e94:	e000ed08 	.word	0xe000ed08

08003e98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e9e:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <xPortStartScheduler+0xd0>)
 8003ea0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <xPortStartScheduler+0xd4>)
 8003ec4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003ec8:	2207      	movs	r2, #7
 8003eca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ecc:	e009      	b.n	8003ee2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003ed6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d0ef      	beq.n	8003ece <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1c3 0307 	rsb	r3, r3, #7
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d00a      	beq.n	8003f10 <xPortStartScheduler+0x78>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60bb      	str	r3, [r7, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	e7fe      	b.n	8003f0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003f18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f22:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <xPortStartScheduler+0xd8>)
 8003f24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f2e:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <xPortStartScheduler+0xdc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <xPortStartScheduler+0xdc>)
 8003f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <xPortStartScheduler+0xdc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <xPortStartScheduler+0xdc>)
 8003f40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f46:	f000 f8b9 	bl	80040bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <xPortStartScheduler+0xe0>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f50:	f7ff ff92 	bl	8003e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f54:	f7ff f8b8 	bl	80030c8 <vTaskSwitchContext>
	prvTaskExitError();
 8003f58:	f7ff ff4e 	bl	8003df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000e400 	.word	0xe000e400
 8003f6c:	20000ed0 	.word	0x20000ed0
 8003f70:	20000ed4 	.word	0x20000ed4
 8003f74:	e000ed20 	.word	0xe000ed20
 8003f78:	2000000c 	.word	0x2000000c

08003f7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	607b      	str	r3, [r7, #4]
}
 8003f94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <vPortEnterCritical+0x58>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <vPortEnterCritical+0x58>)
 8003f9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <vPortEnterCritical+0x58>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10f      	bne.n	8003fc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <vPortEnterCritical+0x5c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	603b      	str	r3, [r7, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <vPortEnterCritical+0x4a>
	}
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <vPortExitCritical+0x4c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <vPortExitCritical+0x24>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	607b      	str	r3, [r7, #4]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <vPortExitCritical+0x4c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	4a08      	ldr	r2, [pc, #32]	; (8004028 <vPortExitCritical+0x4c>)
 8004008:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <vPortExitCritical+0x4c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <vPortExitCritical+0x42>
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f383 8811 	msr	BASEPRI, r3
}
 800401c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	2000000c 	.word	0x2000000c
 800402c:	00000000 	.word	0x00000000

08004030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004030:	f3ef 8009 	mrs	r0, PSP
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <pxCurrentTCBConst>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004040:	6010      	str	r0, [r2, #0]
 8004042:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004046:	f04f 0050 	mov.w	r0, #80	; 0x50
 800404a:	f380 8811 	msr	BASEPRI, r0
 800404e:	f7ff f83b 	bl	80030c8 <vTaskSwitchContext>
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f380 8811 	msr	BASEPRI, r0
 800405a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004066:	f380 8809 	msr	PSP, r0
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	4770      	bx	lr

08004070 <pxCurrentTCBConst>:
 8004070:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
}
 8004090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004092:	f7fe ff5b 	bl	8002f4c <xTaskIncrementTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <SysTick_Handler+0x40>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	2300      	movs	r3, #0
 80040a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f383 8811 	msr	BASEPRI, r3
}
 80040ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <vPortSetupTimerInterrupt+0x30>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <vPortSetupTimerInterrupt+0x34>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <vPortSetupTimerInterrupt+0x38>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <vPortSetupTimerInterrupt+0x3c>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <vPortSetupTimerInterrupt+0x40>)
 80040da:	3b01      	subs	r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040de:	4b03      	ldr	r3, [pc, #12]	; (80040ec <vPortSetupTimerInterrupt+0x30>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	e000e010 	.word	0xe000e010
 80040f0:	e000e018 	.word	0xe000e018
 80040f4:	20000000 	.word	0x20000000
 80040f8:	10624dd3 	.word	0x10624dd3
 80040fc:	e000e014 	.word	0xe000e014

08004100 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004106:	f3ef 8305 	mrs	r3, IPSR
 800410a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	d914      	bls.n	800413c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004112:	4a16      	ldr	r2, [pc, #88]	; (800416c <vPortValidateInterruptPriority+0x6c>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <vPortValidateInterruptPriority+0x70>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	7afa      	ldrb	r2, [r7, #11]
 8004122:	429a      	cmp	r2, r3
 8004124:	d20a      	bcs.n	800413c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	607b      	str	r3, [r7, #4]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <vPortValidateInterruptPriority+0x74>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <vPortValidateInterruptPriority+0x78>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d90a      	bls.n	8004162 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	603b      	str	r3, [r7, #0]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <vPortValidateInterruptPriority+0x60>
	}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	e000e3f0 	.word	0xe000e3f0
 8004170:	20000ed0 	.word	0x20000ed0
 8004174:	e000ed0c 	.word	0xe000ed0c
 8004178:	20000ed4 	.word	0x20000ed4

0800417c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004188:	f7fe fe26 	bl	8002dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <pvPortMalloc+0x174>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004194:	f000 f910 	bl	80043b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004198:	4b56      	ldr	r3, [pc, #344]	; (80042f4 <pvPortMalloc+0x178>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 808e 	bne.w	80042c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01d      	beq.n	80041e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041ac:	2208      	movs	r2, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d014      	beq.n	80041e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f023 0307 	bic.w	r3, r3, #7
 80041c4:	3308      	adds	r3, #8
 80041c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <pvPortMalloc+0x6c>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	617b      	str	r3, [r7, #20]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d069      	beq.n	80042c2 <pvPortMalloc+0x146>
 80041ee:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <pvPortMalloc+0x17c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d864      	bhi.n	80042c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041f8:	4b40      	ldr	r3, [pc, #256]	; (80042fc <pvPortMalloc+0x180>)
 80041fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041fc:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <pvPortMalloc+0x180>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004202:	e004      	b.n	800420e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d903      	bls.n	8004220 <pvPortMalloc+0xa4>
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f1      	bne.n	8004204 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <pvPortMalloc+0x174>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004226:	429a      	cmp	r2, r3
 8004228:	d04b      	beq.n	80042c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2208      	movs	r2, #8
 8004230:	4413      	add	r3, r2
 8004232:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	2308      	movs	r3, #8
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	429a      	cmp	r2, r3
 800424a:	d91f      	bls.n	800428c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <pvPortMalloc+0xf8>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	613b      	str	r3, [r7, #16]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004286:	69b8      	ldr	r0, [r7, #24]
 8004288:	f000 f8f8 	bl	800447c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <pvPortMalloc+0x17c>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <pvPortMalloc+0x17c>)
 8004298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800429a:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <pvPortMalloc+0x17c>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b18      	ldr	r3, [pc, #96]	; (8004300 <pvPortMalloc+0x184>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d203      	bcs.n	80042ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <pvPortMalloc+0x17c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <pvPortMalloc+0x184>)
 80042ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <pvPortMalloc+0x178>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042c2:	f7fe fd97 	bl	8002df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <pvPortMalloc+0x16a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <pvPortMalloc+0x168>
	return pvReturn;
 80042e6:	69fb      	ldr	r3, [r7, #28]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20001ae0 	.word	0x20001ae0
 80042f4:	20001aec 	.word	0x20001aec
 80042f8:	20001ae4 	.word	0x20001ae4
 80042fc:	20001ad8 	.word	0x20001ad8
 8004300:	20001ae8 	.word	0x20001ae8

08004304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d048      	beq.n	80043a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004316:	2308      	movs	r3, #8
 8004318:	425b      	negs	r3, r3
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4413      	add	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <vPortFree+0xac>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <vPortFree+0x44>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60fb      	str	r3, [r7, #12]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <vPortFree+0x62>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60bb      	str	r3, [r7, #8]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <vPortFree+0xac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <vPortFree+0xac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	43db      	mvns	r3, r3
 8004386:	401a      	ands	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800438c:	f7fe fd24 	bl	8002dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <vPortFree+0xb0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4413      	add	r3, r2
 800439a:	4a06      	ldr	r2, [pc, #24]	; (80043b4 <vPortFree+0xb0>)
 800439c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800439e:	6938      	ldr	r0, [r7, #16]
 80043a0:	f000 f86c 	bl	800447c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043a4:	f7fe fd26 	bl	8002df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043a8:	bf00      	nop
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20001aec 	.word	0x20001aec
 80043b4:	20001ae4 	.word	0x20001ae4

080043b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <prvHeapInit+0xac>)
 80043c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3307      	adds	r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0307 	bic.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <prvHeapInit+0xac>)
 80043e8:	4413      	add	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <prvHeapInit+0xb0>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <prvHeapInit+0xb0>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004404:	2208      	movs	r2, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <prvHeapInit+0xb4>)
 8004418:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <prvHeapInit+0xb4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <prvHeapInit+0xb4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <prvHeapInit+0xb4>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <prvHeapInit+0xb8>)
 8004446:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a09      	ldr	r2, [pc, #36]	; (8004474 <prvHeapInit+0xbc>)
 800444e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <prvHeapInit+0xc0>)
 8004452:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004456:	601a      	str	r2, [r3, #0]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000ed8 	.word	0x20000ed8
 8004468:	20001ad8 	.word	0x20001ad8
 800446c:	20001ae0 	.word	0x20001ae0
 8004470:	20001ae8 	.word	0x20001ae8
 8004474:	20001ae4 	.word	0x20001ae4
 8004478:	20001aec 	.word	0x20001aec

0800447c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <prvInsertBlockIntoFreeList+0xa8>)
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e002      	b.n	8004490 <prvInsertBlockIntoFreeList+0x14>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d8f7      	bhi.n	800448a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4413      	add	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d108      	bne.n	80044be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	441a      	add	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d118      	bne.n	8004504 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <prvInsertBlockIntoFreeList+0xac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d00d      	beq.n	80044fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e008      	b.n	800450c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <prvInsertBlockIntoFreeList+0xac>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e003      	b.n	800450c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d002      	beq.n	800451a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	20001ad8 	.word	0x20001ad8
 8004528:	20001ae0 	.word	0x20001ae0

0800452c <__libc_init_array>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	2600      	movs	r6, #0
 8004530:	4d0c      	ldr	r5, [pc, #48]	; (8004564 <__libc_init_array+0x38>)
 8004532:	4c0d      	ldr	r4, [pc, #52]	; (8004568 <__libc_init_array+0x3c>)
 8004534:	1b64      	subs	r4, r4, r5
 8004536:	10a4      	asrs	r4, r4, #2
 8004538:	42a6      	cmp	r6, r4
 800453a:	d109      	bne.n	8004550 <__libc_init_array+0x24>
 800453c:	f000 f8f0 	bl	8004720 <_init>
 8004540:	2600      	movs	r6, #0
 8004542:	4d0a      	ldr	r5, [pc, #40]	; (800456c <__libc_init_array+0x40>)
 8004544:	4c0a      	ldr	r4, [pc, #40]	; (8004570 <__libc_init_array+0x44>)
 8004546:	1b64      	subs	r4, r4, r5
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	42a6      	cmp	r6, r4
 800454c:	d105      	bne.n	800455a <__libc_init_array+0x2e>
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	f855 3b04 	ldr.w	r3, [r5], #4
 8004554:	4798      	blx	r3
 8004556:	3601      	adds	r6, #1
 8004558:	e7ee      	b.n	8004538 <__libc_init_array+0xc>
 800455a:	f855 3b04 	ldr.w	r3, [r5], #4
 800455e:	4798      	blx	r3
 8004560:	3601      	adds	r6, #1
 8004562:	e7f2      	b.n	800454a <__libc_init_array+0x1e>
 8004564:	08004860 	.word	0x08004860
 8004568:	08004860 	.word	0x08004860
 800456c:	08004860 	.word	0x08004860
 8004570:	08004864 	.word	0x08004864

08004574 <__retarget_lock_acquire_recursive>:
 8004574:	4770      	bx	lr

08004576 <__retarget_lock_release_recursive>:
 8004576:	4770      	bx	lr

08004578 <memcpy>:
 8004578:	440a      	add	r2, r1
 800457a:	4291      	cmp	r1, r2
 800457c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004580:	d100      	bne.n	8004584 <memcpy+0xc>
 8004582:	4770      	bx	lr
 8004584:	b510      	push	{r4, lr}
 8004586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800458a:	4291      	cmp	r1, r2
 800458c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004590:	d1f9      	bne.n	8004586 <memcpy+0xe>
 8004592:	bd10      	pop	{r4, pc}

08004594 <memset>:
 8004594:	4603      	mov	r3, r0
 8004596:	4402      	add	r2, r0
 8004598:	4293      	cmp	r3, r2
 800459a:	d100      	bne.n	800459e <memset+0xa>
 800459c:	4770      	bx	lr
 800459e:	f803 1b01 	strb.w	r1, [r3], #1
 80045a2:	e7f9      	b.n	8004598 <memset+0x4>

080045a4 <cleanup_glue>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	460c      	mov	r4, r1
 80045a8:	6809      	ldr	r1, [r1, #0]
 80045aa:	4605      	mov	r5, r0
 80045ac:	b109      	cbz	r1, 80045b2 <cleanup_glue+0xe>
 80045ae:	f7ff fff9 	bl	80045a4 <cleanup_glue>
 80045b2:	4621      	mov	r1, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ba:	f000 b869 	b.w	8004690 <_free_r>
	...

080045c0 <_reclaim_reent>:
 80045c0:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <_reclaim_reent+0xb4>)
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4604      	mov	r4, r0
 80045c8:	4283      	cmp	r3, r0
 80045ca:	d051      	beq.n	8004670 <_reclaim_reent+0xb0>
 80045cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045ce:	b143      	cbz	r3, 80045e2 <_reclaim_reent+0x22>
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14a      	bne.n	800466c <_reclaim_reent+0xac>
 80045d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	b111      	cbz	r1, 80045e2 <_reclaim_reent+0x22>
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 f857 	bl	8004690 <_free_r>
 80045e2:	6961      	ldr	r1, [r4, #20]
 80045e4:	b111      	cbz	r1, 80045ec <_reclaim_reent+0x2c>
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f852 	bl	8004690 <_free_r>
 80045ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045ee:	b111      	cbz	r1, 80045f6 <_reclaim_reent+0x36>
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f84d 	bl	8004690 <_free_r>
 80045f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045f8:	b111      	cbz	r1, 8004600 <_reclaim_reent+0x40>
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 f848 	bl	8004690 <_free_r>
 8004600:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004602:	b111      	cbz	r1, 800460a <_reclaim_reent+0x4a>
 8004604:	4620      	mov	r0, r4
 8004606:	f000 f843 	bl	8004690 <_free_r>
 800460a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800460c:	b111      	cbz	r1, 8004614 <_reclaim_reent+0x54>
 800460e:	4620      	mov	r0, r4
 8004610:	f000 f83e 	bl	8004690 <_free_r>
 8004614:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004616:	b111      	cbz	r1, 800461e <_reclaim_reent+0x5e>
 8004618:	4620      	mov	r0, r4
 800461a:	f000 f839 	bl	8004690 <_free_r>
 800461e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004620:	b111      	cbz	r1, 8004628 <_reclaim_reent+0x68>
 8004622:	4620      	mov	r0, r4
 8004624:	f000 f834 	bl	8004690 <_free_r>
 8004628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462a:	b111      	cbz	r1, 8004632 <_reclaim_reent+0x72>
 800462c:	4620      	mov	r0, r4
 800462e:	f000 f82f 	bl	8004690 <_free_r>
 8004632:	69a3      	ldr	r3, [r4, #24]
 8004634:	b1e3      	cbz	r3, 8004670 <_reclaim_reent+0xb0>
 8004636:	4620      	mov	r0, r4
 8004638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800463a:	4798      	blx	r3
 800463c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800463e:	b1b9      	cbz	r1, 8004670 <_reclaim_reent+0xb0>
 8004640:	4620      	mov	r0, r4
 8004642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004646:	f7ff bfad 	b.w	80045a4 <cleanup_glue>
 800464a:	5949      	ldr	r1, [r1, r5]
 800464c:	b941      	cbnz	r1, 8004660 <_reclaim_reent+0xa0>
 800464e:	3504      	adds	r5, #4
 8004650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004652:	2d80      	cmp	r5, #128	; 0x80
 8004654:	68d9      	ldr	r1, [r3, #12]
 8004656:	d1f8      	bne.n	800464a <_reclaim_reent+0x8a>
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f819 	bl	8004690 <_free_r>
 800465e:	e7ba      	b.n	80045d6 <_reclaim_reent+0x16>
 8004660:	680e      	ldr	r6, [r1, #0]
 8004662:	4620      	mov	r0, r4
 8004664:	f000 f814 	bl	8004690 <_free_r>
 8004668:	4631      	mov	r1, r6
 800466a:	e7ef      	b.n	800464c <_reclaim_reent+0x8c>
 800466c:	2500      	movs	r5, #0
 800466e:	e7ef      	b.n	8004650 <_reclaim_reent+0x90>
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	bf00      	nop
 8004674:	20000010 	.word	0x20000010

08004678 <__malloc_lock>:
 8004678:	4801      	ldr	r0, [pc, #4]	; (8004680 <__malloc_lock+0x8>)
 800467a:	f7ff bf7b 	b.w	8004574 <__retarget_lock_acquire_recursive>
 800467e:	bf00      	nop
 8004680:	20001af0 	.word	0x20001af0

08004684 <__malloc_unlock>:
 8004684:	4801      	ldr	r0, [pc, #4]	; (800468c <__malloc_unlock+0x8>)
 8004686:	f7ff bf76 	b.w	8004576 <__retarget_lock_release_recursive>
 800468a:	bf00      	nop
 800468c:	20001af0 	.word	0x20001af0

08004690 <_free_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4605      	mov	r5, r0
 8004694:	2900      	cmp	r1, #0
 8004696:	d040      	beq.n	800471a <_free_r+0x8a>
 8004698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800469c:	1f0c      	subs	r4, r1, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfb8      	it	lt
 80046a2:	18e4      	addlt	r4, r4, r3
 80046a4:	f7ff ffe8 	bl	8004678 <__malloc_lock>
 80046a8:	4a1c      	ldr	r2, [pc, #112]	; (800471c <_free_r+0x8c>)
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	b933      	cbnz	r3, 80046bc <_free_r+0x2c>
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	6014      	str	r4, [r2, #0]
 80046b2:	4628      	mov	r0, r5
 80046b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b8:	f7ff bfe4 	b.w	8004684 <__malloc_unlock>
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d908      	bls.n	80046d2 <_free_r+0x42>
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	1821      	adds	r1, r4, r0
 80046c4:	428b      	cmp	r3, r1
 80046c6:	bf01      	itttt	eq
 80046c8:	6819      	ldreq	r1, [r3, #0]
 80046ca:	685b      	ldreq	r3, [r3, #4]
 80046cc:	1809      	addeq	r1, r1, r0
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	e7ed      	b.n	80046ae <_free_r+0x1e>
 80046d2:	461a      	mov	r2, r3
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b10b      	cbz	r3, 80046dc <_free_r+0x4c>
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x42>
 80046dc:	6811      	ldr	r1, [r2, #0]
 80046de:	1850      	adds	r0, r2, r1
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x6c>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	4401      	add	r1, r0
 80046e8:	1850      	adds	r0, r2, r1
 80046ea:	4283      	cmp	r3, r0
 80046ec:	6011      	str	r1, [r2, #0]
 80046ee:	d1e0      	bne.n	80046b2 <_free_r+0x22>
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4401      	add	r1, r0
 80046f6:	6011      	str	r1, [r2, #0]
 80046f8:	6053      	str	r3, [r2, #4]
 80046fa:	e7da      	b.n	80046b2 <_free_r+0x22>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x74>
 80046fe:	230c      	movs	r3, #12
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	e7d6      	b.n	80046b2 <_free_r+0x22>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428b      	cmp	r3, r1
 800470a:	bf01      	itttt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	1809      	addeq	r1, r1, r0
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	6063      	str	r3, [r4, #4]
 8004716:	6054      	str	r4, [r2, #4]
 8004718:	e7cb      	b.n	80046b2 <_free_r+0x22>
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20001af4 	.word	0x20001af4

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
