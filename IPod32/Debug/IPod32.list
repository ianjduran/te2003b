
IPod32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f60  08006f60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006f60  08006f60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f60  08006f60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037b4  20000074  08006fdc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003828  08006fdc  00023828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a4a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6b  00000000  00000000  00037ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7cb  00000000  00000000  0003de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dca  00000000  00000000  000595eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095cca  00000000  00000000  000713b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010707f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e0  00000000  00000000  001070d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c58 	.word	0x08006c58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006c58 	.word	0x08006c58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <init_lcd_task>:
		.name = "lcdMessageHandle",
};



void init_lcd_task(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	LCD_Init();
 8000164:	f000 fb52 	bl	800080c <LCD_Init>
	lcdMsgHandle = osMessageQueueNew(5, sizeof(LCDData), NULL);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016e:	2005      	movs	r0, #5
 8000170:	f003 fa44 	bl	80035fc <osMessageQueueNew>
 8000174:	4603      	mov	r3, r0
 8000176:	4a04      	ldr	r2, [pc, #16]	; (8000188 <init_lcd_task+0x28>)
 8000178:	6013      	str	r3, [r2, #0]
//	set_lcd("Hello World Hola Ian Hola abiel Hola andy hola diego", "Buenas buenas buenas buenas!");
	set_lcd("Welcome to our Mp3 Player! Let's start!", "Created by Abiel, Ian, Andy and Diego!! ");
 800017a:	4904      	ldr	r1, [pc, #16]	; (800018c <init_lcd_task+0x2c>)
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <init_lcd_task+0x30>)
 800017e:	f000 f8df 	bl	8000340 <set_lcd>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	20000090 	.word	0x20000090
 800018c:	08006c84 	.word	0x08006c84
 8000190:	08006cb0 	.word	0x08006cb0

08000194 <lcd_task>:

void lcd_task(){
 8000194:	b580      	push	{r7, lr}
 8000196:	b0ca      	sub	sp, #296	; 0x128
 8000198:	af00      	add	r7, sp, #0
	init_lcd_task();
 800019a:	f7ff ffe1 	bl	8000160 <init_lcd_task>

	LCDData data;
	memset(data.line1, 0, sizeof(data.line1));
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2280      	movs	r2, #128	; 0x80
 80001a2:	2100      	movs	r1, #0
 80001a4:	4618      	mov	r0, r3
 80001a6:	f006 f853 	bl	8006250 <memset>
	memset(data.line2, 0, sizeof(data.line2));
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	3380      	adds	r3, #128	; 0x80
 80001ae:	2280      	movs	r2, #128	; 0x80
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f006 f84c 	bl	8006250 <memset>
	int line1_char = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	int line2_char = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	int line1_delay_count = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int line2_delay_count = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while(1){
		osStatus_t ret = osMessageQueueGet(lcdMsgHandle, &data, NULL, 0);
 80001d0:	4b59      	ldr	r3, [pc, #356]	; (8000338 <lcd_task+0x1a4>)
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	1d39      	adds	r1, r7, #4
 80001d6:	2300      	movs	r3, #0
 80001d8:	2200      	movs	r2, #0
 80001da:	f003 fb09 	bl	80037f0 <osMessageQueueGet>
 80001de:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		if (ret == osOK){
 80001e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d10e      	bne.n	8000208 <lcd_task+0x74>
			//New message, reset current char
			line1_char = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			line2_char = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			line1_delay_count = 1000000;
 80001f6:	4b51      	ldr	r3, [pc, #324]	; (800033c <lcd_task+0x1a8>)
 80001f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			line2_delay_count = 1000000;
 80001fc:	4b4f      	ldr	r3, [pc, #316]	; (800033c <lcd_task+0x1a8>)
 80001fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			LCD_Clear();
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fc28 	bl	8000a58 <LCD_Write_Cmd>
		}

		size_t line1_size = strlen(data.line1);
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4618      	mov	r0, r3
 800020c:	f7ff ffa0 	bl	8000150 <strlen>
 8000210:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		size_t line2_size = strlen(data.line2);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	3380      	adds	r3, #128	; 0x80
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ff99 	bl	8000150 <strlen>
 800021e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

		//Clear lcd
		//LCD_Clear();
		//LCD_BarGraphic(0,0);

		line1_delay_count++;
 8000222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000226:	3301      	adds	r3, #1
 8000228:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		line2_delay_count++;
 800022c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000230:	3301      	adds	r3, #1
 8000232:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

		if(line1_delay_count >= 250){
 8000236:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800023a:	2bf9      	cmp	r3, #249	; 0xf9
 800023c:	dd38      	ble.n	80002b0 <lcd_task+0x11c>
			//Draw line 1
			LCD_Set_Cursor(1, 0);
 800023e:	2100      	movs	r1, #0
 8000240:	2001      	movs	r0, #1
 8000242:	f000 fc2f 	bl	8000aa4 <LCD_Set_Cursor>
			for(int i = line1_char; i < line1_char + 16 && i < line1_size; i++){
 8000246:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800024a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800024e:	e00f      	b.n	8000270 <lcd_task+0xdc>
				//Send chars
				LCD_Put_Char(data.line1[i]);
 8000250:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000254:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8000258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800025c:	4413      	add	r3, r2
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fc0d 	bl	8000a80 <LCD_Put_Char>
			for(int i = line1_char; i < line1_char + 16 && i < line1_size; i++){
 8000266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800026a:	3301      	adds	r3, #1
 800026c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000270:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000274:	330f      	adds	r3, #15
 8000276:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800027a:	429a      	cmp	r2, r3
 800027c:	dc05      	bgt.n	800028a <lcd_task+0xf6>
 800027e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000282:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000286:	429a      	cmp	r2, r3
 8000288:	d8e2      	bhi.n	8000250 <lcd_task+0xbc>
			}

			//Increment char counts
			line1_char++;
 800028a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800028e:	3301      	adds	r3, #1
 8000290:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if(line1_char + 16 > line1_size){
 8000294:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000298:	3310      	adds	r3, #16
 800029a:	461a      	mov	r2, r3
 800029c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d202      	bcs.n	80002aa <lcd_task+0x116>
				line1_char = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			}


			line1_delay_count = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}

		if(line2_delay_count >= 500){
 80002b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80002b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002b8:	db39      	blt.n	800032e <lcd_task+0x19a>
			//Draw line 2
			LCD_Set_Cursor(2, 0);
 80002ba:	2100      	movs	r1, #0
 80002bc:	2002      	movs	r0, #2
 80002be:	f000 fbf1 	bl	8000aa4 <LCD_Set_Cursor>
			for(int i = line2_char; i < line2_char + 16 && i < line2_size; i++){
 80002c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80002c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80002ca:	e010      	b.n	80002ee <lcd_task+0x15a>
				//Send chars
				LCD_Put_Char(data.line2[i]);
 80002cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80002d0:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 80002d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80002d8:	4413      	add	r3, r2
 80002da:	3380      	adds	r3, #128	; 0x80
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fbce 	bl	8000a80 <LCD_Put_Char>
			for(int i = line2_char; i < line2_char + 16 && i < line2_size; i++){
 80002e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80002e8:	3301      	adds	r3, #1
 80002ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80002ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80002f2:	330f      	adds	r3, #15
 80002f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80002f8:	429a      	cmp	r2, r3
 80002fa:	dc05      	bgt.n	8000308 <lcd_task+0x174>
 80002fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000300:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000304:	429a      	cmp	r2, r3
 8000306:	d8e1      	bhi.n	80002cc <lcd_task+0x138>
			}

			line2_char++;
 8000308:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800030c:	3301      	adds	r3, #1
 800030e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if(line2_char + 16 >= line2_size){
 8000312:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000316:	3310      	adds	r3, #16
 8000318:	461a      	mov	r2, r3
 800031a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800031e:	4293      	cmp	r3, r2
 8000320:	d802      	bhi.n	8000328 <lcd_task+0x194>
				line2_char = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			}

			line2_delay_count = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		}

		osDelay(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f003 f936 	bl	80035a0 <osDelay>
	while(1){
 8000334:	e74c      	b.n	80001d0 <lcd_task+0x3c>
 8000336:	bf00      	nop
 8000338:	20000090 	.word	0x20000090
 800033c:	000f4240 	.word	0x000f4240

08000340 <set_lcd>:
	}
}

osStatus_t set_lcd(char *line1, char *line2){
 8000340:	b580      	push	{r7, lr}
 8000342:	b0c2      	sub	sp, #264	; 0x108
 8000344:	af00      	add	r7, sp, #0
 8000346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800034a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800034e:	6018      	str	r0, [r3, #0]
 8000350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000358:	6019      	str	r1, [r3, #0]
	LCDData data;
	strncpy(data.line1, line1, sizeof(data.line1));
 800035a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800035e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000362:	f107 0008 	add.w	r0, r7, #8
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	f006 f8bb 	bl	80064e4 <strncpy>
	strncpy(data.line2, line2, sizeof(data.line2));
 800036e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000376:	f107 0208 	add.w	r2, r7, #8
 800037a:	f102 0080 	add.w	r0, r2, #128	; 0x80
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	f006 f8af 	bl	80064e4 <strncpy>
	return osMessageQueuePut(lcdMsgHandle, &data, NULL, 0);
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <set_lcd+0x64>)
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	f107 0108 	add.w	r1, r7, #8
 800038e:	2300      	movs	r3, #0
 8000390:	2200      	movs	r2, #0
 8000392:	f003 f9b9 	bl	8003708 <osMessageQueuePut>
 8000396:	4603      	mov	r3, r0
}
 8000398:	4618      	mov	r0, r3
 800039a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000090 	.word	0x20000090

080003a8 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	460a      	mov	r2, r1
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	4613      	mov	r3, r2
 80003b6:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	480d      	ldr	r0, [pc, #52]	; (8000400 <Write_MFRC522+0x58>)
 80003cc:	f001 fbd4 	bl	8001b78 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 80003d0:	f107 010f 	add.w	r1, r7, #15
 80003d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003d8:	2201      	movs	r2, #1
 80003da:	480a      	ldr	r0, [pc, #40]	; (8000404 <Write_MFRC522+0x5c>)
 80003dc:	f002 f89e 	bl	800251c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 80003e0:	1db9      	adds	r1, r7, #6
 80003e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003e6:	2201      	movs	r2, #1
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <Write_MFRC522+0x5c>)
 80003ea:	f002 f897 	bl	800251c <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <Write_MFRC522+0x58>)
 80003f4:	f001 fbc0 	bl	8001b78 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40010c00 	.word	0x40010c00
 8000404:	20000094 	.word	0x20000094

08000408 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	b25b      	sxtb	r3, r3
 8000418:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800041c:	b25b      	sxtb	r3, r3
 800041e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000422:	b25b      	sxtb	r3, r3
 8000424:	b2db      	uxtb	r3, r3
 8000426:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2140      	movs	r1, #64	; 0x40
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <Read_MFRC522+0x60>)
 800042e:	f001 fba3 	bl	8001b78 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000432:	f107 010e 	add.w	r1, r7, #14
 8000436:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800043a:	2201      	movs	r2, #1
 800043c:	480b      	ldr	r0, [pc, #44]	; (800046c <Read_MFRC522+0x64>)
 800043e:	f002 f86d 	bl	800251c <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8000442:	f107 010f 	add.w	r1, r7, #15
 8000446:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800044a:	2201      	movs	r2, #1
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <Read_MFRC522+0x64>)
 800044e:	f002 f9a1 	bl	8002794 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	4804      	ldr	r0, [pc, #16]	; (8000468 <Read_MFRC522+0x60>)
 8000458:	f001 fb8e 	bl	8001b78 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800045c:	7bfb      	ldrb	r3, [r7, #15]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00
 800046c:	20000094 	.word	0x20000094

08000470 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffc0 	bl	8000408 <Read_MFRC522>
 8000488:	4603      	mov	r3, r0
 800048a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800048c:	7bfa      	ldrb	r2, [r7, #15]
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	4313      	orrs	r3, r2
 8000492:	b2da      	uxtb	r2, r3
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4611      	mov	r1, r2
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff85 	bl	80003a8 <Write_MFRC522>
}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b084      	sub	sp, #16
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	4603      	mov	r3, r0
 80004ae:	460a      	mov	r2, r1
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	4613      	mov	r3, r2
 80004b4:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffa5 	bl	8000408 <Read_MFRC522>
 80004be:	4603      	mov	r3, r0
 80004c0:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80004c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004c6:	43db      	mvns	r3, r3
 80004c8:	b25a      	sxtb	r2, r3
 80004ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ce:	4013      	ands	r3, r2
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff65 	bl	80003a8 <Write_MFRC522>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 80004ea:	2103      	movs	r1, #3
 80004ec:	2014      	movs	r0, #20
 80004ee:	f7ff ffbf 	bl	8000470 <SetBitMask>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80004fa:	210f      	movs	r1, #15
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ff53 	bl	80003a8 <Write_MFRC522>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}

08000506 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 800050a:	f7ff fff4 	bl	80004f6 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	202a      	movs	r0, #42	; 0x2a
 8000512:	f7ff ff49 	bl	80003a8 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000516:	21a9      	movs	r1, #169	; 0xa9
 8000518:	202b      	movs	r0, #43	; 0x2b
 800051a:	f7ff ff45 	bl	80003a8 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800051e:	2103      	movs	r1, #3
 8000520:	202d      	movs	r0, #45	; 0x2d
 8000522:	f7ff ff41 	bl	80003a8 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8000526:	21e8      	movs	r1, #232	; 0xe8
 8000528:	202c      	movs	r0, #44	; 0x2c
 800052a:	f7ff ff3d 	bl	80003a8 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	2015      	movs	r0, #21
 8000532:	f7ff ff39 	bl	80003a8 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8000536:	213d      	movs	r1, #61	; 0x3d
 8000538:	2011      	movs	r0, #17
 800053a:	f7ff ff35 	bl	80003a8 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 800053e:	f7ff ffd2 	bl	80004e6 <AntennaOn>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af02      	add	r7, sp, #8
 800054c:	4603      	mov	r3, r0
 800054e:	6039      	str	r1, [r7, #0]
 8000550:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8000552:	2107      	movs	r1, #7
 8000554:	200d      	movs	r0, #13
 8000556:	f7ff ff27 	bl	80003a8 <Write_MFRC522>

  TagType[0] = reqMode;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2201      	movs	r2, #1
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	200c      	movs	r0, #12
 800056e:	f000 f80f 	bl	8000590 <MFRC522_ToCard>
 8000572:	4603      	mov	r3, r0
 8000574:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <MFRC522_Request+0x3c>
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	2b10      	cmp	r3, #16
 8000580:	d001      	beq.n	8000586 <MFRC522_Request+0x40>
    status = MI_ERR;
 8000582:	2302      	movs	r3, #2
 8000584:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4603      	mov	r3, r0
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	4613      	mov	r3, r2
 80005a0:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 80005a2:	2302      	movs	r3, #2
 80005a4:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 80005a6:	2300      	movs	r3, #0
 80005a8:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b0c      	cmp	r3, #12
 80005b2:	d006      	beq.n	80005c2 <MFRC522_ToCard+0x32>
 80005b4:	2b0e      	cmp	r3, #14
 80005b6:	d109      	bne.n	80005cc <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 80005b8:	2312      	movs	r3, #18
 80005ba:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 80005bc:	2310      	movs	r3, #16
 80005be:	777b      	strb	r3, [r7, #29]
        break;
 80005c0:	e005      	b.n	80005ce <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 80005c2:	2377      	movs	r3, #119	; 0x77
 80005c4:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 80005c6:	2330      	movs	r3, #48	; 0x30
 80005c8:	777b      	strb	r3, [r7, #29]
        break;
 80005ca:	e000      	b.n	80005ce <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 80005cc:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 80005ce:	7fbb      	ldrb	r3, [r7, #30]
 80005d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	2002      	movs	r0, #2
 80005da:	f7ff fee5 	bl	80003a8 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	2004      	movs	r0, #4
 80005e2:	f7ff ff60 	bl	80004a6 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	200a      	movs	r0, #10
 80005ea:	f7ff ff41 	bl	8000470 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 80005ee:	2100      	movs	r1, #0
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff fed9 	bl	80003a8 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	e00a      	b.n	8000612 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	2009      	movs	r0, #9
 8000608:	f7ff fece 	bl	80003a8 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	3301      	adds	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	69ba      	ldr	r2, [r7, #24]
 8000616:	429a      	cmp	r2, r3
 8000618:	d3f0      	bcc.n	80005fc <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4619      	mov	r1, r3
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff fec2 	bl	80003a8 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b0c      	cmp	r3, #12
 8000628:	d103      	bne.n	8000632 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	200d      	movs	r0, #13
 800062e:	f7ff ff1f 	bl	8000470 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000632:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000636:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8000638:	2004      	movs	r0, #4
 800063a:	f7ff fee5 	bl	8000408 <Read_MFRC522>
 800063e:	4603      	mov	r3, r0
 8000640:	773b      	strb	r3, [r7, #28]
    i--;
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	3b01      	subs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00a      	beq.n	8000664 <MFRC522_ToCard+0xd4>
 800064e:	7f3b      	ldrb	r3, [r7, #28]
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d105      	bne.n	8000664 <MFRC522_ToCard+0xd4>
 8000658:	7f3a      	ldrb	r2, [r7, #28]
 800065a:	7f7b      	ldrb	r3, [r7, #29]
 800065c:	4013      	ands	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0e9      	beq.n	8000638 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	200d      	movs	r0, #13
 8000668:	f7ff ff1d 	bl	80004a6 <ClearBitMask>

  if (i != 0)
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d052      	beq.n	8000718 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff fec8 	bl	8000408 <Read_MFRC522>
 8000678:	4603      	mov	r3, r0
 800067a:	f003 031b 	and.w	r3, r3, #27
 800067e:	2b00      	cmp	r3, #0
 8000680:	d148      	bne.n	8000714 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8000686:	7f3a      	ldrb	r2, [r7, #28]
 8000688:	7fbb      	ldrb	r3, [r7, #30]
 800068a:	4013      	ands	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8000696:	2301      	movs	r3, #1
 8000698:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b0c      	cmp	r3, #12
 800069e:	d13b      	bne.n	8000718 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f7ff feb1 	bl	8000408 <Read_MFRC522>
 80006a6:	4603      	mov	r3, r0
 80006a8:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 80006aa:	200c      	movs	r0, #12
 80006ac:	f7ff feac 	bl	8000408 <Read_MFRC522>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 80006be:	7f3b      	ldrb	r3, [r7, #28]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	00da      	lsls	r2, r3, #3
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	4413      	add	r3, r2
 80006c8:	461a      	mov	r2, r3
 80006ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e004      	b.n	80006da <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 80006d0:	7f3b      	ldrb	r3, [r7, #28]
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	461a      	mov	r2, r3
 80006d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d8:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 80006da:	7f3b      	ldrb	r3, [r7, #28]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <MFRC522_ToCard+0x154>
        {
          n = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 80006e4:	7f3b      	ldrb	r3, [r7, #28]
 80006e6:	2b10      	cmp	r3, #16
 80006e8:	d901      	bls.n	80006ee <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 80006ea:	2310      	movs	r3, #16
 80006ec:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	e00a      	b.n	800070a <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	18d4      	adds	r4, r2, r3
 80006fa:	2009      	movs	r0, #9
 80006fc:	f7ff fe84 	bl	8000408 <Read_MFRC522>
 8000700:	4603      	mov	r3, r0
 8000702:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3301      	adds	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	7f3b      	ldrb	r3, [r7, #28]
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	429a      	cmp	r2, r3
 8000710:	d3f0      	bcc.n	80006f4 <MFRC522_ToCard+0x164>
 8000712:	e001      	b.n	8000718 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8000714:	2302      	movs	r3, #2
 8000716:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8000718:	7ffb      	ldrb	r3, [r7, #31]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}

08000722 <rfid_task>:

#include "RFIDTask.h"
#include "cmsis_os2.h"
#include "MFRC522.h"

void rfid_task(void *params){
 8000722:	b580      	push	{r7, lr}
 8000724:	b088      	sub	sp, #32
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	MFRC522_Init();
 800072a:	f7ff feec 	bl	8000506 <MFRC522_Init>
	uint8_t status = Read_MFRC522(VersionReg);
 800072e:	2037      	movs	r0, #55	; 0x37
 8000730:	f7ff fe6a 	bl	8000408 <Read_MFRC522>
 8000734:	4603      	mov	r3, r0
 8000736:	77fb      	strb	r3, [r7, #31]


	uint8_t buf[MAX_LEN + 1];
	for(;;){
		uint8_t ret = MFRC522_Request(PICC_REQIDL, buf);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	2026      	movs	r0, #38	; 0x26
 8000740:	f7ff ff01 	bl	8000546 <MFRC522_Request>
 8000744:	4603      	mov	r3, r0
 8000746:	77bb      	strb	r3, [r7, #30]
		if(ret == 0){
 8000748:	7fbb      	ldrb	r3, [r7, #30]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <rfid_task+0x32>
			osDelay(10);
 800074e:	200a      	movs	r0, #10
 8000750:	f002 ff26 	bl	80035a0 <osDelay>
		}
		osDelay(100);
 8000754:	2064      	movs	r0, #100	; 0x64
 8000756:	f002 ff23 	bl	80035a0 <osDelay>
	for(;;){
 800075a:	e7ed      	b.n	8000738 <rfid_task+0x16>

0800075c <USER_TIM2_Delay>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};


// Timer delay
void USER_TIM2_Delay(uint16_t x, uint16_t y){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	80fb      	strh	r3, [r7, #6]
 8000768:	4613      	mov	r3, r2
 800076a:	80bb      	strh	r3, [r7, #4]
	TIM2->SMCR &= ~TIM_SMCR_ECE		// External clock 2 mode disabled
 800076c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800077a:	f023 0307 	bic.w	r3, r3, #7
 800077e:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;	// slave mode disabled / internal clock

	// Timer 2 control register 1
	TIM2->CR1 &= ~TIM_CR1_CMS 		//
 8000780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800078e:	6013      	str	r3, [r2, #0]
			  &	 ~TIM_CR1_DIR
			  &	 ~TIM_CR1_URS
			  &	 ~TIM_CR1_UDIS
			  &	 ~TIM_CR1_CEN;
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079e:	6013      	str	r3, [r2, #0]

	TIM2->PSC = x;
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = y;
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6153      	str	r3, [r2, #20]
	TIM2->SR  &= ~TIM_SR_UIF;
 80007c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]
	while((TIM2->SR & TIM_SR_UIF) == 0){
 80007e0:	bf00      	nop
 80007e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0f8      	beq.n	80007e2 <USER_TIM2_Delay+0x86>

	}

	TIM2->CR1 &= ~TIM_CR1_CEN;
 80007f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
	...

0800080c <LCD_Init>:

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
	char const *p;

	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN; //		I/O port B clock enabled
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <LCD_Init+0x16c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a58      	ldr	r2, [pc, #352]	; (8000978 <LCD_Init+0x16c>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6193      	str	r3, [r2, #24]

	// Configuracion de todos los pines hacia el LCD
	/* As general purpose output push-pull, 10 MHz speed
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	*/
	GPIOB->CRH	&= ~GPIO_CRH_CNF12 & ~GPIO_CRH_MODE12_1;
 800081e:	4b57      	ldr	r3, [pc, #348]	; (800097c <LCD_Init+0x170>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a56      	ldr	r2, [pc, #344]	; (800097c <LCD_Init+0x170>)
 8000824:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000828:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE12_0;
 800082a:	4b54      	ldr	r3, [pc, #336]	; (800097c <LCD_Init+0x170>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4a53      	ldr	r2, [pc, #332]	; (800097c <LCD_Init+0x170>)
 8000830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000834:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000836:	4b51      	ldr	r3, [pc, #324]	; (800097c <LCD_Init+0x170>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a50      	ldr	r2, [pc, #320]	; (800097c <LCD_Init+0x170>)
 800083c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000840:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE13_0;
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <LCD_Init+0x170>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4a4d      	ldr	r2, [pc, #308]	; (800097c <LCD_Init+0x170>)
 8000848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800084c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF14 & ~GPIO_CRH_MODE14_1;
 800084e:	4b4b      	ldr	r3, [pc, #300]	; (800097c <LCD_Init+0x170>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a4a      	ldr	r2, [pc, #296]	; (800097c <LCD_Init+0x170>)
 8000854:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000858:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE14_0;
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <LCD_Init+0x170>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4a47      	ldr	r2, [pc, #284]	; (800097c <LCD_Init+0x170>)
 8000860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000864:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000866:	4b45      	ldr	r3, [pc, #276]	; (800097c <LCD_Init+0x170>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	4a44      	ldr	r2, [pc, #272]	; (800097c <LCD_Init+0x170>)
 800086c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000870:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <LCD_Init+0x170>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	4a41      	ldr	r2, [pc, #260]	; (800097c <LCD_Init+0x170>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF10 & ~GPIO_CRH_MODE10_1;
 800087e:	4b3f      	ldr	r3, [pc, #252]	; (800097c <LCD_Init+0x170>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a3e      	ldr	r2, [pc, #248]	; (800097c <LCD_Init+0x170>)
 8000884:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000888:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE10_0;
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <LCD_Init+0x170>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a3b      	ldr	r2, [pc, #236]	; (800097c <LCD_Init+0x170>)
 8000890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000894:	6053      	str	r3, [r2, #4]

	GPIOB->CRL	&= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <LCD_Init+0x170>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a38      	ldr	r2, [pc, #224]	; (800097c <LCD_Init+0x170>)
 800089c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80008a0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE1_0;
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <LCD_Init+0x170>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a35      	ldr	r2, [pc, #212]	; (800097c <LCD_Init+0x170>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6013      	str	r3, [r2, #0]

	GPIOB->CRL	&= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <LCD_Init+0x170>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a32      	ldr	r2, [pc, #200]	; (800097c <LCD_Init+0x170>)
 80008b4:	f023 030e 	bic.w	r3, r3, #14
 80008b8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE0_0;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <LCD_Init+0x170>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <LCD_Init+0x170>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]

	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <LCD_Init+0x170>)
 80008c8:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <LCD_Init+0x174>)
 80008ca:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	USER_TIM2_Delay(30, 36000); //		delay of 15ms
 80008cc:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80008d0:	201e      	movs	r0, #30
 80008d2:	f7ff ff43 	bl	800075c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <LCD_Init+0x170>)
 80008d8:	4a29      	ldr	r2, [pc, #164]	; (8000980 <LCD_Init+0x174>)
 80008da:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80008dc:	f000 f950 	bl	8000b80 <LCD_Pulse_EN>
	USER_TIM2_Delay(4, 59039);//		delay of 4.1ms
 80008e0:	f24e 619f 	movw	r1, #59039	; 0xe69f
 80008e4:	2004      	movs	r0, #4
 80008e6:	f7ff ff39 	bl	800075c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <LCD_Init+0x170>)
 80008ec:	4a24      	ldr	r2, [pc, #144]	; (8000980 <LCD_Init+0x174>)
 80008ee:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80008f0:	f000 f946 	bl	8000b80 <LCD_Pulse_EN>
	USER_TIM2_Delay(0, 7199);//     delay of 100us
 80008f4:	f641 411f 	movw	r1, #7199	; 0x1c1f
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff ff2f 	bl	800075c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <LCD_Init+0x170>)
 8000900:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <LCD_Init+0x174>)
 8000902:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000904:	f000 f93c 	bl	8000b80 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que el LCD este operativo
 8000908:	bf00      	nop
 800090a:	f000 f8f3 	bl	8000af4 <LCD_Busy>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1fa      	bne.n	800090a <LCD_Init+0xfe>
	GPIOB->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <LCD_Init+0x170>)
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <LCD_Init+0x178>)
 8000918:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800091a:	f000 f931 	bl	8000b80 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que se complete
 800091e:	bf00      	nop
 8000920:	f000 f8e8 	bl	8000af4 <LCD_Busy>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1fa      	bne.n	8000920 <LCD_Init+0x114>
	LCD_Write_Cmd( 0x28U );//					establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f000 f894 	bl	8000a58 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//					enciende el LCD sin cursor
 8000930:	200c      	movs	r0, #12
 8000932:	f000 f891 	bl	8000a58 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//					inicializa cursor
 8000936:	2006      	movs	r0, #6
 8000938:	f000 f88e 	bl	8000a58 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f000 f88b 	bl	8000a58 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <LCD_Init+0x17c>)
 8000944:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	e00a      	b.n	8000962 <LCD_Init+0x156>
		LCD_Put_Char( *p );
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f895 	bl	8000a80 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b3f      	cmp	r3, #63	; 0x3f
 8000966:	d9f1      	bls.n	800094c <LCD_Init+0x140>

	LCD_Write_Cmd( 0x80 );
 8000968:	2080      	movs	r0, #128	; 0x80
 800096a:	f000 f875 	bl	8000a58 <LCD_Write_Cmd>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	40010c00 	.word	0x40010c00
 8000980:	c0003000 	.word	0xc0003000
 8000984:	d0002000 	.word	0xd0002000
 8000988:	08006d6c 	.word	0x08006d6c

0800098c <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//						Bit[0]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <LCD_Out_Data4+0x1e>
		GPIOB->BSRR	=	1U << LCD_D4_PIN_HIGH;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	e003      	b.n	80009b2 <LCD_Out_Data4+0x26>
	else
		GPIOB->BSRR	=	1U << LCD_D4_PIN_LOW;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009b0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//						Bit[1]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <LCD_Out_Data4+0x3a>
		GPIOB->BSRR	=	1U << LCD_D5_PIN_HIGH;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	e003      	b.n	80009ce <LCD_Out_Data4+0x42>
	else
		GPIOB->BSRR	=	1U << LCD_D5_PIN_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009cc:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//						Bit[2]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <LCD_Out_Data4+0x56>
		GPIOB->BSRR	=	1U << LCD_D6_PIN_HIGH;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	e003      	b.n	80009ea <LCD_Out_Data4+0x5e>
	else
		GPIOB->BSRR	=	1U << LCD_D6_PIN_LOW;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//						Bit[3]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <LCD_Out_Data4+0x72>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_HIGH;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <LCD_Out_Data4+0x84>)
 80009f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009fa:	611a      	str	r2, [r3, #16]
	else
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 80009fc:	e003      	b.n	8000a06 <LCD_Out_Data4+0x7a>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <LCD_Out_Data4+0x84>)
 8000a00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a04:	611a      	str	r2, [r3, #16]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	40010c00 	.word	0x40010c00

08000a14 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	091b      	lsrs	r3, r3, #4
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ffb1 	bl	800098c <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000a2a:	f000 f8a9 	bl	8000b80 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffa8 	bl	800098c <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000a3c:	f000 f8a0 	bl	8000b80 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000a40:	bf00      	nop
 8000a42:	f000 f857 	bl	8000af4 <LCD_Busy>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1fa      	bne.n	8000a42 <LCD_Write_Byte+0x2e>
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	=	1U << LCD_RS_PIN_LOW;//					RS=0 (seleccion de comando)
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LCD_Write_Cmd+0x24>)
 8000a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a68:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffd1 	bl	8000a14 <LCD_Write_Byte>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010c00 	.word	0x40010c00

08000a80 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	= 1U << LCD_RS_PIN_HIGH;//				RS=1 (seleccion de caracteres)
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <LCD_Put_Char+0x20>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte(c);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffbe 	bl	8000a14 <LCD_Write_Byte>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <LCD_Set_Cursor+0x1c>
		column--;
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <LCD_Set_Cursor+0x28>
		line--;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40 ) + column;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	019b      	lsls	r3, r3, #6
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	3b80      	subs	r3, #128	; 0x80
 8000ae2:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ffb6 	bl	8000a58 <LCD_Write_Cmd>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	/* Configuracion de PB15_D7 as input floating
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */
	GPIOB->CRH &= ~GPIO_CRH_CNF15_1 & ~GPIO_CRH_MODE15;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <LCD_Busy+0x80>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <LCD_Busy+0x80>)
 8000afe:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8000b02:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_0;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <LCD_Busy+0x80>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <LCD_Busy+0x80>)
 8000b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b0e:	6053      	str	r3, [r2, #4]
	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_RS_PIN_LOW
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <LCD_Busy+0x80>)
 8000b12:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <LCD_Busy+0x84>)
 8000b14:	611a      	str	r2, [r3, #16]
				|	1U << LCD_RW_PIN_HIGH
				|	1U << LCD_EN_PIN_HIGH;

	USER_TIM2_Delay(0, 7199);//      delay of 100us
 8000b16:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe1e 	bl	800075c <USER_TIM2_Delay>
	if( ( GPIOB->IDR & 0x00008000U ) ){//					if PB15_D7 is set, then
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <LCD_Busy+0x80>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d010      	beq.n	8000b4e <LCD_Busy+0x5a>
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <LCD_Busy+0x80>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <LCD_Busy+0x88>)
 8000b30:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <LCD_Busy+0x80>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <LCD_Busy+0x80>)
 8000b38:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000b3c:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <LCD_Busy+0x80>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <LCD_Busy+0x80>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <LCD_Busy+0x7a>
	} else {
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <LCD_Busy+0x80>)
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LCD_Busy+0x88>)
 8000b52:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <LCD_Busy+0x80>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <LCD_Busy+0x80>)
 8000b5a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000b5e:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <LCD_Busy+0x80>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <LCD_Busy+0x80>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 0;
 8000b6c:	2300      	movs	r3, #0
	}
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	00010402 	.word	0x00010402
 8000b7c:	04020000 	.word	0x04020000

08000b80 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	1U << LCD_EN_PIN_HIGH;//				habilita pin EN ON
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LCD_Pulse_EN+0x24>)
 8000b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8a:	611a      	str	r2, [r3, #16]
	USER_TIM2_Delay(0, 7599);//      delay of 50us
 8000b8c:	f641 51af 	movw	r1, #7599	; 0x1daf
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff fde3 	bl	800075c <USER_TIM2_Delay>
	GPIOB->BSRR	=	1U << LCD_EN_PIN_LOW;//					habilita pin EN OFF
 8000b96:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <LCD_Pulse_EN+0x24>)
 8000b98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b9c:	611a      	str	r2, [r3, #16]

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010c00 	.word	0x40010c00

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fd4e 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f87c 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f8f6 	bl	8000da4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bb8:	f000 f8be 	bl	8000d38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000bbc:	f000 f9d4 	bl	8000f68 <USER_RCC_Init>
  USER_GPIO_Init();
 8000bc0:	f000 f9e8 	bl	8000f94 <USER_GPIO_Init>
  USER_USART1_Init();
 8000bc4:	f000 f938 	bl	8000e38 <USER_USART1_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc8:	f002 fbda 	bl	8003380 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  inputQueueHandle = osMessageQueueNew(20, sizeof(uint8_t), &inputQueue_attributes);
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <main+0xac>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f002 fd13 	bl	80035fc <osMessageQueueNew>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <main+0xb0>)
 8000bda:	6013      	str	r3, [r2, #0]
  rpiInQueueHandle = osMessageQueueNew(25, sizeof(uint8_t), &rpiInQueue_attributes);
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <main+0xb4>)
 8000bde:	2101      	movs	r1, #1
 8000be0:	2019      	movs	r0, #25
 8000be2:	f002 fd0b 	bl	80035fc <osMessageQueueNew>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <main+0xb8>)
 8000bea:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <main+0xbc>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	481d      	ldr	r0, [pc, #116]	; (8000c68 <main+0xc0>)
 8000bf2:	f002 fc2b 	bl	800344c <osThreadNew>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <main+0xc4>)
 8000bfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  lcdTaskHandle = osThreadNew(lcd_task, NULL, &lcdTask_attributes);
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <main+0xc8>)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <main+0xcc>)
 8000c02:	f002 fc23 	bl	800344c <osThreadNew>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <main+0xd0>)
 8000c0a:	6013      	str	r3, [r2, #0]
  txTaskHandle = osThreadNew(transmit_data_task, NULL, &txTask_attributes);
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <main+0xd4>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	481b      	ldr	r0, [pc, #108]	; (8000c80 <main+0xd8>)
 8000c12:	f002 fc1b 	bl	800344c <osThreadNew>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <main+0xdc>)
 8000c1a:	6013      	str	r3, [r2, #0]
  rxTaskHandle = osThreadNew(receive_data_task, NULL, &rxTask_attributes);
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <main+0xe0>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <main+0xe4>)
 8000c22:	f002 fc13 	bl	800344c <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <main+0xe8>)
 8000c2a:	6013      	str	r3, [r2, #0]
  pollKeypadTaskHandle = osThreadNew(poll_keyboard_button_task, NULL, &pollKeypad_attributes);
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <main+0xec>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4819      	ldr	r0, [pc, #100]	; (8000c98 <main+0xf0>)
 8000c32:	f002 fc0b 	bl	800344c <osThreadNew>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <main+0xf4>)
 8000c3a:	6013      	str	r3, [r2, #0]
  rfidTaskHandle = osThreadNew(rfid_task, NULL, &rfidTask_attributes);
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <main+0xf8>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <main+0xfc>)
 8000c42:	f002 fc03 	bl	800344c <osThreadNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <main+0x100>)
 8000c4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c4c:	f002 fbca 	bl	80033e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <main+0xa8>
 8000c52:	bf00      	nop
 8000c54:	08006e84 	.word	0x08006e84
 8000c58:	20000104 	.word	0x20000104
 8000c5c:	08006e9c 	.word	0x08006e9c
 8000c60:	20000108 	.word	0x20000108
 8000c64:	08006dac 	.word	0x08006dac
 8000c68:	08001051 	.word	0x08001051
 8000c6c:	200000ec 	.word	0x200000ec
 8000c70:	08006e3c 	.word	0x08006e3c
 8000c74:	08000195 	.word	0x08000195
 8000c78:	200000fc 	.word	0x200000fc
 8000c7c:	08006e18 	.word	0x08006e18
 8000c80:	080015cd 	.word	0x080015cd
 8000c84:	200000f8 	.word	0x200000f8
 8000c88:	08006df4 	.word	0x08006df4
 8000c8c:	080011fd 	.word	0x080011fd
 8000c90:	200000f4 	.word	0x200000f4
 8000c94:	08006dd0 	.word	0x08006dd0
 8000c98:	08001101 	.word	0x08001101
 8000c9c:	200000f0 	.word	0x200000f0
 8000ca0:	08006e60 	.word	0x08006e60
 8000ca4:	08000723 	.word	0x08000723
 8000ca8:	20000100 	.word	0x20000100

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 fac8 	bl	8006250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 ff57 	bl	8001ba8 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d00:	f000 f9c0 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 f9c4 	bl	80020ac <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d2a:	f000 f9ab 	bl	8001084 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3740      	adds	r7, #64	; 0x40
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <MX_SPI1_Init+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d6c:	2228      	movs	r2, #40	; 0x28
 8000d6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d84:	220a      	movs	r2, #10
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d8a:	f001 fb43 	bl	8002414 <HAL_SPI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d94:	f000 f976 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000094 	.word	0x20000094
 8000da0:	40013000 	.word	0x40013000

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0320 	and.w	r3, r3, #32
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_GPIO_Init+0x8c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2140      	movs	r1, #64	; 0x40
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0x90>)
 8000e06:	f000 feb7 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin;
 8000e0a:	2340      	movs	r3, #64	; 0x40
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC522_CS_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_GPIO_Init+0x90>)
 8000e22:	f000 fd25 	bl	8001870 <HAL_GPIO_Init>

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <USER_USART1_Init>:

/* USER CODE BEGIN 4 */
void USER_USART1_Init(void) {
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e3e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000e42:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e4a:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 8000e4e:	f023 0313 	bic.w	r3, r3, #19
 8000e52:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e5e:	f043 030c 	orr.w	r3, r3, #12
 8000e62:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <USER_USART1_Init+0x40>)
 8000e6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e6e:	6113      	str	r3, [r2, #16]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40013800 	.word	0x40013800

08000e7c <config_pin>:

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 8000e8c:	78bb      	ldrb	r3, [r7, #2]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d104      	bne.n	8000e9c <config_pin+0x20>
		//Input
		modeBits = 0b00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73bb      	strb	r3, [r7, #14]
 8000e9a:	e014      	b.n	8000ec6 <config_pin+0x4a>
	} else if(mode == 1){
 8000e9c:	78bb      	ldrb	r3, [r7, #2]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d104      	bne.n	8000eac <config_pin+0x30>
		//Output
		modeBits = 0b01;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73bb      	strb	r3, [r7, #14]
 8000eaa:	e00c      	b.n	8000ec6 <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 8000ee6:	78bb      	ldrb	r3, [r7, #2]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	d81a      	bhi.n	8000f22 <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	78fa      	ldrb	r2, [r7, #3]
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	43d2      	mvns	r2, r2
 8000efc:	401a      	ands	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	7b78      	ldrb	r0, [r7, #13]
 8000f10:	78fa      	ldrb	r2, [r7, #3]
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	fa00 f202 	lsl.w	r2, r0, r2
 8000f18:	400a      	ands	r2, r1
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 8000f20:	e01c      	b.n	8000f5c <config_pin+0xe0>
		pin -= 8;
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	3b08      	subs	r3, #8
 8000f26:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	210f      	movs	r1, #15
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	43d2      	mvns	r2, r2
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	210f      	movs	r1, #15
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	7b78      	ldrb	r0, [r7, #13]
 8000f4c:	78fa      	ldrb	r2, [r7, #3]
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	fa00 f202 	lsl.w	r2, r0, r2
 8000f54:	400a      	ands	r2, r1
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <USER_RCC_Init>:

void USER_RCC_Init(void){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <USER_RCC_Init+0x28>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <USER_RCC_Init+0x28>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <USER_RCC_Init+0x28>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <USER_RCC_Init+0x28>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	f043 0314 	orr.w	r3, r3, #20
 8000f86:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN;
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000

08000f94 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a2a      	ldr	r2, [pc, #168]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000f9e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000fa2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000faa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000fae:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000fba:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fce:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <USER_GPIO_Init+0xb8>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <USER_GPIO_Init+0xb8>)
 8000fd6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000fda:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <USER_GPIO_Init+0xb8>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <USER_GPIO_Init+0xb8>)
 8000fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fe6:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000fe8:	2202      	movs	r2, #2
 8000fea:	2100      	movs	r1, #0
 8000fec:	4816      	ldr	r0, [pc, #88]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000fee:	f7ff ff45 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 1, 2);
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <USER_GPIO_Init+0xb4>)
 8000ff8:	f7ff ff40 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 2, 2);
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	2102      	movs	r1, #2
 8001000:	4811      	ldr	r0, [pc, #68]	; (8001048 <USER_GPIO_Init+0xb4>)
 8001002:	f7ff ff3b 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 3, 2);
 8001006:	2202      	movs	r2, #2
 8001008:	2103      	movs	r1, #3
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <USER_GPIO_Init+0xb4>)
 800100c:	f7ff ff36 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 4, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	2104      	movs	r1, #4
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <USER_GPIO_Init+0xb4>)
 8001016:	f7ff ff31 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 5, 1);
 800101a:	2201      	movs	r2, #1
 800101c:	2105      	movs	r1, #5
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <USER_GPIO_Init+0xb4>)
 8001020:	f7ff ff2c 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 6, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2106      	movs	r1, #6
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <USER_GPIO_Init+0xb4>)
 800102a:	f7ff ff27 	bl	8000e7c <config_pin>
	config_pin(GPIOA, 7, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	2107      	movs	r1, #7
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <USER_GPIO_Init+0xb4>)
 8001034:	f7ff ff22 	bl	8000e7c <config_pin>
	config_pin(GPIOC, 13, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	210d      	movs	r1, #13
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <USER_GPIO_Init+0xb8>)
 800103e:	f7ff ff1d 	bl	8000e7c <config_pin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40010800 	.word	0x40010800
 800104c:	40011000 	.word	0x40011000

08001050 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
//
//	GPIOC->BSRR = (message==1)?
//			 GPIO_BSRR_BR13:
//			 GPIO_BSRR_BS13;

    osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f002 faa1 	bl	80035a0 <osDelay>
 800105e:	e7fb      	b.n	8001058 <StartDefaultTask+0x8>

08001060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001072:	f000 fb01 	bl	8001678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40000800 	.word	0x40000800

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <pollButton>:
#include "poll_keyboard_task.h"
#include "LCDTask/LCDTask.h"

extern osMessageQueueId_t inputQueueHandle;

uint8_t pollButton(uint8_t row, uint8_t col){
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	//Set all row pins to 1, except polling row
	for(int i = 4; i < 8; i++){
 80010a0:	2304      	movs	r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e00c      	b.n	80010c0 <pollButton+0x30>
		GPIOA->ODR |= 1 << i;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <pollButton+0x6c>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2101      	movs	r1, #1
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <pollButton+0x6c>)
 80010b6:	430b      	orrs	r3, r1
 80010b8:	60d3      	str	r3, [r2, #12]
	for(int i = 4; i < 8; i++){
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	ddef      	ble.n	80010a6 <pollButton+0x16>
	}
	GPIOA->ODR &= ~(1 << row);
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <pollButton+0x6c>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	43d2      	mvns	r2, r2
 80010d4:	4611      	mov	r1, r2
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <pollButton+0x6c>)
 80010d8:	400b      	ands	r3, r1
 80010da:	60d3      	str	r3, [r2, #12]

	//Read col
	//return 0;
	return GPIOA->IDR & (1 << col);
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <pollButton+0x6c>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	b2db      	uxtb	r3, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40010800 	.word	0x40010800

08001100 <poll_keyboard_button_task>:


void poll_keyboard_button_task(void){
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0af      	sub	sp, #188	; 0xbc
 8001104:	af00      	add	r7, sp, #0
	uint8_t keypad_chars[] = {'1', '4', '7', '*', '2', '5', '8', '0', '3', '6', '9', '#', 'A', 'B', 'C', 'D'};
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <poll_keyboard_button_task+0xf0>)
 8001108:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800110c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char data[25], title[100]="";
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2260      	movs	r2, #96	; 0x60
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 f896 	bl	8006250 <memset>
	uint8_t in;
	char temp[20] = "";
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
	int index;
	while(1){
		for(int i = 0; i < 4; i++){
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800113c:	e050      	b.n	80011e0 <poll_keyboard_button_task+0xe0>
			  for(int j = 0; j < 4; j++){
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001144:	e043      	b.n	80011ce <poll_keyboard_button_task+0xce>
				  int out = pollButton(j + 4, i);
 8001146:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3304      	adds	r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff99 	bl	8001090 <pollButton>
 800115e:	4603      	mov	r3, r0
 8001160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				  index = i * 4 + j;
 8001164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800116e:	4413      	add	r3, r2
 8001170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				  if(out==0){
 8001174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001178:	2b00      	cmp	r3, #0
 800117a:	d123      	bne.n	80011c4 <poll_keyboard_button_task+0xc4>
					  while(pollButton(j + 4, i) == 0){
 800117c:	bf00      	nop
 800117e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3304      	adds	r3, #4
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff7d 	bl	8001090 <pollButton>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <poll_keyboard_button_task+0x7e>

					  }
					  snprintf(data, sizeof(data), "%c", keypad_chars[index]);
 800119c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80011a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <poll_keyboard_button_task+0xf4>)
 80011ae:	2119      	movs	r1, #25
 80011b0:	f005 f964 	bl	800647c <sniprintf>
//					  set_lcd(data, "WAS PRESSED WUUWUWUWUWUWUWUWUUWUWUWUWUWUWUUWUWUWUW");
					  osMessageQueuePut(inputQueueHandle,&(data), 0U, 100);
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <poll_keyboard_button_task+0xf8>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	2200      	movs	r2, #0
 80011c0:	f002 faa2 	bl	8003708 <osMessageQueuePut>
			  for(int j = 0; j < 4; j++){
 80011c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011c8:	3301      	adds	r3, #1
 80011ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80011ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	ddb7      	ble.n	8001146 <poll_keyboard_button_task+0x46>
		for(int i = 0; i < 4; i++){
 80011d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011da:	3301      	adds	r3, #1
 80011dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	ddaa      	ble.n	800113e <poll_keyboard_button_task+0x3e>


				  }
			  }
			}
		osDelay(1);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f002 f9d9 	bl	80035a0 <osDelay>
		for(int i = 0; i < 4; i++){
 80011ee:	e7a2      	b.n	8001136 <poll_keyboard_button_task+0x36>
 80011f0:	08006d34 	.word	0x08006d34
 80011f4:	08006d30 	.word	0x08006d30
 80011f8:	20000104 	.word	0x20000104

080011fc <receive_data_task>:
uint8_t lcd2[128];
uint32_t sep = 0;


extern osMessageQueueId_t rpiInQueueHandle;
uint8_t receive_data_task(void){
 80011fc:	b598      	push	{r3, r4, r7, lr}
 80011fe:	af00      	add	r7, sp, #0

	while (1){
		while(msg_len == 0 && i != BUF_LEN){
 8001200:	e025      	b.n	800124e <receive_data_task+0x52>
			buf[i] = USER_USART1_Receive();
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <receive_data_task+0xbc>)
 8001204:	681c      	ldr	r4, [r3, #0]
 8001206:	f000 f889 	bl	800131c <USER_USART1_Receive>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <receive_data_task+0xc0>)
 8001210:	551a      	strb	r2, [r3, r4]
			if(buf[i]==','){
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <receive_data_task+0xbc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a29      	ldr	r2, [pc, #164]	; (80012bc <receive_data_task+0xc0>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	2b2c      	cmp	r3, #44	; 0x2c
 800121c:	d103      	bne.n	8001226 <receive_data_task+0x2a>
				sep = i;
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <receive_data_task+0xbc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <receive_data_task+0xc4>)
 8001224:	6013      	str	r3, [r2, #0]
			}
			if(buf[i]== '\0'){
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <receive_data_task+0xbc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <receive_data_task+0xc0>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d108      	bne.n	8001244 <receive_data_task+0x48>
				msg_len= i+1;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <receive_data_task+0xbc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <receive_data_task+0xc8>)
 800123a:	6013      	str	r3, [r2, #0]
				i = 0;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <receive_data_task+0xbc>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
				//end msg
				break;
 8001242:	e00c      	b.n	800125e <receive_data_task+0x62>
			}
			i++;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <receive_data_task+0xbc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <receive_data_task+0xbc>)
 800124c:	6013      	str	r3, [r2, #0]
		while(msg_len == 0 && i != BUF_LEN){
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <receive_data_task+0xc8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <receive_data_task+0x62>
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <receive_data_task+0xbc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b96      	cmp	r3, #150	; 0x96
 800125c:	d1d1      	bne.n	8001202 <receive_data_task+0x6>
		}

		if(msg_len>0){
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <receive_data_task+0xc8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d024      	beq.n	80012b0 <receive_data_task+0xb4>
			//Process msg
			strncpy(lcd1, buf, sep);
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <receive_data_task+0xc4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4913      	ldr	r1, [pc, #76]	; (80012bc <receive_data_task+0xc0>)
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <receive_data_task+0xcc>)
 8001270:	f005 f938 	bl	80064e4 <strncpy>
			strncpy(lcd2, buf+sep+1, msg_len-sep-1);
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <receive_data_task+0xc4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <receive_data_task+0xc0>)
 800127c:	1899      	adds	r1, r3, r2
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <receive_data_task+0xc8>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <receive_data_task+0xc4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	3b01      	subs	r3, #1
 800128a:	461a      	mov	r2, r3
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <receive_data_task+0xd0>)
 800128e:	f005 f929 	bl	80064e4 <strncpy>
			lcd1[sep]='\0';
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <receive_data_task+0xc4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <receive_data_task+0xcc>)
 8001298:	2100      	movs	r1, #0
 800129a:	54d1      	strb	r1, [r2, r3]
			set_lcd(lcd1, lcd2);
 800129c:	490b      	ldr	r1, [pc, #44]	; (80012cc <receive_data_task+0xd0>)
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <receive_data_task+0xcc>)
 80012a0:	f7ff f84e 	bl	8000340 <set_lcd>


			msg_len = 0;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <receive_data_task+0xc8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
			sep = 0;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <receive_data_task+0xc4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		}
		osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f002 f975 	bl	80035a0 <osDelay>
		while(msg_len == 0 && i != BUF_LEN){
 80012b6:	e7ca      	b.n	800124e <receive_data_task+0x52>
 80012b8:	200001a4 	.word	0x200001a4
 80012bc:	2000010c 	.word	0x2000010c
 80012c0:	200002ac 	.word	0x200002ac
 80012c4:	200001a8 	.word	0x200001a8
 80012c8:	200001ac 	.word	0x200001ac
 80012cc:	2000022c 	.word	0x2000022c

080012d0 <USER_USART1_Transmit>:
 *      Author: iandu
 */

#include "serial.h"

void USER_USART1_Transmit(uint8_t *pData, uint16_t size){
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
	for(int i=0; i< size; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e00f      	b.n	8001302 <USER_USART1_Transmit+0x32>
		while( (USART1->SR & USART_SR_TXE)==0 ){
 80012e2:	bf00      	nop
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <USER_USART1_Transmit+0x48>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f9      	beq.n	80012e4 <USER_USART1_Transmit+0x14>

		}
		USART1->DR = *pData++;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <USER_USART1_Transmit+0x48>)
 80012fa:	605a      	str	r2, [r3, #4]
	for(int i=0; i< size; i++){
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	429a      	cmp	r2, r3
 8001308:	dbeb      	blt.n	80012e2 <USER_USART1_Transmit+0x12>
	}
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40013800 	.word	0x40013800

0800131c <USER_USART1_Receive>:

uint8_t USER_USART1_Receive(void){
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	while( (USART1->SR & USART_SR_RXNE)==0 ){
 8001320:	bf00      	nop
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <USER_USART1_Receive+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f9      	beq.n	8001322 <USER_USART1_Receive+0x6>

	}
	return USART1->DR;
 800132e:	4b03      	ldr	r3, [pc, #12]	; (800133c <USER_USART1_Receive+0x20>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	b2db      	uxtb	r3, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40013800 	.word	0x40013800

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_MspInit+0x68>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_MspInit+0x68>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_MspInit+0x68>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_MspInit+0x68>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_MspInit+0x68>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_MspInit+0x68>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	210f      	movs	r1, #15
 800137a:	f06f 0001 	mvn.w	r0, #1
 800137e:	f000 fa4c 	bl	800181a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_MspInit+0x6c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_MspInit+0x6c>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000

080013b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_SPI_MspInit+0xa4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d13d      	bne.n	800144c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_SPI_MspInit+0xa8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_SPI_MspInit+0xa8>)
 80013d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_SPI_MspInit+0xa8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_SPI_MspInit+0xa8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <HAL_SPI_MspInit+0xa8>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_SPI_MspInit+0xa8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001400:	2328      	movs	r3, #40	; 0x28
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4812      	ldr	r0, [pc, #72]	; (800145c <HAL_SPI_MspInit+0xac>)
 8001414:	f000 fa2c 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001418:	2310      	movs	r3, #16
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_SPI_MspInit+0xac>)
 800142c:	f000 fa20 	bl	8001870 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_SPI_MspInit+0xb0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_SPI_MspInit+0xb0>)
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013000 	.word	0x40013000
 8001458:	40021000 	.word	0x40021000
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40010000 	.word	0x40010000

08001464 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	201e      	movs	r0, #30
 800147a:	f000 f9ce 	bl	800181a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800147e:	201e      	movs	r0, #30
 8001480:	f000 f9e7 	bl	8001852 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_InitTick+0xa0>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_InitTick+0xa0>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	61d3      	str	r3, [r2, #28]
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_InitTick+0xa0>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800149c:	f107 0210 	add.w	r2, r7, #16
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 ff66 	bl	8002378 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014ac:	f000 ff50 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 80014b0:	4603      	mov	r3, r0
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	4a13      	ldr	r2, [pc, #76]	; (8001508 <HAL_InitTick+0xa4>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9b      	lsrs	r3, r3, #18
 80014c0:	3b01      	subs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_InitTick+0xa8>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_InitTick+0xac>)
 80014c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_InitTick+0xa8>)
 80014cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_InitTick+0xa8>)
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_InitTick+0xa8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_InitTick+0xa8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <HAL_InitTick+0xa8>)
 80014e6:	f001 fd01 	bl	8002eec <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d104      	bne.n	80014fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <HAL_InitTick+0xa8>)
 80014f2:	f001 fd53 	bl	8002f9c <HAL_TIM_Base_Start_IT>
 80014f6:	4603      	mov	r3, r0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	200002b0 	.word	0x200002b0
 8001510:	40000800 	.word	0x40000800

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
	...

08001540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM4_IRQHandler+0x10>)
 8001546:	f001 fd7b 	bl	8003040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002b0 	.word	0x200002b0

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f004 fe2a 	bl	80061dc <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20005000 	.word	0x20005000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	200002f8 	.word	0x200002f8
 80015bc:	20003828 	.word	0x20003828

080015c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <transmit_data_task>:
 */

#include "tx_task.h"

extern  osMessageQueueId_t inputQueueHandle;
void transmit_data_task(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

	uint8_t keypadInput;
	while(1){
		osMessageQueueGet(inputQueueHandle, &keypadInput, NULL, 100);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <transmit_data_task+0x30>)
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	1df9      	adds	r1, r7, #7
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	2200      	movs	r2, #0
 80015dc:	f002 f908 	bl	80037f0 <osMessageQueueGet>
		if(keypadInput!=0){
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <transmit_data_task+0x28>
			USER_USART1_Transmit(&keypadInput, sizeof(keypadInput));
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	2101      	movs	r1, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe70 	bl	80012d0 <USER_USART1_Transmit>
			keypadInput = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	71fb      	strb	r3, [r7, #7]
		}
		osDelay(2);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f001 ffd3 	bl	80035a0 <osDelay>
		osMessageQueueGet(inputQueueHandle, &keypadInput, NULL, 100);
 80015fa:	e7ea      	b.n	80015d2 <transmit_data_task+0x6>
 80015fc:	20000104 	.word	0x20000104

08001600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001626:	f7ff ffcb 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f004 fddd 	bl	80061e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fabb 	bl	8000ba8 <main>
  bx lr
 8001632:	4770      	bx	lr
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800163c:	08006f68 	.word	0x08006f68
  ldr r2, =_sbss
 8001640:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001644:	20003828 	.word	0x20003828

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f8d1 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f7ff fefe 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fe6a 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_IncTick+0x1c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_IncTick+0x20>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000008 	.word	0x20000008
 8001698:	200002fc 	.word	0x200002fc

0800169c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_GetTick+0x10>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	200002fc 	.word	0x200002fc

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4906      	ldr	r1, [pc, #24]	; (8001748 <__NVIC_EnableIRQ+0x34>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff4f 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff64 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ffb2 	bl	80017a0 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff81 	bl	800174c <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff57 	bl	8001714 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b08b      	sub	sp, #44	; 0x2c
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	e169      	b.n	8001b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001884:	2201      	movs	r2, #1
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 8158 	bne.w	8001b52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a9a      	ldr	r2, [pc, #616]	; (8001b10 <HAL_GPIO_Init+0x2a0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d05e      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018ac:	4a98      	ldr	r2, [pc, #608]	; (8001b10 <HAL_GPIO_Init+0x2a0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d875      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018b2:	4a98      	ldr	r2, [pc, #608]	; (8001b14 <HAL_GPIO_Init+0x2a4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d058      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018b8:	4a96      	ldr	r2, [pc, #600]	; (8001b14 <HAL_GPIO_Init+0x2a4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d86f      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018be:	4a96      	ldr	r2, [pc, #600]	; (8001b18 <HAL_GPIO_Init+0x2a8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d052      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018c4:	4a94      	ldr	r2, [pc, #592]	; (8001b18 <HAL_GPIO_Init+0x2a8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d869      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018ca:	4a94      	ldr	r2, [pc, #592]	; (8001b1c <HAL_GPIO_Init+0x2ac>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d04c      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018d0:	4a92      	ldr	r2, [pc, #584]	; (8001b1c <HAL_GPIO_Init+0x2ac>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d863      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018d6:	4a92      	ldr	r2, [pc, #584]	; (8001b20 <HAL_GPIO_Init+0x2b0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d046      	beq.n	800196a <HAL_GPIO_Init+0xfa>
 80018dc:	4a90      	ldr	r2, [pc, #576]	; (8001b20 <HAL_GPIO_Init+0x2b0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d85d      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d82a      	bhi.n	800193c <HAL_GPIO_Init+0xcc>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d859      	bhi.n	800199e <HAL_GPIO_Init+0x12e>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <HAL_GPIO_Init+0x80>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	0800196b 	.word	0x0800196b
 80018f4:	08001945 	.word	0x08001945
 80018f8:	08001957 	.word	0x08001957
 80018fc:	08001999 	.word	0x08001999
 8001900:	0800199f 	.word	0x0800199f
 8001904:	0800199f 	.word	0x0800199f
 8001908:	0800199f 	.word	0x0800199f
 800190c:	0800199f 	.word	0x0800199f
 8001910:	0800199f 	.word	0x0800199f
 8001914:	0800199f 	.word	0x0800199f
 8001918:	0800199f 	.word	0x0800199f
 800191c:	0800199f 	.word	0x0800199f
 8001920:	0800199f 	.word	0x0800199f
 8001924:	0800199f 	.word	0x0800199f
 8001928:	0800199f 	.word	0x0800199f
 800192c:	0800199f 	.word	0x0800199f
 8001930:	0800199f 	.word	0x0800199f
 8001934:	0800194d 	.word	0x0800194d
 8001938:	08001961 	.word	0x08001961
 800193c:	4a79      	ldr	r2, [pc, #484]	; (8001b24 <HAL_GPIO_Init+0x2b4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001942:	e02c      	b.n	800199e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e029      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	3304      	adds	r3, #4
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e024      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	3308      	adds	r3, #8
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e01f      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	330c      	adds	r3, #12
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e01a      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001972:	2304      	movs	r3, #4
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e013      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001980:	2308      	movs	r3, #8
 8001982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	611a      	str	r2, [r3, #16]
          break;
 800198a:	e009      	b.n	80019a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800198c:	2308      	movs	r3, #8
 800198e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	615a      	str	r2, [r3, #20]
          break;
 8001996:	e003      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x130>
          break;
 800199e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2bff      	cmp	r3, #255	; 0xff
 80019a4:	d801      	bhi.n	80019aa <HAL_GPIO_Init+0x13a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	e001      	b.n	80019ae <HAL_GPIO_Init+0x13e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3304      	adds	r3, #4
 80019ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d802      	bhi.n	80019bc <HAL_GPIO_Init+0x14c>
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	e002      	b.n	80019c2 <HAL_GPIO_Init+0x152>
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3b08      	subs	r3, #8
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	210f      	movs	r1, #15
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	6a39      	ldr	r1, [r7, #32]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80b1 	beq.w	8001b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x2b8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_GPIO_Init+0x2b8>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x2b8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a08:	4a48      	ldr	r2, [pc, #288]	; (8001b2c <HAL_GPIO_Init+0x2bc>)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a40      	ldr	r2, [pc, #256]	; (8001b30 <HAL_GPIO_Init+0x2c0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d013      	beq.n	8001a5c <HAL_GPIO_Init+0x1ec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <HAL_GPIO_Init+0x2c4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d00d      	beq.n	8001a58 <HAL_GPIO_Init+0x1e8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3e      	ldr	r2, [pc, #248]	; (8001b38 <HAL_GPIO_Init+0x2c8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x1e4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3d      	ldr	r2, [pc, #244]	; (8001b3c <HAL_GPIO_Init+0x2cc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_GPIO_Init+0x1e0>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a50:	2304      	movs	r3, #4
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x1ee>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a6e:	492f      	ldr	r1, [pc, #188]	; (8001b2c <HAL_GPIO_Init+0x2bc>)
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	492c      	ldr	r1, [pc, #176]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4928      	ldr	r1, [pc, #160]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4922      	ldr	r1, [pc, #136]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	491e      	ldr	r1, [pc, #120]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4918      	ldr	r1, [pc, #96]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4914      	ldr	r1, [pc, #80]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e021      	b.n	8001b52 <HAL_GPIO_Init+0x2e2>
 8001b0e:	bf00      	nop
 8001b10:	10320000 	.word	0x10320000
 8001b14:	10310000 	.word	0x10310000
 8001b18:	10220000 	.word	0x10220000
 8001b1c:	10210000 	.word	0x10210000
 8001b20:	10120000 	.word	0x10120000
 8001b24:	10110000 	.word	0x10110000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40011400 	.word	0x40011400
 8001b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4909      	ldr	r1, [pc, #36]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f47f ae8e 	bne.w	8001884 <HAL_GPIO_Init+0x14>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	372c      	adds	r7, #44	; 0x2c
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e272      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8087 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d00c      	beq.n	8001bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd4:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d112      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5e>
 8001be0:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d10b      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d06c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x12c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d168      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e24c      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x76>
 8001c10:	4b80      	ldr	r3, [pc, #512]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a7f      	ldr	r2, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e02e      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x98>
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7a      	ldr	r2, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b78      	ldr	r3, [pc, #480]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a77      	ldr	r2, [pc, #476]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0xbc>
 8001c4a:	4b72      	ldr	r3, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a71      	ldr	r2, [pc, #452]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c64:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a67      	ldr	r2, [pc, #412]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fd0a 	bl	800169c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fd06 	bl	800169c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e200      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xe4>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcf6 	bl	800169c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fcf2 	bl	800169c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1ec      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x10c>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x18c>
 8001cfa:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x176>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c0      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4939      	ldr	r1, [pc, #228]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fcab 	bl	800169c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fca7 	bl	800169c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a1      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4927      	ldr	r1, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_RCC_OscConfig+0x270>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fc8a 	bl	800169c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc86 	bl	800169c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e180      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03a      	beq.n	8001e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d019      	beq.n	8001df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fc6a 	bl	800169c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc66 	bl	800169c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e160      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 faf4 	bl	80023d8 <RCC_Delay>
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_RCC_OscConfig+0x274>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff fc50 	bl	800169c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfe:	e00f      	b.n	8001e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc4c 	bl	800169c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d908      	bls.n	8001e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e146      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	42420000 	.word	0x42420000
 8001e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e9      	bne.n	8001e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a6 	beq.w	8001f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fc0d 	bl	800169c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff fc09 	bl	800169c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e103      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x312>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e02d      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x334>
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a69      	ldr	r2, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	e01c      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x356>
 8001ee4:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a60      	ldr	r2, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b58      	ldr	r3, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a57      	ldr	r2, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fbbd 	bl	800169c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fbb9 	bl	800169c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0b1      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ee      	beq.n	8001f26 <HAL_RCC_OscConfig+0x37e>
 8001f48:	e014      	b.n	8001f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fba7 	bl	800169c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fba3 	bl	800169c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e09b      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ee      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d061      	beq.n	8002060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d146      	bne.n	8002032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fb77 	bl	800169c <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fb73 	bl	800169c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e06d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4921      	ldr	r1, [pc, #132]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a19      	ldr	r1, [r3, #32]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	491b      	ldr	r1, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fb47 	bl	800169c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff fb43 	bl	800169c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e03d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x46a>
 8002030:	e035      	b.n	800209e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fb30 	bl	800169c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff fb2c 	bl	800169c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e026      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x498>
 800205e:	e01e      	b.n	800209e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e019      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x500>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d0      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4965      	ldr	r1, [pc, #404]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800212a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d040      	beq.n	80021cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e073      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06b      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4936      	ldr	r1, [pc, #216]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219c:	f7ff fa7e 	bl	800169c <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7ff fa7a 	bl	800169c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e053      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 020c 	and.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d1eb      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d210      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4922      	ldr	r1, [pc, #136]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1cc>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1d0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f902 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000
 8002270:	40021000 	.word	0x40021000
 8002274:	08006eb4 	.word	0x08006eb4
 8002278:	20000000 	.word	0x20000000
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b490      	push	{r4, r7}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_RCC_GetSysClockFreq+0xac>)
 8002288:	1d3c      	adds	r4, r7, #4
 800228a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800228c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002290:	f240 2301 	movw	r3, #513	; 0x201
 8002294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x40>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x46>
 80022be:	e02b      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	e02b      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3328      	adds	r3, #40	; 0x28
 80022d0:	443b      	add	r3, r7
 80022d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0c5b      	lsrs	r3, r3, #17
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	3328      	adds	r3, #40	; 0x28
 80022ee:	443b      	add	r3, r7
 80022f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fa:	fb03 f202 	mul.w	r2, r3, r2
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	e004      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	623b      	str	r3, [r7, #32]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231a:	623b      	str	r3, [r7, #32]
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	6a3b      	ldr	r3, [r7, #32]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc90      	pop	{r4, r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	08006d44 	.word	0x08006d44
 8002330:	40021000 	.word	0x40021000
 8002334:	007a1200 	.word	0x007a1200
 8002338:	003d0900 	.word	0x003d0900

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_RCC_GetHCLKFreq+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff2 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	08006ec4 	.word	0x08006ec4

08002378 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	220f      	movs	r2, #15
 8002386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_GetClockConfig+0x58>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_RCC_GetClockConfig+0x58>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_GetClockConfig+0x58>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_RCC_GetClockConfig+0x58>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_GetClockConfig+0x5c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0207 	and.w	r2, r3, #7
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40022000 	.word	0x40022000

080023d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <RCC_Delay+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <RCC_Delay+0x38>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a5b      	lsrs	r3, r3, #9
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f4:	bf00      	nop
  }
  while (Delay --);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <RCC_Delay+0x1c>
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000000 	.word	0x20000000
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e076      	b.n	8002514 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002436:	d009      	beq.n	800244c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
 800243e:	e005      	b.n	800244c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe ffa2 	bl	80013b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	0c1a      	lsrs	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f002 0204 	and.w	r2, r2, #4
 80024f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_SPI_Transmit+0x22>
 800253a:	2302      	movs	r3, #2
 800253c:	e126      	b.n	800278c <HAL_SPI_Transmit+0x270>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002546:	f7ff f8a9 	bl	800169c <HAL_GetTick>
 800254a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002560:	e10b      	b.n	800277a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_SPI_Transmit+0x52>
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002572:	e102      	b.n	800277a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ba:	d10f      	bne.n	80025dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d007      	beq.n	80025fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002602:	d14b      	bne.n	800269c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_SPI_Transmit+0xf6>
 800260c:	8afb      	ldrh	r3, [r7, #22]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d13e      	bne.n	8002690 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002636:	e02b      	b.n	8002690 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d112      	bne.n	800266c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	86da      	strh	r2, [r3, #54]	; 0x36
 800266a:	e011      	b.n	8002690 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266c:	f7ff f816 	bl	800169c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d803      	bhi.n	8002684 <HAL_SPI_Transmit+0x168>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002682:	d102      	bne.n	800268a <HAL_SPI_Transmit+0x16e>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800268e:	e074      	b.n	800277a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ce      	bne.n	8002638 <HAL_SPI_Transmit+0x11c>
 800269a:	e04c      	b.n	8002736 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_Transmit+0x18e>
 80026a4:	8afb      	ldrh	r3, [r7, #22]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d140      	bne.n	800272c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026d0:	e02c      	b.n	800272c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d113      	bne.n	8002708 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
 8002706:	e011      	b.n	800272c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002708:	f7fe ffc8 	bl	800169c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d803      	bhi.n	8002720 <HAL_SPI_Transmit+0x204>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271e:	d102      	bne.n	8002726 <HAL_SPI_Transmit+0x20a>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	77fb      	strb	r3, [r7, #31]
          goto error;
 800272a:	e026      	b.n	800277a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1cd      	bne.n	80026d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fbb8 	bl	8002eb0 <SPI_EndRxTxTransaction>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e000      	b.n	800277a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002778:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800278a:	7ffb      	ldrb	r3, [r7, #31]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027b0:	d112      	bne.n	80027d8 <HAL_SPI_Receive+0x44>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2204      	movs	r2, #4
 80027be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f8f1 	bl	80029b6 <HAL_SPI_TransmitReceive>
 80027d4:	4603      	mov	r3, r0
 80027d6:	e0ea      	b.n	80029ae <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_SPI_Receive+0x52>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0e3      	b.n	80029ae <HAL_SPI_Receive+0x21a>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ee:	f7fe ff55 	bl	800169c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002804:	e0ca      	b.n	800299c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_SPI_Receive+0x7e>
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002816:	e0c1      	b.n	800299c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2204      	movs	r2, #4
 800281c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285e:	d10f      	bne.n	8002880 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800287e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d007      	beq.n	800289e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d162      	bne.n	800296c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028a6:	e02e      	b.n	8002906 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d115      	bne.n	80028e2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f103 020c 	add.w	r2, r3, #12
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028e0:	e011      	b.n	8002906 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e2:	f7fe fedb 	bl	800169c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d803      	bhi.n	80028fa <HAL_SPI_Receive+0x166>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f8:	d102      	bne.n	8002900 <HAL_SPI_Receive+0x16c>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002904:	e04a      	b.n	800299c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1cb      	bne.n	80028a8 <HAL_SPI_Receive+0x114>
 8002910:	e031      	b.n	8002976 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d113      	bne.n	8002948 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	b292      	uxth	r2, r2
 800292c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	1c9a      	adds	r2, r3, #2
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002946:	e011      	b.n	800296c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002948:	f7fe fea8 	bl	800169c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d803      	bhi.n	8002960 <HAL_SPI_Receive+0x1cc>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295e:	d102      	bne.n	8002966 <HAL_SPI_Receive+0x1d2>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	75fb      	strb	r3, [r7, #23]
          goto error;
 800296a:	e017      	b.n	800299c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1cd      	bne.n	8002912 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fa46 	bl	8002e0c <SPI_EndRxTransaction>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	75fb      	strb	r3, [r7, #23]
 8002998:	e000      	b.n	800299c <HAL_SPI_Receive+0x208>
  }

error :
 800299a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b08c      	sub	sp, #48	; 0x30
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x26>
 80029d8:	2302      	movs	r3, #2
 80029da:	e18a      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x33c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e4:	f7fe fe5a 	bl	800169c <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d00f      	beq.n	8002a26 <HAL_SPI_TransmitReceive+0x70>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a0c:	d107      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x68>
 8002a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d003      	beq.n	8002a26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a24:	e15b      	b.n	8002cde <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x82>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x82>
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a3e:	e14e      	b.n	8002cde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d003      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2205      	movs	r2, #5
 8002a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	887a      	ldrh	r2, [r7, #2]
 8002a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d007      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab0:	d178      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x10a>
 8002aba:	8b7b      	ldrh	r3, [r7, #26]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d166      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	1c9a      	adds	r2, r3, #2
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae4:	e053      	b.n	8002b8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x176>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d016      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x176>
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d113      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d119      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x1b8>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d014      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b6e:	f7fe fd95 	bl	800169c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d807      	bhi.n	8002b8e <HAL_SPI_TransmitReceive+0x1d8>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b84:	d003      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b8c:	e0a7      	b.n	8002cde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1a6      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x130>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1a1      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x130>
 8002ba2:	e07c      	b.n	8002c9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_SPI_TransmitReceive+0x1fc>
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d16b      	bne.n	8002c8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd8:	e057      	b.n	8002c8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d11c      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x26c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d017      	beq.n	8002c22 <HAL_SPI_TransmitReceive+0x26c>
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d114      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d119      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x2ae>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d014      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c60:	2301      	movs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c64:	f7fe fd1a 	bl	800169c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d803      	bhi.n	8002c7c <HAL_SPI_TransmitReceive+0x2c6>
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_TransmitReceive+0x2cc>
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c88:	e029      	b.n	8002cde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1a2      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x224>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d19d      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f904 	bl	8002eb0 <SPI_EndRxTxTransaction>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cba:	e010      	b.n	8002cde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	e000      	b.n	8002cde <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3730      	adds	r7, #48	; 0x30
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d0c:	f7fe fcc6 	bl	800169c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d1c:	f7fe fcbe 	bl	800169c <HAL_GetTick>
 8002d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	015b      	lsls	r3, r3, #5
 8002d28:	0d1b      	lsrs	r3, r3, #20
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d32:	e054      	b.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3a:	d050      	beq.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d3c:	f7fe fcae 	bl	800169c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d902      	bls.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d13d      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6a:	d111      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d74:	d004      	beq.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d107      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d10f      	bne.n	8002dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e017      	b.n	8002dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d19b      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000

08002e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e20:	d111      	bne.n	8002e46 <SPI_EndRxTransaction+0x3a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2a:	d004      	beq.n	8002e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e34:	d107      	bne.n	8002e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4e:	d117      	bne.n	8002e80 <SPI_EndRxTransaction+0x74>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d112      	bne.n	8002e80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2101      	movs	r1, #1
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff ff49 	bl	8002cfc <SPI_WaitFlagStateUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01a      	beq.n	8002ea6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e013      	b.n	8002ea8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ff36 	bl	8002cfc <SPI_WaitFlagStateUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e000      	b.n	8002ea8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff ff18 	bl	8002cfc <SPI_WaitFlagStateUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e000      	b.n	8002ee4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e041      	b.n	8002f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f839 	bl	8002f8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f000 f9b4 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e03a      	b.n	800302a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIM_Base_Start_IT+0x98>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x58>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d009      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x58>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x58>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d111      	bne.n	8003018 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d010      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	e007      	b.n	8003028 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800

08003040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0202 	mvn.w	r2, #2
 800306c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8ed 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8e0 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f8ef 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0204 	mvn.w	r2, #4
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8c3 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8b6 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8c5 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b08      	cmp	r3, #8
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0208 	mvn.w	r2, #8
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2204      	movs	r2, #4
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f899 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f88c 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f89b 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b10      	cmp	r3, #16
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b10      	cmp	r3, #16
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0210 	mvn.w	r2, #16
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2208      	movs	r2, #8
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f86f 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f862 	bl	8003250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f871 	bl	8003274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0201 	mvn.w	r2, #1
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd ff4e 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d107      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8bf 	bl	800336e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d10e      	bne.n	800321c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b40      	cmp	r3, #64	; 0x40
 800320a:	d107      	bne.n	800321c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f835 	bl	8003286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b20      	cmp	r3, #32
 8003228:	d10e      	bne.n	8003248 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b20      	cmp	r3, #32
 8003236:	d107      	bne.n	8003248 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0220 	mvn.w	r2, #32
 8003240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f88a 	bl	800335c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a29      	ldr	r2, [pc, #164]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a26      	ldr	r2, [pc, #152]	; (8003354 <TIM_Base_SetConfig+0xbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_Base_SetConfig+0xc0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <TIM_Base_SetConfig+0xbc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a18      	ldr	r2, [pc, #96]	; (8003358 <TIM_Base_SetConfig+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a07      	ldr	r2, [pc, #28]	; (8003350 <TIM_Base_SetConfig+0xb8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800

0800335c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003386:	f3ef 8305 	mrs	r3, IPSR
 800338a:	60bb      	str	r3, [r7, #8]
  return(result);
 800338c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	607b      	str	r3, [r7, #4]
  return(result);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <osKernelInitialize+0x32>
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <osKernelInitialize+0x60>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d109      	bne.n	80033ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033a6:	f3ef 8311 	mrs	r3, BASEPRI
 80033aa:	603b      	str	r3, [r7, #0]
  return(result);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033b2:	f06f 0305 	mvn.w	r3, #5
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e00c      	b.n	80033d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <osKernelInitialize+0x60>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <osKernelInitialize+0x60>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e002      	b.n	80033d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	20000300 	.word	0x20000300

080033e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ea:	f3ef 8305 	mrs	r3, IPSR
 80033ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f6:	f3ef 8310 	mrs	r3, PRIMASK
 80033fa:	607b      	str	r3, [r7, #4]
  return(result);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <osKernelStart+0x32>
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <osKernelStart+0x64>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d109      	bne.n	800341e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800340a:	f3ef 8311 	mrs	r3, BASEPRI
 800340e:	603b      	str	r3, [r7, #0]
  return(result);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003416:	f06f 0305 	mvn.w	r3, #5
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e00e      	b.n	800343c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <osKernelStart+0x64>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <osKernelStart+0x64>)
 8003428:	2202      	movs	r2, #2
 800342a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800342c:	f001 faba 	bl	80049a4 <vTaskStartScheduler>
      stat = osOK;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e002      	b.n	800343c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800343a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800343c:	68fb      	ldr	r3, [r7, #12]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000300 	.word	0x20000300

0800344c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b092      	sub	sp, #72	; 0x48
 8003450:	af04      	add	r7, sp, #16
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800345c:	f3ef 8305 	mrs	r3, IPSR
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 8094 	bne.w	8003592 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346a:	f3ef 8310 	mrs	r3, PRIMASK
 800346e:	623b      	str	r3, [r7, #32]
  return(result);
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 808d 	bne.w	8003592 <osThreadNew+0x146>
 8003478:	4b48      	ldr	r3, [pc, #288]	; (800359c <osThreadNew+0x150>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d106      	bne.n	800348e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003480:	f3ef 8311 	mrs	r3, BASEPRI
 8003484:	61fb      	str	r3, [r7, #28]
  return(result);
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 8082 	bne.w	8003592 <osThreadNew+0x146>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d07e      	beq.n	8003592 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003498:	2318      	movs	r3, #24
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800349c:	2300      	movs	r3, #0
 800349e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80034a0:	f107 031b 	add.w	r3, r7, #27
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d045      	beq.n	800353e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <osThreadNew+0x74>
        name = attr->name;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <osThreadNew+0x9a>
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	2b38      	cmp	r3, #56	; 0x38
 80034d8:	d805      	bhi.n	80034e6 <osThreadNew+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <osThreadNew+0x9e>
        return (NULL);
 80034e6:	2300      	movs	r3, #0
 80034e8:	e054      	b.n	8003594 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <osThreadNew+0xd4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2bbb      	cmp	r3, #187	; 0xbb
 8003508:	d90a      	bls.n	8003520 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <osThreadNew+0xd4>
        mem = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	e010      	b.n	8003542 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10c      	bne.n	8003542 <osThreadNew+0xf6>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <osThreadNew+0xf6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <osThreadNew+0xf6>
          mem = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
 800353c:	e001      	b.n	8003542 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b01      	cmp	r3, #1
 8003546:	d110      	bne.n	800356a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003550:	9202      	str	r2, [sp, #8]
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f001 f83c 	bl	80045dc <xTaskCreateStatic>
 8003564:	4603      	mov	r3, r0
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	e013      	b.n	8003592 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d110      	bne.n	8003592 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	b29a      	uxth	r2, r3
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f001 f886 	bl	8004694 <xTaskCreate>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <osThreadNew+0x146>
          hTask = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003592:	697b      	ldr	r3, [r7, #20]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3738      	adds	r7, #56	; 0x38
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000300 	.word	0x20000300

080035a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a8:	f3ef 8305 	mrs	r3, IPSR
 80035ac:	613b      	str	r3, [r7, #16]
  return(result);
 80035ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10f      	bne.n	80035d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b4:	f3ef 8310 	mrs	r3, PRIMASK
 80035b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <osDelay+0x34>
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <osDelay+0x58>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d109      	bne.n	80035dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035c8:	f3ef 8311 	mrs	r3, BASEPRI
 80035cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <osDelay+0x3c>
    stat = osErrorISR;
 80035d4:	f06f 0305 	mvn.w	r3, #5
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e007      	b.n	80035ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f001 f9a8 	bl	800493c <vTaskDelay>
    }
  }

  return (stat);
 80035ec:	697b      	ldr	r3, [r7, #20]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000300 	.word	0x20000300

080035fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800360c:	f3ef 8305 	mrs	r3, IPSR
 8003610:	61bb      	str	r3, [r7, #24]
  return(result);
 8003612:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003614:	2b00      	cmp	r3, #0
 8003616:	d16f      	bne.n	80036f8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003618:	f3ef 8310 	mrs	r3, PRIMASK
 800361c:	617b      	str	r3, [r7, #20]
  return(result);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d169      	bne.n	80036f8 <osMessageQueueNew+0xfc>
 8003624:	4b37      	ldr	r3, [pc, #220]	; (8003704 <osMessageQueueNew+0x108>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d105      	bne.n	8003638 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800362c:	f3ef 8311 	mrs	r3, BASEPRI
 8003630:	613b      	str	r3, [r7, #16]
  return(result);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d15f      	bne.n	80036f8 <osMessageQueueNew+0xfc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d05c      	beq.n	80036f8 <osMessageQueueNew+0xfc>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d059      	beq.n	80036f8 <osMessageQueueNew+0xfc>
    mem = -1;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003648:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d029      	beq.n	80036a4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <osMessageQueueNew+0x82>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b4f      	cmp	r3, #79	; 0x4f
 800365e:	d90e      	bls.n	800367e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	429a      	cmp	r2, r3
 8003676:	d302      	bcc.n	800367e <osMessageQueueNew+0x82>
        mem = 1;
 8003678:	2301      	movs	r3, #1
 800367a:	623b      	str	r3, [r7, #32]
 800367c:	e014      	b.n	80036a8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d110      	bne.n	80036a8 <osMessageQueueNew+0xac>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <osMessageQueueNew+0xac>
          mem = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
 80036a2:	e001      	b.n	80036a8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10b      	bne.n	80036c6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2100      	movs	r1, #0
 80036b8:	9100      	str	r1, [sp, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa53 	bl	8003b68 <xQueueGenericCreateStatic>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24
 80036c4:	e008      	b.n	80036d8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80036cc:	2200      	movs	r2, #0
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fac0 	bl	8003c56 <xQueueGenericCreate>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <osMessageQueueNew+0xf0>
        name = attr->name;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e001      	b.n	80036f0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036f4:	f000 ff16 	bl	8004524 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3728      	adds	r7, #40	; 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000300 	.word	0x20000300

08003708 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003720:	f3ef 8305 	mrs	r3, IPSR
 8003724:	61fb      	str	r3, [r7, #28]
  return(result);
 8003726:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372c:	f3ef 8310 	mrs	r3, PRIMASK
 8003730:	61bb      	str	r3, [r7, #24]
  return(result);
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <osMessageQueuePut+0x44>
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <osMessageQueuePut+0xe0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d12e      	bne.n	800379e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003740:	f3ef 8311 	mrs	r3, BASEPRI
 8003744:	617b      	str	r3, [r7, #20]
  return(result);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d028      	beq.n	800379e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <osMessageQueuePut+0x56>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <osMessageQueuePut+0x56>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800375e:	f06f 0303 	mvn.w	r3, #3
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003764:	e039      	b.n	80037da <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800376a:	f107 0210 	add.w	r2, r7, #16
 800376e:	2300      	movs	r3, #0
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6a38      	ldr	r0, [r7, #32]
 8003774:	f000 fbce 	bl	8003f14 <xQueueGenericSendFromISR>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d003      	beq.n	8003786 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800377e:	f06f 0302 	mvn.w	r3, #2
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003784:	e029      	b.n	80037da <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d026      	beq.n	80037da <osMessageQueuePut+0xd2>
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <osMessageQueuePut+0xe4>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800379c:	e01d      	b.n	80037da <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <osMessageQueuePut+0xa2>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80037aa:	f06f 0303 	mvn.w	r3, #3
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	e014      	b.n	80037dc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80037b2:	2300      	movs	r3, #0
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	6a38      	ldr	r0, [r7, #32]
 80037ba:	f000 faad 	bl	8003d18 <xQueueGenericSend>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d00b      	beq.n	80037dc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80037ca:	f06f 0301 	mvn.w	r3, #1
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	e004      	b.n	80037dc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80037d2:	f06f 0302 	mvn.w	r3, #2
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e000      	b.n	80037dc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000300 	.word	0x20000300
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003806:	f3ef 8305 	mrs	r3, IPSR
 800380a:	61fb      	str	r3, [r7, #28]
  return(result);
 800380c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003812:	f3ef 8310 	mrs	r3, PRIMASK
 8003816:	61bb      	str	r3, [r7, #24]
  return(result);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <osMessageQueueGet+0x42>
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <osMessageQueueGet+0xdc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d12e      	bne.n	8003884 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003826:	f3ef 8311 	mrs	r3, BASEPRI
 800382a:	617b      	str	r3, [r7, #20]
  return(result);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d028      	beq.n	8003884 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <osMessageQueueGet+0x54>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <osMessageQueueGet+0x54>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003844:	f06f 0303 	mvn.w	r3, #3
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800384a:	e038      	b.n	80038be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003850:	f107 0310 	add.w	r3, r7, #16
 8003854:	461a      	mov	r2, r3
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6a38      	ldr	r0, [r7, #32]
 800385a:	f000 fcd3 	bl	8004204 <xQueueReceiveFromISR>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d003      	beq.n	800386c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003864:	f06f 0302 	mvn.w	r3, #2
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800386a:	e028      	b.n	80038be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d025      	beq.n	80038be <osMessageQueueGet+0xce>
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <osMessageQueueGet+0xe0>)
 8003874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003882:	e01c      	b.n	80038be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <osMessageQueueGet+0xa0>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003890:	f06f 0303 	mvn.w	r3, #3
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	e013      	b.n	80038c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	6a38      	ldr	r0, [r7, #32]
 800389e:	f000 fbd1 	bl	8004044 <xQueueReceive>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d00b      	beq.n	80038c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80038ae:	f06f 0301 	mvn.w	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e004      	b.n	80038c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80038b6:	f06f 0302 	mvn.w	r3, #2
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e000      	b.n	80038c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000300 	.word	0x20000300
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a06      	ldr	r2, [pc, #24]	; (80038fc <vApplicationGetIdleTaskMemory+0x28>)
 80038e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <vApplicationGetIdleTaskMemory+0x2c>)
 80038ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000304 	.word	0x20000304
 8003900:	200003c0 	.word	0x200003c0

08003904 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <vApplicationGetTimerTaskMemory+0x2c>)
 8003914:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4a06      	ldr	r2, [pc, #24]	; (8003934 <vApplicationGetTimerTaskMemory+0x30>)
 800391a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	200005c0 	.word	0x200005c0
 8003934:	2000067c 	.word	0x2000067c

08003938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0208 	add.w	r2, r3, #8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f103 0208 	add.w	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ea:	d103      	bne.n	80039f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e00c      	b.n	8003a0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3308      	adds	r3, #8
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e002      	b.n	8003a02 <vListInsert+0x2e>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d2f6      	bcs.n	80039fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6892      	ldr	r2, [r2, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6852      	ldr	r2, [r2, #4]
 8003a64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d103      	bne.n	8003a78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	1e5a      	subs	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
	...

08003a98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ac2:	f002 f8b3 	bl	8005c2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	3b01      	subs	r3, #1
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	441a      	add	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	22ff      	movs	r2, #255	; 0xff
 8003b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	22ff      	movs	r2, #255	; 0xff
 8003b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d114      	bne.n	8003b42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01a      	beq.n	8003b56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3310      	adds	r3, #16
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f9d9 	bl	8004edc <xTaskRemoveFromEventList>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <xQueueGenericReset+0xcc>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	e009      	b.n	8003b56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3310      	adds	r3, #16
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fef6 	bl	8003938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3324      	adds	r3, #36	; 0x24
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fef1 	bl	8003938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b56:	f002 f899 	bl	8005c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	; 0x38
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <xQueueGenericCreateStatic+0x52>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <xQueueGenericCreateStatic+0x56>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericCreateStatic+0x58>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	623b      	str	r3, [r7, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <xQueueGenericCreateStatic+0x7e>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xQueueGenericCreateStatic+0x82>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericCreateStatic+0x84>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	61fb      	str	r3, [r7, #28]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c06:	2350      	movs	r3, #80	; 0x50
 8003c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b50      	cmp	r3, #80	; 0x50
 8003c0e:	d00a      	beq.n	8003c26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61bb      	str	r3, [r7, #24]
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f843 	bl	8003cd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	; 0x28
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	4613      	mov	r3, r2
 8003c62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	613b      	str	r3, [r7, #16]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e004      	b.n	8003c96 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3350      	adds	r3, #80	; 0x50
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f002 f8c6 	bl	8005e2c <pvPortMalloc>
 8003ca0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00f      	beq.n	8003cc8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	3350      	adds	r3, #80	; 0x50
 8003cac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cb6:	79fa      	ldrb	r2, [r7, #7]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f805 	bl	8003cd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e002      	b.n	8003cf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d00:	2101      	movs	r1, #1
 8003d02:	69b8      	ldr	r0, [r7, #24]
 8003d04:	f7ff fec8 	bl	8003a98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueGenericSend+0x32>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <xQueueGenericSend+0x40>
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <xQueueGenericSend+0x44>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <xQueueGenericSend+0x46>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xQueueGenericSend+0x60>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d103      	bne.n	8003d86 <xQueueGenericSend+0x6e>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <xQueueGenericSend+0x72>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <xQueueGenericSend+0x74>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	623b      	str	r3, [r7, #32]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003da6:	f001 fa5f 	bl	8005268 <xTaskGetSchedulerState>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <xQueueGenericSend+0x9e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <xQueueGenericSend+0xa2>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueGenericSend+0xa4>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	61fb      	str	r3, [r7, #28]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dd6:	f001 ff29 	bl	8005c2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <xQueueGenericSend+0xd4>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d129      	bne.n	8003e40 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df2:	f000 fa87 	bl	8004304 <prvCopyDataToQueue>
 8003df6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 f869 	bl	8004edc <xTaskRemoveFromEventList>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d013      	beq.n	8003e38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e10:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <xQueueGenericSend+0x1f8>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	e00a      	b.n	8003e38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e28:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <xQueueGenericSend+0x1f8>)
 8003e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e38:	f001 ff28 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e063      	b.n	8003f08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e46:	f001 ff21 	bl	8005c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e05c      	b.n	8003f08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 f8a3 	bl	8004fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e62:	f001 ff13 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e66:	f000 fe0d 	bl	8004a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e6a:	f001 fedf 	bl	8005c2c <vPortEnterCritical>
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7a:	d103      	bne.n	8003e84 <xQueueGenericSend+0x16c>
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d103      	bne.n	8003e9a <xQueueGenericSend+0x182>
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9a:	f001 fef7 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e9e:	1d3a      	adds	r2, r7, #4
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f892 	bl	8004fd0 <xTaskCheckForTimeOut>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d124      	bne.n	8003efc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eb4:	f000 fb1e 	bl	80044f4 <prvIsQueueFull>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	3310      	adds	r3, #16
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 ffb8 	bl	8004e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ece:	f000 faa9 	bl	8004424 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ed2:	f000 fde5 	bl	8004aa0 <xTaskResumeAll>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f47f af7c 	bne.w	8003dd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <xQueueGenericSend+0x1f8>)
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	e772      	b.n	8003dd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ef2:	f000 fa97 	bl	8004424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef6:	f000 fdd3 	bl	8004aa0 <xTaskResumeAll>
 8003efa:	e76c      	b.n	8003dd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003efe:	f000 fa91 	bl	8004424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f02:	f000 fdcd 	bl	8004aa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f06:	2300      	movs	r3, #0
		}
	}
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3738      	adds	r7, #56	; 0x38
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <xQueueGenericSendFromISR+0x3c>
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <xQueueGenericSendFromISR+0x40>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <xQueueGenericSendFromISR+0x42>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	623b      	str	r3, [r7, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d103      	bne.n	8003f7e <xQueueGenericSendFromISR+0x6a>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <xQueueGenericSendFromISR+0x6e>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <xQueueGenericSendFromISR+0x70>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	61fb      	str	r3, [r7, #28]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f9e:	f001 ff07 	bl	8005db0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	61ba      	str	r2, [r7, #24]
 8003fb8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <xQueueGenericSendFromISR+0xbc>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d12c      	bne.n	800402a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe0:	f000 f990 	bl	8004304 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fe4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fec:	d112      	bne.n	8004014 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 ff6e 	bl	8004edc <xTaskRemoveFromEventList>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00e      	beq.n	8004024 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e007      	b.n	8004024 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004014:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004018:	3301      	adds	r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	b25a      	sxtb	r2, r3
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004024:	2301      	movs	r3, #1
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004028:	e001      	b.n	800402e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800402a:	2300      	movs	r3, #0
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004038:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800403c:	4618      	mov	r0, r3
 800403e:	3738      	adds	r7, #56	; 0x38
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	; 0x30
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <xQueueReceive+0x30>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	623b      	str	r3, [r7, #32]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <xQueueReceive+0x3e>
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <xQueueReceive+0x42>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <xQueueReceive+0x44>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xQueueReceive+0x5e>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	61fb      	str	r3, [r7, #28]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040a2:	f001 f8e1 	bl	8005268 <xTaskGetSchedulerState>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <xQueueReceive+0x6e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <xQueueReceive+0x72>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <xQueueReceive+0x74>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xQueueReceive+0x8e>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	61bb      	str	r3, [r7, #24]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80040d2:	f001 fdab 	bl	8005c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01f      	beq.n	8004122 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e6:	f000 f977 	bl	80043d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00f      	beq.n	800411a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	3310      	adds	r3, #16
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 feec 	bl	8004edc <xTaskRemoveFromEventList>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800410a:	4b3d      	ldr	r3, [pc, #244]	; (8004200 <xQueueReceive+0x1bc>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800411a:	f001 fdb7 	bl	8005c8c <vPortExitCritical>
				return pdPASS;
 800411e:	2301      	movs	r3, #1
 8004120:	e069      	b.n	80041f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004128:	f001 fdb0 	bl	8005c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800412c:	2300      	movs	r3, #0
 800412e:	e062      	b.n	80041f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ff32 	bl	8004fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004144:	f001 fda2 	bl	8005c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004148:	f000 fc9c 	bl	8004a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800414c:	f001 fd6e 	bl	8005c2c <vPortEnterCritical>
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004156:	b25b      	sxtb	r3, r3
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415c:	d103      	bne.n	8004166 <xQueueReceive+0x122>
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800416c:	b25b      	sxtb	r3, r3
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004172:	d103      	bne.n	800417c <xQueueReceive+0x138>
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800417c:	f001 fd86 	bl	8005c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004180:	1d3a      	adds	r2, r7, #4
 8004182:	f107 0310 	add.w	r3, r7, #16
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 ff21 	bl	8004fd0 <xTaskCheckForTimeOut>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d123      	bne.n	80041dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004196:	f000 f997 	bl	80044c8 <prvIsQueueEmpty>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d017      	beq.n	80041d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	3324      	adds	r3, #36	; 0x24
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fe47 	bl	8004e3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041b0:	f000 f938 	bl	8004424 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041b4:	f000 fc74 	bl	8004aa0 <xTaskResumeAll>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d189      	bne.n	80040d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <xQueueReceive+0x1bc>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e780      	b.n	80040d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d2:	f000 f927 	bl	8004424 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041d6:	f000 fc63 	bl	8004aa0 <xTaskResumeAll>
 80041da:	e77a      	b.n	80040d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041de:	f000 f921 	bl	8004424 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041e2:	f000 fc5d 	bl	8004aa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e8:	f000 f96e 	bl	80044c8 <prvIsQueueEmpty>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f43f af6f 	beq.w	80040d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3730      	adds	r7, #48	; 0x30
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08e      	sub	sp, #56	; 0x38
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	623b      	str	r3, [r7, #32]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <xQueueReceiveFromISR+0x3a>
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <xQueueReceiveFromISR+0x3e>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <xQueueReceiveFromISR+0x40>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61fb      	str	r3, [r7, #28]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800425e:	f001 fda7 	bl	8005db0 <vPortValidateInterruptPriority>
	__asm volatile
 8004262:	f3ef 8211 	mrs	r2, BASEPRI
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	61ba      	str	r2, [r7, #24]
 8004278:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800427a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02f      	beq.n	80042ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004298:	f000 f89e 	bl	80043d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80042a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ac:	d112      	bne.n	80042d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	3310      	adds	r3, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fe0e 	bl	8004edc <xTaskRemoveFromEventList>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00e      	beq.n	80042e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e007      	b.n	80042e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80042d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042d8:	3301      	adds	r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	b25a      	sxtb	r2, r3
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80042e4:	2301      	movs	r3, #1
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
 80042e8:	e001      	b.n	80042ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f383 8811 	msr	BASEPRI, r3
}
 80042f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3738      	adds	r7, #56	; 0x38
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d14d      	bne.n	80043c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ffb8 	bl	80052a4 <xTaskPriorityDisinherit>
 8004334:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	e043      	b.n	80043c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d119      	bne.n	8004378 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6898      	ldr	r0, [r3, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	461a      	mov	r2, r3
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	f001 ff70 	bl	8006234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	441a      	add	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d32b      	bcc.n	80043c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	e026      	b.n	80043c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68d8      	ldr	r0, [r3, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	461a      	mov	r2, r3
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	f001 ff56 	bl	8006234 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	425b      	negs	r3, r3
 8004392:	441a      	add	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d207      	bcs.n	80043b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	425b      	negs	r3, r3
 80043ae:	441a      	add	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d105      	bne.n	80043c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043ce:	697b      	ldr	r3, [r7, #20]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	441a      	add	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d303      	bcc.n	800440c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68d9      	ldr	r1, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	461a      	mov	r2, r3
 8004416:	6838      	ldr	r0, [r7, #0]
 8004418:	f001 ff0c 	bl	8006234 <memcpy>
	}
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800442c:	f001 fbfe 	bl	8005c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004436:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004438:	e011      	b.n	800445e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d012      	beq.n	8004468 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd48 	bl	8004edc <xTaskRemoveFromEventList>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004452:	f000 fe1f 	bl	8005094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	3b01      	subs	r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800445e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	dce9      	bgt.n	800443a <prvUnlockQueue+0x16>
 8004466:	e000      	b.n	800446a <prvUnlockQueue+0x46>
					break;
 8004468:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004472:	f001 fc0b 	bl	8005c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004476:	f001 fbd9 	bl	8005c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004480:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004482:	e011      	b.n	80044a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d012      	beq.n	80044b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3310      	adds	r3, #16
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fd23 	bl	8004edc <xTaskRemoveFromEventList>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800449c:	f000 fdfa 	bl	8005094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044a0:	7bbb      	ldrb	r3, [r7, #14]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	dce9      	bgt.n	8004484 <prvUnlockQueue+0x60>
 80044b0:	e000      	b.n	80044b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044bc:	f001 fbe6 	bl	8005c8c <vPortExitCritical>
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044d0:	f001 fbac 	bl	8005c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044dc:	2301      	movs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e001      	b.n	80044e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044e6:	f001 fbd1 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 80044ea:	68fb      	ldr	r3, [r7, #12]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044fc:	f001 fb96 	bl	8005c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	429a      	cmp	r2, r3
 800450a:	d102      	bne.n	8004512 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e001      	b.n	8004516 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004516:	f001 fbb9 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 800451a:	68fb      	ldr	r3, [r7, #12]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e014      	b.n	800455e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004534:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <vQueueAddToRegistry+0x4c>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004540:	490b      	ldr	r1, [pc, #44]	; (8004570 <vQueueAddToRegistry+0x4c>)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <vQueueAddToRegistry+0x4c>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004556:	e006      	b.n	8004566 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b07      	cmp	r3, #7
 8004562:	d9e7      	bls.n	8004534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	20000a7c 	.word	0x20000a7c

08004574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004584:	f001 fb52 	bl	8005c2c <vPortEnterCritical>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800458e:	b25b      	sxtb	r3, r3
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004594:	d103      	bne.n	800459e <vQueueWaitForMessageRestricted+0x2a>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045aa:	d103      	bne.n	80045b4 <vQueueWaitForMessageRestricted+0x40>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b4:	f001 fb6a 	bl	8005c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fc5b 	bl	8004e84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff28 	bl	8004424 <prvUnlockQueue>
	}
 80045d4:	bf00      	nop
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af04      	add	r7, sp, #16
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xTaskCreateStatic+0x2a>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	623b      	str	r3, [r7, #32]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <xTaskCreateStatic+0x46>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61fb      	str	r3, [r7, #28]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004622:	23bc      	movs	r3, #188	; 0xbc
 8004624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2bbc      	cmp	r3, #188	; 0xbc
 800462a:	d00a      	beq.n	8004642 <xTaskCreateStatic+0x66>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	61bb      	str	r3, [r7, #24]
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01e      	beq.n	8004686 <xTaskCreateStatic+0xaa>
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004656:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2202      	movs	r2, #2
 800465c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004660:	2300      	movs	r3, #0
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f851 	bl	8004720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004680:	f000 f8ec 	bl	800485c <prvAddNewTaskToReadyList>
 8004684:	e001      	b.n	800468a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
	}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	; 0x30
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fbbf 	bl	8005e2c <pvPortMalloc>
 80046ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80046b6:	20bc      	movs	r0, #188	; 0xbc
 80046b8:	f001 fbb8 	bl	8005e2c <pvPortMalloc>
 80046bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ca:	e005      	b.n	80046d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f001 fc71 	bl	8005fb4 <vPortFree>
 80046d2:	e001      	b.n	80046d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f80f 	bl	8004720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004702:	69f8      	ldr	r0, [r7, #28]
 8004704:	f000 f8aa 	bl	800485c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004708:	2301      	movs	r3, #1
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e002      	b.n	8004714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004714:	69bb      	ldr	r3, [r7, #24]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	461a      	mov	r2, r3
 8004738:	21a5      	movs	r1, #165	; 0xa5
 800473a:	f001 fd89 	bl	8006250 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004748:	3b01      	subs	r3, #1
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	617b      	str	r3, [r7, #20]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e012      	b.n	80047a4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	7819      	ldrb	r1, [r3, #0]
 8004786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	3334      	adds	r3, #52	; 0x34
 800478e:	460a      	mov	r2, r1
 8004790:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3301      	adds	r3, #1
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d9e9      	bls.n	800477e <prvInitialiseNewTask+0x5e>
 80047aa:	e000      	b.n	80047ae <prvInitialiseNewTask+0x8e>
		{
			break;
 80047ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	2b37      	cmp	r3, #55	; 0x37
 80047ba:	d901      	bls.n	80047c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047bc:	2337      	movs	r3, #55	; 0x37
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff f8cd 	bl	8003976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	3318      	adds	r3, #24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f8c8 	bl	8003976 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	2200      	movs	r2, #0
 8004808:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	3354      	adds	r3, #84	; 0x54
 8004810:	2260      	movs	r2, #96	; 0x60
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f001 fd1b 	bl	8006250 <memset>
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <prvInitialiseNewTask+0x130>)
 800481e:	659a      	str	r2, [r3, #88]	; 0x58
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <prvInitialiseNewTask+0x134>)
 8004824:	65da      	str	r2, [r3, #92]	; 0x5c
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <prvInitialiseNewTask+0x138>)
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	69b8      	ldr	r0, [r7, #24]
 8004832:	f001 f90b 	bl	8005a4c <pxPortInitialiseStack>
 8004836:	4602      	mov	r2, r0
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004848:	bf00      	nop
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	08006eec 	.word	0x08006eec
 8004854:	08006f0c 	.word	0x08006f0c
 8004858:	08006ecc 	.word	0x08006ecc

0800485c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004864:	f001 f9e2 	bl	8005c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <prvAddNewTaskToReadyList+0xc4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <prvAddNewTaskToReadyList+0xc4>)
 8004870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800487a:	4a2a      	ldr	r2, [pc, #168]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <prvAddNewTaskToReadyList+0xc4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d110      	bne.n	80048aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004888:	f000 fc28 	bl	80050dc <prvInitialiseTaskLists>
 800488c:	e00d      	b.n	80048aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <prvAddNewTaskToReadyList+0xcc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d802      	bhi.n	80048aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048a4:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <prvAddNewTaskToReadyList+0xd0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <prvAddNewTaskToReadyList+0xd0>)
 80048b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <prvAddNewTaskToReadyList+0xd0>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <prvAddNewTaskToReadyList+0xd4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <prvAddNewTaskToReadyList+0x74>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <prvAddNewTaskToReadyList+0xd4>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <prvAddNewTaskToReadyList+0xd8>)
 80048de:	441a      	add	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7ff f851 	bl	800398e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 f9ce 	bl	8005c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <prvAddNewTaskToReadyList+0xcc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d207      	bcs.n	8004916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <prvAddNewTaskToReadyList+0xdc>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000f90 	.word	0x20000f90
 8004924:	20000abc 	.word	0x20000abc
 8004928:	20000f9c 	.word	0x20000f9c
 800492c:	20000fac 	.word	0x20000fac
 8004930:	20000f98 	.word	0x20000f98
 8004934:	20000ac0 	.word	0x20000ac0
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d017      	beq.n	800497e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <vTaskDelay+0x60>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <vTaskDelay+0x30>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60bb      	str	r3, [r7, #8]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800496c:	f000 f88a 	bl	8004a84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004970:	2100      	movs	r1, #0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fd04 	bl	8005380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004978:	f000 f892 	bl	8004aa0 <xTaskResumeAll>
 800497c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <vTaskDelay+0x64>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000fb8 	.word	0x20000fb8
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049b2:	463a      	mov	r2, r7
 80049b4:	1d39      	adds	r1, r7, #4
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe ff8a 	bl	80038d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	9202      	str	r2, [sp, #8]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2300      	movs	r3, #0
 80049d0:	460a      	mov	r2, r1
 80049d2:	4924      	ldr	r1, [pc, #144]	; (8004a64 <vTaskStartScheduler+0xc0>)
 80049d4:	4824      	ldr	r0, [pc, #144]	; (8004a68 <vTaskStartScheduler+0xc4>)
 80049d6:	f7ff fe01 	bl	80045dc <xTaskCreateStatic>
 80049da:	4603      	mov	r3, r0
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <vTaskStartScheduler+0xc8>)
 80049de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049e0:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <vTaskStartScheduler+0xc8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e001      	b.n	80049f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d102      	bne.n	80049fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049f8:	f000 fd16 	bl	8005428 <xTimerCreateTimerTask>
 80049fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d11b      	bne.n	8004a3c <vTaskStartScheduler+0x98>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	613b      	str	r3, [r7, #16]
}
 8004a16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <vTaskStartScheduler+0xcc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3354      	adds	r3, #84	; 0x54
 8004a1e:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <vTaskStartScheduler+0xd0>)
 8004a20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <vTaskStartScheduler+0xd4>)
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <vTaskStartScheduler+0xd8>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <vTaskStartScheduler+0xdc>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a36:	f001 f887 	bl	8005b48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a3a:	e00e      	b.n	8004a5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a42:	d10a      	bne.n	8004a5a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60fb      	str	r3, [r7, #12]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <vTaskStartScheduler+0xb4>
}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	08006d54 	.word	0x08006d54
 8004a68:	080050ad 	.word	0x080050ad
 8004a6c:	20000fb4 	.word	0x20000fb4
 8004a70:	20000abc 	.word	0x20000abc
 8004a74:	20000010 	.word	0x20000010
 8004a78:	20000fb0 	.word	0x20000fb0
 8004a7c:	20000f9c 	.word	0x20000f9c
 8004a80:	20000f94 	.word	0x20000f94

08004a84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <vTaskSuspendAll+0x18>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <vTaskSuspendAll+0x18>)
 8004a90:	6013      	str	r3, [r2, #0]
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000fb8 	.word	0x20000fb8

08004aa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aae:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <xTaskResumeAll+0x118>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <xTaskResumeAll+0x2c>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	603b      	str	r3, [r7, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004acc:	f001 f8ae 	bl	8005c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <xTaskResumeAll+0x118>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	4a38      	ldr	r2, [pc, #224]	; (8004bb8 <xTaskResumeAll+0x118>)
 8004ad8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ada:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <xTaskResumeAll+0x118>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d162      	bne.n	8004ba8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <xTaskResumeAll+0x11c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d05e      	beq.n	8004ba8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aea:	e02f      	b.n	8004b4c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004aec:	4b34      	ldr	r3, [pc, #208]	; (8004bc0 <xTaskResumeAll+0x120>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3318      	adds	r3, #24
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe ffa3 	bl	8003a44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe ff9e 	bl	8003a44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <xTaskResumeAll+0x124>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d903      	bls.n	8004b1c <xTaskResumeAll+0x7c>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <xTaskResumeAll+0x124>)
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <xTaskResumeAll+0x128>)
 8004b2a:	441a      	add	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7fe ff2b 	bl	800398e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <xTaskResumeAll+0x12c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <xTaskResumeAll+0x130>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b4c:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <xTaskResumeAll+0x120>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1cb      	bne.n	8004aec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b5a:	f000 fb61 	bl	8005220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <xTaskResumeAll+0x134>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b6a:	f000 f845 	bl	8004bf8 <xTaskIncrementTick>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b74:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <xTaskResumeAll+0x130>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f1      	bne.n	8004b6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <xTaskResumeAll+0x134>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <xTaskResumeAll+0x130>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <xTaskResumeAll+0x138>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ba8:	f001 f870 	bl	8005c8c <vPortExitCritical>

	return xAlreadyYielded;
 8004bac:	68bb      	ldr	r3, [r7, #8]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000fb8 	.word	0x20000fb8
 8004bbc:	20000f90 	.word	0x20000f90
 8004bc0:	20000f50 	.word	0x20000f50
 8004bc4:	20000f98 	.word	0x20000f98
 8004bc8:	20000ac0 	.word	0x20000ac0
 8004bcc:	20000abc 	.word	0x20000abc
 8004bd0:	20000fa4 	.word	0x20000fa4
 8004bd4:	20000fa0 	.word	0x20000fa0
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <xTaskGetTickCount+0x18>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004be8:	687b      	ldr	r3, [r7, #4]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	20000f94 	.word	0x20000f94

08004bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c02:	4b51      	ldr	r3, [pc, #324]	; (8004d48 <xTaskIncrementTick+0x150>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 808e 	bne.w	8004d28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c0c:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <xTaskIncrementTick+0x154>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c14:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <xTaskIncrementTick+0x154>)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d120      	bne.n	8004c62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c20:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	603b      	str	r3, [r7, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xTaskIncrementTick+0x46>
 8004c40:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <xTaskIncrementTick+0x15c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a41      	ldr	r2, [pc, #260]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4a41      	ldr	r2, [pc, #260]	; (8004d54 <xTaskIncrementTick+0x15c>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <xTaskIncrementTick+0x160>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <xTaskIncrementTick+0x160>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	f000 fadf 	bl	8005220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c62:	4b3e      	ldr	r3, [pc, #248]	; (8004d5c <xTaskIncrementTick+0x164>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d34e      	bcc.n	8004d0a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6c:	4b38      	ldr	r3, [pc, #224]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <xTaskIncrementTick+0x82>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <xTaskIncrementTick+0x84>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <xTaskIncrementTick+0x164>)
 8004c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c86:	601a      	str	r2, [r3, #0]
					break;
 8004c88:	e03f      	b.n	8004d0a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <xTaskIncrementTick+0x158>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d203      	bcs.n	8004caa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ca2:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <xTaskIncrementTick+0x164>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6013      	str	r3, [r2, #0]
						break;
 8004ca8:	e02f      	b.n	8004d0a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fec8 	bl	8003a44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe febf 	bl	8003a44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <xTaskIncrementTick+0x168>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d903      	bls.n	8004cda <xTaskIncrementTick+0xe2>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <xTaskIncrementTick+0x168>)
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <xTaskIncrementTick+0x16c>)
 8004ce8:	441a      	add	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fe fe4c 	bl	800398e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <xTaskIncrementTick+0x170>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3b3      	bcc.n	8004c6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d08:	e7b0      	b.n	8004c6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <xTaskIncrementTick+0x170>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4914      	ldr	r1, [pc, #80]	; (8004d64 <xTaskIncrementTick+0x16c>)
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d907      	bls.n	8004d32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004d22:	2301      	movs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e004      	b.n	8004d32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d28:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <xTaskIncrementTick+0x174>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	; (8004d6c <xTaskIncrementTick+0x174>)
 8004d30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <xTaskIncrementTick+0x178>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d3e:	697b      	ldr	r3, [r7, #20]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000fb8 	.word	0x20000fb8
 8004d4c:	20000f94 	.word	0x20000f94
 8004d50:	20000f48 	.word	0x20000f48
 8004d54:	20000f4c 	.word	0x20000f4c
 8004d58:	20000fa8 	.word	0x20000fa8
 8004d5c:	20000fb0 	.word	0x20000fb0
 8004d60:	20000f98 	.word	0x20000f98
 8004d64:	20000ac0 	.word	0x20000ac0
 8004d68:	20000abc 	.word	0x20000abc
 8004d6c:	20000fa0 	.word	0x20000fa0
 8004d70:	20000fa4 	.word	0x20000fa4

08004d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d7a:	4b2a      	ldr	r3, [pc, #168]	; (8004e24 <vTaskSwitchContext+0xb0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d82:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <vTaskSwitchContext+0xb4>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d88:	e046      	b.n	8004e18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004d8a:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <vTaskSwitchContext+0xb4>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d90:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <vTaskSwitchContext+0xb8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e010      	b.n	8004dba <vTaskSwitchContext+0x46>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <vTaskSwitchContext+0x3e>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	491d      	ldr	r1, [pc, #116]	; (8004e30 <vTaskSwitchContext+0xbc>)
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0e4      	beq.n	8004d98 <vTaskSwitchContext+0x24>
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <vTaskSwitchContext+0xbc>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	3308      	adds	r3, #8
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d104      	bne.n	8004dfe <vTaskSwitchContext+0x8a>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <vTaskSwitchContext+0xc0>)
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <vTaskSwitchContext+0xb8>)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <vTaskSwitchContext+0xc0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3354      	adds	r3, #84	; 0x54
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <vTaskSwitchContext+0xc4>)
 8004e16:	6013      	str	r3, [r2, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000fb8 	.word	0x20000fb8
 8004e28:	20000fa4 	.word	0x20000fa4
 8004e2c:	20000f98 	.word	0x20000f98
 8004e30:	20000ac0 	.word	0x20000ac0
 8004e34:	20000abc 	.word	0x20000abc
 8004e38:	20000010 	.word	0x20000010

08004e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <vTaskPlaceOnEventList+0x44>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3318      	adds	r3, #24
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe fdb2 	bl	80039d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e70:	2101      	movs	r1, #1
 8004e72:	6838      	ldr	r0, [r7, #0]
 8004e74:	f000 fa84 	bl	8005380 <prvAddCurrentTaskToDelayedList>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000abc 	.word	0x20000abc

08004e84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7fe fd6a 	bl	800398e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ec4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	68b8      	ldr	r0, [r7, #8]
 8004eca:	f000 fa59 	bl	8005380 <prvAddCurrentTaskToDelayedList>
	}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000abc 	.word	0x20000abc

08004edc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	60fb      	str	r3, [r7, #12]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe fd99 	bl	8003a44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <xTaskRemoveFromEventList+0xb0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fd90 	bl	8003a44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <xTaskRemoveFromEventList+0xb4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d903      	bls.n	8004f38 <xTaskRemoveFromEventList+0x5c>
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <xTaskRemoveFromEventList+0xb4>)
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <xTaskRemoveFromEventList+0xb8>)
 8004f46:	441a      	add	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe fd1d 	bl	800398e <vListInsertEnd>
 8004f54:	e005      	b.n	8004f62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	3318      	adds	r3, #24
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	480e      	ldr	r0, [pc, #56]	; (8004f98 <xTaskRemoveFromEventList+0xbc>)
 8004f5e:	f7fe fd16 	bl	800398e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <xTaskRemoveFromEventList+0xc0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d905      	bls.n	8004f7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <xTaskRemoveFromEventList+0xc4>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e001      	b.n	8004f80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004f80:	697b      	ldr	r3, [r7, #20]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000fb8 	.word	0x20000fb8
 8004f90:	20000f98 	.word	0x20000f98
 8004f94:	20000ac0 	.word	0x20000ac0
 8004f98:	20000f50 	.word	0x20000f50
 8004f9c:	20000abc 	.word	0x20000abc
 8004fa0:	20000fa4 	.word	0x20000fa4

08004fa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <vTaskInternalSetTimeOutState+0x24>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <vTaskInternalSetTimeOutState+0x28>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000fa8 	.word	0x20000fa8
 8004fcc:	20000f94 	.word	0x20000f94

08004fd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	613b      	str	r3, [r7, #16]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60fb      	str	r3, [r7, #12]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005012:	f000 fe0b 	bl	8005c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005016:	4b1d      	ldr	r3, [pc, #116]	; (800508c <xTaskCheckForTimeOut+0xbc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502e:	d102      	bne.n	8005036 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e023      	b.n	800507e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <xTaskCheckForTimeOut+0xc0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d007      	beq.n	8005052 <xTaskCheckForTimeOut+0x82>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e015      	b.n	800507e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	429a      	cmp	r2, r3
 800505a:	d20b      	bcs.n	8005074 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ff9b 	bl	8004fa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e004      	b.n	800507e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800507a:	2301      	movs	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800507e:	f000 fe05 	bl	8005c8c <vPortExitCritical>

	return xReturn;
 8005082:	69fb      	ldr	r3, [r7, #28]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000f94 	.word	0x20000f94
 8005090:	20000fa8 	.word	0x20000fa8

08005094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <vTaskMissedYield+0x14>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	bf00      	nop
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000fa4 	.word	0x20000fa4

080050ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050b4:	f000 f852 	bl	800515c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <prvIdleTask+0x28>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d9f9      	bls.n	80050b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <prvIdleTask+0x2c>)
 80050c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050d0:	e7f0      	b.n	80050b4 <prvIdleTask+0x8>
 80050d2:	bf00      	nop
 80050d4:	20000ac0 	.word	0x20000ac0
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e00c      	b.n	8005102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4a12      	ldr	r2, [pc, #72]	; (800513c <prvInitialiseTaskLists+0x60>)
 80050f4:	4413      	add	r3, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fc1e 	bl	8003938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3301      	adds	r3, #1
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b37      	cmp	r3, #55	; 0x37
 8005106:	d9ef      	bls.n	80050e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005108:	480d      	ldr	r0, [pc, #52]	; (8005140 <prvInitialiseTaskLists+0x64>)
 800510a:	f7fe fc15 	bl	8003938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800510e:	480d      	ldr	r0, [pc, #52]	; (8005144 <prvInitialiseTaskLists+0x68>)
 8005110:	f7fe fc12 	bl	8003938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005114:	480c      	ldr	r0, [pc, #48]	; (8005148 <prvInitialiseTaskLists+0x6c>)
 8005116:	f7fe fc0f 	bl	8003938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800511a:	480c      	ldr	r0, [pc, #48]	; (800514c <prvInitialiseTaskLists+0x70>)
 800511c:	f7fe fc0c 	bl	8003938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005120:	480b      	ldr	r0, [pc, #44]	; (8005150 <prvInitialiseTaskLists+0x74>)
 8005122:	f7fe fc09 	bl	8003938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <prvInitialiseTaskLists+0x78>)
 8005128:	4a05      	ldr	r2, [pc, #20]	; (8005140 <prvInitialiseTaskLists+0x64>)
 800512a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <prvInitialiseTaskLists+0x7c>)
 800512e:	4a05      	ldr	r2, [pc, #20]	; (8005144 <prvInitialiseTaskLists+0x68>)
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000ac0 	.word	0x20000ac0
 8005140:	20000f20 	.word	0x20000f20
 8005144:	20000f34 	.word	0x20000f34
 8005148:	20000f50 	.word	0x20000f50
 800514c:	20000f64 	.word	0x20000f64
 8005150:	20000f7c 	.word	0x20000f7c
 8005154:	20000f48 	.word	0x20000f48
 8005158:	20000f4c 	.word	0x20000f4c

0800515c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005162:	e019      	b.n	8005198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005164:	f000 fd62 	bl	8005c2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <prvCheckTasksWaitingTermination+0x50>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fc65 	bl	8003a44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <prvCheckTasksWaitingTermination+0x54>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3b01      	subs	r3, #1
 8005180:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <prvCheckTasksWaitingTermination+0x54>)
 8005182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <prvCheckTasksWaitingTermination+0x58>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3b01      	subs	r3, #1
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <prvCheckTasksWaitingTermination+0x58>)
 800518c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800518e:	f000 fd7d 	bl	8005c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f810 	bl	80051b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <prvCheckTasksWaitingTermination+0x58>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e1      	bne.n	8005164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000f64 	.word	0x20000f64
 80051b0:	20000f90 	.word	0x20000f90
 80051b4:	20000f78 	.word	0x20000f78

080051b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3354      	adds	r3, #84	; 0x54
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f8ed 	bl	80063a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 feeb 	bl	8005fb4 <vPortFree>
				vPortFree( pxTCB );
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fee8 	bl	8005fb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051e4:	e018      	b.n	8005218 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d103      	bne.n	80051f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fedf 	bl	8005fb4 <vPortFree>
	}
 80051f6:	e00f      	b.n	8005218 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d00a      	beq.n	8005218 <prvDeleteTCB+0x60>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60fb      	str	r3, [r7, #12]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <prvDeleteTCB+0x5e>
	}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <prvResetNextTaskUnblockTime+0x40>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <prvResetNextTaskUnblockTime+0x14>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <prvResetNextTaskUnblockTime+0x16>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvResetNextTaskUnblockTime+0x44>)
 800523c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005240:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005242:	e008      	b.n	8005256 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <prvResetNextTaskUnblockTime+0x40>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4a04      	ldr	r2, [pc, #16]	; (8005264 <prvResetNextTaskUnblockTime+0x44>)
 8005254:	6013      	str	r3, [r2, #0]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr
 8005260:	20000f48 	.word	0x20000f48
 8005264:	20000fb0 	.word	0x20000fb0

08005268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <xTaskGetSchedulerState+0x34>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005276:	2301      	movs	r3, #1
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	e008      	b.n	800528e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <xTaskGetSchedulerState+0x38>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005284:	2302      	movs	r3, #2
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	e001      	b.n	800528e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800528a:	2300      	movs	r3, #0
 800528c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800528e:	687b      	ldr	r3, [r7, #4]
	}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000f9c 	.word	0x20000f9c
 80052a0:	20000fb8 	.word	0x20000fb8

080052a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d056      	beq.n	8005368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ba:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <xTaskPriorityDisinherit+0xd0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d00a      	beq.n	80052da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	429a      	cmp	r2, r3
 800530c:	d02c      	beq.n	8005368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d128      	bne.n	8005368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	3304      	adds	r3, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fb92 	bl	8003a44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <xTaskPriorityDisinherit+0xd4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <xTaskPriorityDisinherit+0xa4>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <xTaskPriorityDisinherit+0xd4>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a09      	ldr	r2, [pc, #36]	; (800537c <xTaskPriorityDisinherit+0xd8>)
 8005356:	441a      	add	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe fb15 	bl	800398e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005368:	697b      	ldr	r3, [r7, #20]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000abc 	.word	0x20000abc
 8005378:	20000f98 	.word	0x20000f98
 800537c:	20000ac0 	.word	0x20000ac0

08005380 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800538a:	4b21      	ldr	r3, [pc, #132]	; (8005410 <prvAddCurrentTaskToDelayedList+0x90>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3304      	adds	r3, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fb54 	bl	8003a44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a2:	d10a      	bne.n	80053ba <prvAddCurrentTaskToDelayedList+0x3a>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4819      	ldr	r0, [pc, #100]	; (8005418 <prvAddCurrentTaskToDelayedList+0x98>)
 80053b4:	f7fe faeb 	bl	800398e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053b8:	e026      	b.n	8005408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d209      	bcs.n	80053e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053d2:	4b12      	ldr	r3, [pc, #72]	; (800541c <prvAddCurrentTaskToDelayedList+0x9c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7fe faf8 	bl	80039d4 <vListInsert>
}
 80053e4:	e010      	b.n	8005408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e6:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <prvAddCurrentTaskToDelayedList+0xa0>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvAddCurrentTaskToDelayedList+0x94>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7fe faee 	bl	80039d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d202      	bcs.n	8005408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6013      	str	r3, [r2, #0]
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000f94 	.word	0x20000f94
 8005414:	20000abc 	.word	0x20000abc
 8005418:	20000f7c 	.word	0x20000f7c
 800541c:	20000f4c 	.word	0x20000f4c
 8005420:	20000f48 	.word	0x20000f48
 8005424:	20000fb0 	.word	0x20000fb0

08005428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005432:	f000 facb 	bl	80059cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005436:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <xTimerCreateTimerTask+0x80>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d021      	beq.n	8005482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005446:	1d3a      	adds	r2, r7, #4
 8005448:	f107 0108 	add.w	r1, r7, #8
 800544c:	f107 030c 	add.w	r3, r7, #12
 8005450:	4618      	mov	r0, r3
 8005452:	f7fe fa57 	bl	8003904 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	9202      	str	r2, [sp, #8]
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	2302      	movs	r3, #2
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	460a      	mov	r2, r1
 8005468:	4910      	ldr	r1, [pc, #64]	; (80054ac <xTimerCreateTimerTask+0x84>)
 800546a:	4811      	ldr	r0, [pc, #68]	; (80054b0 <xTimerCreateTimerTask+0x88>)
 800546c:	f7ff f8b6 	bl	80045dc <xTaskCreateStatic>
 8005470:	4603      	mov	r3, r0
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <xTimerCreateTimerTask+0x8c>)
 8005474:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005476:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <xTimerCreateTimerTask+0x8c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	613b      	str	r3, [r7, #16]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800549e:	697b      	ldr	r3, [r7, #20]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000fec 	.word	0x20000fec
 80054ac:	08006d5c 	.word	0x08006d5c
 80054b0:	080055d5 	.word	0x080055d5
 80054b4:	20000ff0 	.word	0x20000ff0

080054b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	623b      	str	r3, [r7, #32]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <xTimerGenericCommand+0x98>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02a      	beq.n	8005544 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	dc18      	bgt.n	8005532 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005500:	f7ff feb2 	bl	8005268 <xTaskGetSchedulerState>
 8005504:	4603      	mov	r3, r0
 8005506:	2b02      	cmp	r3, #2
 8005508:	d109      	bne.n	800551e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <xTimerGenericCommand+0x98>)
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	f107 0110 	add.w	r1, r7, #16
 8005512:	2300      	movs	r3, #0
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	f7fe fbff 	bl	8003d18 <xQueueGenericSend>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24
 800551c:	e012      	b.n	8005544 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <xTimerGenericCommand+0x98>)
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	f107 0110 	add.w	r1, r7, #16
 8005526:	2300      	movs	r3, #0
 8005528:	2200      	movs	r2, #0
 800552a:	f7fe fbf5 	bl	8003d18 <xQueueGenericSend>
 800552e:	6278      	str	r0, [r7, #36]	; 0x24
 8005530:	e008      	b.n	8005544 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <xTimerGenericCommand+0x98>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f107 0110 	add.w	r1, r7, #16
 800553a:	2300      	movs	r3, #0
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	f7fe fce9 	bl	8003f14 <xQueueGenericSendFromISR>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005546:	4618      	mov	r0, r3
 8005548:	3728      	adds	r7, #40	; 0x28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000fec 	.word	0x20000fec

08005554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800555e:	4b1c      	ldr	r3, [pc, #112]	; (80055d0 <prvProcessExpiredTimer+0x7c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fa69 	bl	8003a44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d122      	bne.n	80055c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	18d1      	adds	r1, r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	6978      	ldr	r0, [r7, #20]
 8005588:	f000 f8c8 	bl	800571c <prvInsertTimerInActiveList>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d016      	beq.n	80055c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005592:	2300      	movs	r3, #0
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	2100      	movs	r1, #0
 800559c:	6978      	ldr	r0, [r7, #20]
 800559e:	f7ff ff8b 	bl	80054b8 <xTimerGenericCommand>
 80055a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	60fb      	str	r3, [r7, #12]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	6978      	ldr	r0, [r7, #20]
 80055c6:	4798      	blx	r3
}
 80055c8:	bf00      	nop
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000fe4 	.word	0x20000fe4

080055d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f857 	bl	8005694 <prvGetNextExpireTime>
 80055e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4619      	mov	r1, r3
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f803 	bl	80055f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055f2:	f000 f8d5 	bl	80057a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055f6:	e7f1      	b.n	80055dc <prvTimerTask+0x8>

080055f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005602:	f7ff fa3f 	bl	8004a84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f866 	bl	80056dc <prvSampleTimeNow>
 8005610:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d130      	bne.n	800567a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <prvProcessTimerOrBlockTask+0x3c>
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d806      	bhi.n	8005634 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005626:	f7ff fa3b 	bl	8004aa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ff91 	bl	8005554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005632:	e024      	b.n	800567e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <prvProcessTimerOrBlockTask+0x90>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <prvProcessTimerOrBlockTask+0x94>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	f7fe ff8b 	bl	8004574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800565e:	f7ff fa1f 	bl	8004aa0 <xTaskResumeAll>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <prvProcessTimerOrBlockTask+0x98>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
}
 8005678:	e001      	b.n	800567e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800567a:	f7ff fa11 	bl	8004aa0 <xTaskResumeAll>
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000fe8 	.word	0x20000fe8
 800568c:	20000fec 	.word	0x20000fec
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <prvGetNextExpireTime+0x44>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <prvGetNextExpireTime+0x44>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e001      	b.n	80056ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000fe4 	.word	0x20000fe4

080056dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056e4:	f7ff fa7a 	bl	8004bdc <xTaskGetTickCount>
 80056e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <prvSampleTimeNow+0x3c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d205      	bcs.n	8005700 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056f4:	f000 f908 	bl	8005908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e002      	b.n	8005706 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005706:	4a04      	ldr	r2, [pc, #16]	; (8005718 <prvSampleTimeNow+0x3c>)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800570c:	68fb      	ldr	r3, [r7, #12]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000ff4 	.word	0x20000ff4

0800571c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d812      	bhi.n	8005768 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e01b      	b.n	800578e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <prvInsertTimerInActiveList+0x7c>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe f937 	bl	80039d4 <vListInsert>
 8005766:	e012      	b.n	800578e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d206      	bcs.n	800577e <prvInsertTimerInActiveList+0x62>
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d302      	bcc.n	800577e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e007      	b.n	800578e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <prvInsertTimerInActiveList+0x80>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fe f923 	bl	80039d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000fe8 	.word	0x20000fe8
 800579c:	20000fe4 	.word	0x20000fe4

080057a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	; 0x38
 80057a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057a6:	e09d      	b.n	80058e4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da18      	bge.n	80057e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	3304      	adds	r3, #4
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d6:	6850      	ldr	r0, [r2, #4]
 80057d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057da:	6892      	ldr	r2, [r2, #8]
 80057dc:	4611      	mov	r1, r2
 80057de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db7d      	blt.n	80058e2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	3304      	adds	r3, #4
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe f924 	bl	8003a44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057fc:	463b      	mov	r3, r7
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff6c 	bl	80056dc <prvSampleTimeNow>
 8005804:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b09      	cmp	r3, #9
 800580a:	d86b      	bhi.n	80058e4 <prvProcessReceivedCommands+0x144>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <prvProcessReceivedCommands+0x74>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	0800583d 	.word	0x0800583d
 8005818:	0800583d 	.word	0x0800583d
 800581c:	0800583d 	.word	0x0800583d
 8005820:	080058e5 	.word	0x080058e5
 8005824:	08005899 	.word	0x08005899
 8005828:	080058d1 	.word	0x080058d1
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800583d 	.word	0x0800583d
 8005834:	080058e5 	.word	0x080058e5
 8005838:	08005899 	.word	0x08005899
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	18d1      	adds	r1, r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584a:	f7ff ff67 	bl	800571c <prvInsertTimerInActiveList>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d047      	beq.n	80058e4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d13f      	bne.n	80058e4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	441a      	add	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	2300      	movs	r3, #0
 8005872:	2100      	movs	r1, #0
 8005874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005876:	f7ff fe1f 	bl	80054b8 <xTimerGenericCommand>
 800587a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d130      	bne.n	80058e4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	61bb      	str	r3, [r7, #24]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	617b      	str	r3, [r7, #20]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	18d1      	adds	r1, r2, r3
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ca:	f7ff ff27 	bl	800571c <prvInsertTimerInActiveList>
					break;
 80058ce:	e009      	b.n	80058e4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80058da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058dc:	f000 fb6a 	bl	8005fb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058e0:	e000      	b.n	80058e4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <prvProcessReceivedCommands+0x164>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1d39      	adds	r1, r7, #4
 80058ea:	2200      	movs	r2, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe fba9 	bl	8004044 <xQueueReceive>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af57 	bne.w	80057a8 <prvProcessReceivedCommands+0x8>
	}
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	3730      	adds	r7, #48	; 0x30
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000fec 	.word	0x20000fec

08005908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800590e:	e045      	b.n	800599c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005910:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <prvSwitchTimerLists+0xbc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800591a:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <prvSwitchTimerLists+0xbc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3304      	adds	r3, #4
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe f88b 	bl	8003a44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d12e      	bne.n	800599c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4413      	add	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d90e      	bls.n	800596e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <prvSwitchTimerLists+0xbc>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe f834 	bl	80039d4 <vListInsert>
 800596c:	e016      	b.n	800599c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800596e:	2300      	movs	r3, #0
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	2100      	movs	r1, #0
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff fd9d 	bl	80054b8 <xTimerGenericCommand>
 800597e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	603b      	str	r3, [r7, #0]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <prvSwitchTimerLists+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1b4      	bne.n	8005910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <prvSwitchTimerLists+0xbc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <prvSwitchTimerLists+0xc0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <prvSwitchTimerLists+0xbc>)
 80059b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059b4:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <prvSwitchTimerLists+0xc0>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6013      	str	r3, [r2, #0]
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000fe4 	.word	0x20000fe4
 80059c8:	20000fe8 	.word	0x20000fe8

080059cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059d2:	f000 f92b 	bl	8005c2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059d6:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d120      	bne.n	8005a20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059de:	4814      	ldr	r0, [pc, #80]	; (8005a30 <prvCheckForValidListAndQueue+0x64>)
 80059e0:	f7fd ffaa 	bl	8003938 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059e4:	4813      	ldr	r0, [pc, #76]	; (8005a34 <prvCheckForValidListAndQueue+0x68>)
 80059e6:	f7fd ffa7 	bl	8003938 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <prvCheckForValidListAndQueue+0x6c>)
 80059ec:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <prvCheckForValidListAndQueue+0x64>)
 80059ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <prvCheckForValidListAndQueue+0x70>)
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <prvCheckForValidListAndQueue+0x68>)
 80059f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059f6:	2300      	movs	r3, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <prvCheckForValidListAndQueue+0x74>)
 80059fc:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <prvCheckForValidListAndQueue+0x78>)
 80059fe:	2110      	movs	r1, #16
 8005a00:	200a      	movs	r0, #10
 8005a02:	f7fe f8b1 	bl	8003b68 <xQueueGenericCreateStatic>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 8005a0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <prvCheckForValidListAndQueue+0x60>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	490b      	ldr	r1, [pc, #44]	; (8005a48 <prvCheckForValidListAndQueue+0x7c>)
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe fd82 	bl	8004524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a20:	f000 f934 	bl	8005c8c <vPortExitCritical>
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000fec 	.word	0x20000fec
 8005a30:	20000fbc 	.word	0x20000fbc
 8005a34:	20000fd0 	.word	0x20000fd0
 8005a38:	20000fe4 	.word	0x20000fe4
 8005a3c:	20000fe8 	.word	0x20000fe8
 8005a40:	20001098 	.word	0x20001098
 8005a44:	20000ff8 	.word	0x20000ff8
 8005a48:	08006d64 	.word	0x08006d64

08005a4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b04      	subs	r3, #4
 8005a5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b04      	subs	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a7c:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <pxPortInitialiseStack+0x54>)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3b14      	subs	r3, #20
 8005a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3b20      	subs	r3, #32
 8005a92:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a94:	68fb      	ldr	r3, [r7, #12]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	08005aa5 	.word	0x08005aa5

08005aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <prvTaskExitError+0x54>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab6:	d00a      	beq.n	8005ace <prvTaskExitError+0x2a>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60fb      	str	r3, [r7, #12]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <prvTaskExitError+0x28>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60bb      	str	r3, [r7, #8]
}
 8005ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ae2:	bf00      	nop
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0fc      	beq.n	8005ae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000000c 	.word	0x2000000c
 8005afc:	00000000 	.word	0x00000000

08005b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <pxCurrentTCBConst2>)
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	6808      	ldr	r0, [r1, #0]
 8005b06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b0a:	f380 8809 	msr	PSP, r0
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8811 	msr	BASEPRI, r0
 8005b1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005b1e:	4770      	bx	lr

08005b20 <pxCurrentTCBConst2>:
 8005b20:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005b28:	4806      	ldr	r0, [pc, #24]	; (8005b44 <prvPortStartFirstTask+0x1c>)
 8005b2a:	6800      	ldr	r0, [r0, #0]
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	f380 8808 	msr	MSP, r0
 8005b32:	b662      	cpsie	i
 8005b34:	b661      	cpsie	f
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	df00      	svc	0
 8005b40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b42:	bf00      	nop
 8005b44:	e000ed08 	.word	0xe000ed08

08005b48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b4e:	4b32      	ldr	r3, [pc, #200]	; (8005c18 <xPortStartScheduler+0xd0>)
 8005b50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <xPortStartScheduler+0xd4>)
 8005b74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005b78:	2207      	movs	r2, #7
 8005b7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b7c:	e009      	b.n	8005b92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005b7e:	4b28      	ldr	r3, [pc, #160]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005b86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d0ef      	beq.n	8005b7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b9e:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f1c3 0307 	rsb	r3, r3, #7
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d00a      	beq.n	8005bc0 <xPortStartScheduler+0x78>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60bb      	str	r3, [r7, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005bc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bd2:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <xPortStartScheduler+0xd8>)
 8005bd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <xPortStartScheduler+0xdc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <xPortStartScheduler+0xdc>)
 8005be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005be8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bea:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <xPortStartScheduler+0xdc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a0d      	ldr	r2, [pc, #52]	; (8005c24 <xPortStartScheduler+0xdc>)
 8005bf0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bf4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bf6:	f000 f8b9 	bl	8005d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <xPortStartScheduler+0xe0>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c00:	f7ff ff92 	bl	8005b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c04:	f7ff f8b6 	bl	8004d74 <vTaskSwitchContext>
	prvTaskExitError();
 8005c08:	f7ff ff4c 	bl	8005aa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	e000e400 	.word	0xe000e400
 8005c1c:	200010e8 	.word	0x200010e8
 8005c20:	200010ec 	.word	0x200010ec
 8005c24:	e000ed20 	.word	0xe000ed20
 8005c28:	2000000c 	.word	0x2000000c

08005c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	607b      	str	r3, [r7, #4]
}
 8005c44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <vPortEnterCritical+0x58>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a0d      	ldr	r2, [pc, #52]	; (8005c84 <vPortEnterCritical+0x58>)
 8005c4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <vPortEnterCritical+0x58>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d10f      	bne.n	8005c78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <vPortEnterCritical+0x5c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	603b      	str	r3, [r7, #0]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <vPortEnterCritical+0x4a>
	}
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	2000000c 	.word	0x2000000c
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <vPortExitCritical+0x4c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <vPortExitCritical+0x24>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	607b      	str	r3, [r7, #4]
}
 8005cac:	bf00      	nop
 8005cae:	e7fe      	b.n	8005cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <vPortExitCritical+0x4c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <vPortExitCritical+0x4c>)
 8005cb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <vPortExitCritical+0x4c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <vPortExitCritical+0x42>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	f383 8811 	msr	BASEPRI, r3
}
 8005ccc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	2000000c 	.word	0x2000000c
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ce0:	f3ef 8009 	mrs	r0, PSP
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <pxCurrentTCBConst>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cf0:	6010      	str	r0, [r2, #0]
 8005cf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005cf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cfa:	f380 8811 	msr	BASEPRI, r0
 8005cfe:	f7ff f839 	bl	8004d74 <vTaskSwitchContext>
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8811 	msr	BASEPRI, r0
 8005d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d16:	f380 8809 	msr	PSP, r0
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	4770      	bx	lr

08005d20 <pxCurrentTCBConst>:
 8005d20:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	607b      	str	r3, [r7, #4]
}
 8005d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d42:	f7fe ff59 	bl	8004bf8 <xTaskIncrementTick>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <SysTick_Handler+0x40>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f383 8811 	msr	BASEPRI, r3
}
 8005d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <vPortSetupTimerInterrupt+0x30>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d76:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d7c:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <vPortSetupTimerInterrupt+0x38>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <vPortSetupTimerInterrupt+0x3c>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	4a08      	ldr	r2, [pc, #32]	; (8005dac <vPortSetupTimerInterrupt+0x40>)
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d8e:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <vPortSetupTimerInterrupt+0x30>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	e000e010 	.word	0xe000e010
 8005da0:	e000e018 	.word	0xe000e018
 8005da4:	20000000 	.word	0x20000000
 8005da8:	10624dd3 	.word	0x10624dd3
 8005dac:	e000e014 	.word	0xe000e014

08005db0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005db6:	f3ef 8305 	mrs	r3, IPSR
 8005dba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d914      	bls.n	8005dec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <vPortValidateInterruptPriority+0x6c>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005dcc:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <vPortValidateInterruptPriority+0x70>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	7afa      	ldrb	r2, [r7, #11]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d20a      	bcs.n	8005dec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	607b      	str	r3, [r7, #4]
}
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <vPortValidateInterruptPriority+0x74>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <vPortValidateInterruptPriority+0x78>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d90a      	bls.n	8005e12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	603b      	str	r3, [r7, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <vPortValidateInterruptPriority+0x60>
	}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e3f0 	.word	0xe000e3f0
 8005e20:	200010e8 	.word	0x200010e8
 8005e24:	e000ed0c 	.word	0xe000ed0c
 8005e28:	200010ec 	.word	0x200010ec

08005e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08a      	sub	sp, #40	; 0x28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e38:	f7fe fe24 	bl	8004a84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e3c:	4b58      	ldr	r3, [pc, #352]	; (8005fa0 <pvPortMalloc+0x174>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e44:	f000 f910 	bl	8006068 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e48:	4b56      	ldr	r3, [pc, #344]	; (8005fa4 <pvPortMalloc+0x178>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 808e 	bne.w	8005f72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01d      	beq.n	8005e98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d014      	beq.n	8005e98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	3308      	adds	r3, #8
 8005e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <pvPortMalloc+0x6c>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	617b      	str	r3, [r7, #20]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d069      	beq.n	8005f72 <pvPortMalloc+0x146>
 8005e9e:	4b42      	ldr	r3, [pc, #264]	; (8005fa8 <pvPortMalloc+0x17c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d864      	bhi.n	8005f72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ea8:	4b40      	ldr	r3, [pc, #256]	; (8005fac <pvPortMalloc+0x180>)
 8005eaa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005eac:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <pvPortMalloc+0x180>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eb2:	e004      	b.n	8005ebe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d903      	bls.n	8005ed0 <pvPortMalloc+0xa4>
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f1      	bne.n	8005eb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ed0:	4b33      	ldr	r3, [pc, #204]	; (8005fa0 <pvPortMalloc+0x174>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d04b      	beq.n	8005f72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	4413      	add	r3, r2
 8005ee2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d91f      	bls.n	8005f3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <pvPortMalloc+0xf8>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	613b      	str	r3, [r7, #16]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f36:	69b8      	ldr	r0, [r7, #24]
 8005f38:	f000 f8f8 	bl	800612c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <pvPortMalloc+0x17c>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <pvPortMalloc+0x17c>)
 8005f48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <pvPortMalloc+0x17c>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <pvPortMalloc+0x184>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d203      	bcs.n	8005f5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f56:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <pvPortMalloc+0x17c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <pvPortMalloc+0x184>)
 8005f5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <pvPortMalloc+0x178>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f72:	f7fe fd95 	bl	8004aa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <pvPortMalloc+0x16a>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	60fb      	str	r3, [r7, #12]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <pvPortMalloc+0x168>
	return pvReturn;
 8005f96:	69fb      	ldr	r3, [r7, #28]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	; 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20003808 	.word	0x20003808
 8005fa4:	20003814 	.word	0x20003814
 8005fa8:	2000380c 	.word	0x2000380c
 8005fac:	20003800 	.word	0x20003800
 8005fb0:	20003810 	.word	0x20003810

08005fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d048      	beq.n	8006058 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	425b      	negs	r3, r3
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4413      	add	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	4b21      	ldr	r3, [pc, #132]	; (8006060 <vPortFree+0xac>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <vPortFree+0x44>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60fb      	str	r3, [r7, #12]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <vPortFree+0x62>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	60bb      	str	r3, [r7, #8]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <vPortFree+0xac>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d019      	beq.n	8006058 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d115      	bne.n	8006058 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <vPortFree+0xac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800603c:	f7fe fd22 	bl	8004a84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <vPortFree+0xb0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4413      	add	r3, r2
 800604a:	4a06      	ldr	r2, [pc, #24]	; (8006064 <vPortFree+0xb0>)
 800604c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800604e:	6938      	ldr	r0, [r7, #16]
 8006050:	f000 f86c 	bl	800612c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006054:	f7fe fd24 	bl	8004aa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006058:	bf00      	nop
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20003814 	.word	0x20003814
 8006064:	2000380c 	.word	0x2000380c

08006068 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800606e:	f242 7310 	movw	r3, #10000	; 0x2710
 8006072:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <prvHeapInit+0xac>)
 8006076:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3307      	adds	r3, #7
 8006086:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <prvHeapInit+0xac>)
 8006098:	4413      	add	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <prvHeapInit+0xb0>)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <prvHeapInit+0xb0>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	4413      	add	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060b4:	2208      	movs	r2, #8
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0307 	bic.w	r3, r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <prvHeapInit+0xb4>)
 80060c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <prvHeapInit+0xb4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <prvHeapInit+0xb4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <prvHeapInit+0xb4>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <prvHeapInit+0xb8>)
 80060f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4a09      	ldr	r2, [pc, #36]	; (8006124 <prvHeapInit+0xbc>)
 80060fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006100:	4b09      	ldr	r3, [pc, #36]	; (8006128 <prvHeapInit+0xc0>)
 8006102:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006106:	601a      	str	r2, [r3, #0]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	200010f0 	.word	0x200010f0
 8006118:	20003800 	.word	0x20003800
 800611c:	20003808 	.word	0x20003808
 8006120:	20003810 	.word	0x20003810
 8006124:	2000380c 	.word	0x2000380c
 8006128:	20003814 	.word	0x20003814

0800612c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <prvInsertBlockIntoFreeList+0xa8>)
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e002      	b.n	8006140 <prvInsertBlockIntoFreeList+0x14>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d8f7      	bhi.n	800613a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	4413      	add	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d108      	bne.n	800616e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	441a      	add	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d118      	bne.n	80061b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <prvInsertBlockIntoFreeList+0xac>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d00d      	beq.n	80061aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	441a      	add	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e008      	b.n	80061bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <prvInsertBlockIntoFreeList+0xac>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e003      	b.n	80061bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d002      	beq.n	80061ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr
 80061d4:	20003800 	.word	0x20003800
 80061d8:	20003808 	.word	0x20003808

080061dc <__errno>:
 80061dc:	4b01      	ldr	r3, [pc, #4]	; (80061e4 <__errno+0x8>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000010 	.word	0x20000010

080061e8 <__libc_init_array>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	2600      	movs	r6, #0
 80061ec:	4d0c      	ldr	r5, [pc, #48]	; (8006220 <__libc_init_array+0x38>)
 80061ee:	4c0d      	ldr	r4, [pc, #52]	; (8006224 <__libc_init_array+0x3c>)
 80061f0:	1b64      	subs	r4, r4, r5
 80061f2:	10a4      	asrs	r4, r4, #2
 80061f4:	42a6      	cmp	r6, r4
 80061f6:	d109      	bne.n	800620c <__libc_init_array+0x24>
 80061f8:	f000 fd2e 	bl	8006c58 <_init>
 80061fc:	2600      	movs	r6, #0
 80061fe:	4d0a      	ldr	r5, [pc, #40]	; (8006228 <__libc_init_array+0x40>)
 8006200:	4c0a      	ldr	r4, [pc, #40]	; (800622c <__libc_init_array+0x44>)
 8006202:	1b64      	subs	r4, r4, r5
 8006204:	10a4      	asrs	r4, r4, #2
 8006206:	42a6      	cmp	r6, r4
 8006208:	d105      	bne.n	8006216 <__libc_init_array+0x2e>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006210:	4798      	blx	r3
 8006212:	3601      	adds	r6, #1
 8006214:	e7ee      	b.n	80061f4 <__libc_init_array+0xc>
 8006216:	f855 3b04 	ldr.w	r3, [r5], #4
 800621a:	4798      	blx	r3
 800621c:	3601      	adds	r6, #1
 800621e:	e7f2      	b.n	8006206 <__libc_init_array+0x1e>
 8006220:	08006f60 	.word	0x08006f60
 8006224:	08006f60 	.word	0x08006f60
 8006228:	08006f60 	.word	0x08006f60
 800622c:	08006f64 	.word	0x08006f64

08006230 <__retarget_lock_acquire_recursive>:
 8006230:	4770      	bx	lr

08006232 <__retarget_lock_release_recursive>:
 8006232:	4770      	bx	lr

08006234 <memcpy>:
 8006234:	440a      	add	r2, r1
 8006236:	4291      	cmp	r1, r2
 8006238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800623c:	d100      	bne.n	8006240 <memcpy+0xc>
 800623e:	4770      	bx	lr
 8006240:	b510      	push	{r4, lr}
 8006242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006246:	4291      	cmp	r1, r2
 8006248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800624c:	d1f9      	bne.n	8006242 <memcpy+0xe>
 800624e:	bd10      	pop	{r4, pc}

08006250 <memset>:
 8006250:	4603      	mov	r3, r0
 8006252:	4402      	add	r2, r0
 8006254:	4293      	cmp	r3, r2
 8006256:	d100      	bne.n	800625a <memset+0xa>
 8006258:	4770      	bx	lr
 800625a:	f803 1b01 	strb.w	r1, [r3], #1
 800625e:	e7f9      	b.n	8006254 <memset+0x4>

08006260 <sbrk_aligned>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4e0e      	ldr	r6, [pc, #56]	; (800629c <sbrk_aligned+0x3c>)
 8006264:	460c      	mov	r4, r1
 8006266:	6831      	ldr	r1, [r6, #0]
 8006268:	4605      	mov	r5, r0
 800626a:	b911      	cbnz	r1, 8006272 <sbrk_aligned+0x12>
 800626c:	f000 f8f6 	bl	800645c <_sbrk_r>
 8006270:	6030      	str	r0, [r6, #0]
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f8f1 	bl	800645c <_sbrk_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d00a      	beq.n	8006294 <sbrk_aligned+0x34>
 800627e:	1cc4      	adds	r4, r0, #3
 8006280:	f024 0403 	bic.w	r4, r4, #3
 8006284:	42a0      	cmp	r0, r4
 8006286:	d007      	beq.n	8006298 <sbrk_aligned+0x38>
 8006288:	1a21      	subs	r1, r4, r0
 800628a:	4628      	mov	r0, r5
 800628c:	f000 f8e6 	bl	800645c <_sbrk_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d101      	bne.n	8006298 <sbrk_aligned+0x38>
 8006294:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006298:	4620      	mov	r0, r4
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	20003820 	.word	0x20003820

080062a0 <_malloc_r>:
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	1ccd      	adds	r5, r1, #3
 80062a6:	f025 0503 	bic.w	r5, r5, #3
 80062aa:	3508      	adds	r5, #8
 80062ac:	2d0c      	cmp	r5, #12
 80062ae:	bf38      	it	cc
 80062b0:	250c      	movcc	r5, #12
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	4607      	mov	r7, r0
 80062b6:	db01      	blt.n	80062bc <_malloc_r+0x1c>
 80062b8:	42a9      	cmp	r1, r5
 80062ba:	d905      	bls.n	80062c8 <_malloc_r+0x28>
 80062bc:	230c      	movs	r3, #12
 80062be:	2600      	movs	r6, #0
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4630      	mov	r0, r6
 80062c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c8:	4e2e      	ldr	r6, [pc, #184]	; (8006384 <_malloc_r+0xe4>)
 80062ca:	f000 f91f 	bl	800650c <__malloc_lock>
 80062ce:	6833      	ldr	r3, [r6, #0]
 80062d0:	461c      	mov	r4, r3
 80062d2:	bb34      	cbnz	r4, 8006322 <_malloc_r+0x82>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ffc2 	bl	8006260 <sbrk_aligned>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	4604      	mov	r4, r0
 80062e0:	d14d      	bne.n	800637e <_malloc_r+0xde>
 80062e2:	6834      	ldr	r4, [r6, #0]
 80062e4:	4626      	mov	r6, r4
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	d140      	bne.n	800636c <_malloc_r+0xcc>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	4631      	mov	r1, r6
 80062ee:	4638      	mov	r0, r7
 80062f0:	eb04 0803 	add.w	r8, r4, r3
 80062f4:	f000 f8b2 	bl	800645c <_sbrk_r>
 80062f8:	4580      	cmp	r8, r0
 80062fa:	d13a      	bne.n	8006372 <_malloc_r+0xd2>
 80062fc:	6821      	ldr	r1, [r4, #0]
 80062fe:	3503      	adds	r5, #3
 8006300:	1a6d      	subs	r5, r5, r1
 8006302:	f025 0503 	bic.w	r5, r5, #3
 8006306:	3508      	adds	r5, #8
 8006308:	2d0c      	cmp	r5, #12
 800630a:	bf38      	it	cc
 800630c:	250c      	movcc	r5, #12
 800630e:	4638      	mov	r0, r7
 8006310:	4629      	mov	r1, r5
 8006312:	f7ff ffa5 	bl	8006260 <sbrk_aligned>
 8006316:	3001      	adds	r0, #1
 8006318:	d02b      	beq.n	8006372 <_malloc_r+0xd2>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	442b      	add	r3, r5
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	e00e      	b.n	8006340 <_malloc_r+0xa0>
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	1b52      	subs	r2, r2, r5
 8006326:	d41e      	bmi.n	8006366 <_malloc_r+0xc6>
 8006328:	2a0b      	cmp	r2, #11
 800632a:	d916      	bls.n	800635a <_malloc_r+0xba>
 800632c:	1961      	adds	r1, r4, r5
 800632e:	42a3      	cmp	r3, r4
 8006330:	6025      	str	r5, [r4, #0]
 8006332:	bf18      	it	ne
 8006334:	6059      	strne	r1, [r3, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	bf08      	it	eq
 800633a:	6031      	streq	r1, [r6, #0]
 800633c:	5162      	str	r2, [r4, r5]
 800633e:	604b      	str	r3, [r1, #4]
 8006340:	4638      	mov	r0, r7
 8006342:	f104 060b 	add.w	r6, r4, #11
 8006346:	f000 f8e7 	bl	8006518 <__malloc_unlock>
 800634a:	f026 0607 	bic.w	r6, r6, #7
 800634e:	1d23      	adds	r3, r4, #4
 8006350:	1af2      	subs	r2, r6, r3
 8006352:	d0b6      	beq.n	80062c2 <_malloc_r+0x22>
 8006354:	1b9b      	subs	r3, r3, r6
 8006356:	50a3      	str	r3, [r4, r2]
 8006358:	e7b3      	b.n	80062c2 <_malloc_r+0x22>
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	42a3      	cmp	r3, r4
 800635e:	bf0c      	ite	eq
 8006360:	6032      	streq	r2, [r6, #0]
 8006362:	605a      	strne	r2, [r3, #4]
 8006364:	e7ec      	b.n	8006340 <_malloc_r+0xa0>
 8006366:	4623      	mov	r3, r4
 8006368:	6864      	ldr	r4, [r4, #4]
 800636a:	e7b2      	b.n	80062d2 <_malloc_r+0x32>
 800636c:	4634      	mov	r4, r6
 800636e:	6876      	ldr	r6, [r6, #4]
 8006370:	e7b9      	b.n	80062e6 <_malloc_r+0x46>
 8006372:	230c      	movs	r3, #12
 8006374:	4638      	mov	r0, r7
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	f000 f8ce 	bl	8006518 <__malloc_unlock>
 800637c:	e7a1      	b.n	80062c2 <_malloc_r+0x22>
 800637e:	6025      	str	r5, [r4, #0]
 8006380:	e7de      	b.n	8006340 <_malloc_r+0xa0>
 8006382:	bf00      	nop
 8006384:	2000381c 	.word	0x2000381c

08006388 <cleanup_glue>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	460c      	mov	r4, r1
 800638c:	6809      	ldr	r1, [r1, #0]
 800638e:	4605      	mov	r5, r0
 8006390:	b109      	cbz	r1, 8006396 <cleanup_glue+0xe>
 8006392:	f7ff fff9 	bl	8006388 <cleanup_glue>
 8006396:	4621      	mov	r1, r4
 8006398:	4628      	mov	r0, r5
 800639a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800639e:	f000 b8c1 	b.w	8006524 <_free_r>
	...

080063a4 <_reclaim_reent>:
 80063a4:	4b2c      	ldr	r3, [pc, #176]	; (8006458 <_reclaim_reent+0xb4>)
 80063a6:	b570      	push	{r4, r5, r6, lr}
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4604      	mov	r4, r0
 80063ac:	4283      	cmp	r3, r0
 80063ae:	d051      	beq.n	8006454 <_reclaim_reent+0xb0>
 80063b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063b2:	b143      	cbz	r3, 80063c6 <_reclaim_reent+0x22>
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d14a      	bne.n	8006450 <_reclaim_reent+0xac>
 80063ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063bc:	6819      	ldr	r1, [r3, #0]
 80063be:	b111      	cbz	r1, 80063c6 <_reclaim_reent+0x22>
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 f8af 	bl	8006524 <_free_r>
 80063c6:	6961      	ldr	r1, [r4, #20]
 80063c8:	b111      	cbz	r1, 80063d0 <_reclaim_reent+0x2c>
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f8aa 	bl	8006524 <_free_r>
 80063d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80063d2:	b111      	cbz	r1, 80063da <_reclaim_reent+0x36>
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 f8a5 	bl	8006524 <_free_r>
 80063da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063dc:	b111      	cbz	r1, 80063e4 <_reclaim_reent+0x40>
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 f8a0 	bl	8006524 <_free_r>
 80063e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80063e6:	b111      	cbz	r1, 80063ee <_reclaim_reent+0x4a>
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 f89b 	bl	8006524 <_free_r>
 80063ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063f0:	b111      	cbz	r1, 80063f8 <_reclaim_reent+0x54>
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 f896 	bl	8006524 <_free_r>
 80063f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80063fa:	b111      	cbz	r1, 8006402 <_reclaim_reent+0x5e>
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 f891 	bl	8006524 <_free_r>
 8006402:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006404:	b111      	cbz	r1, 800640c <_reclaim_reent+0x68>
 8006406:	4620      	mov	r0, r4
 8006408:	f000 f88c 	bl	8006524 <_free_r>
 800640c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640e:	b111      	cbz	r1, 8006416 <_reclaim_reent+0x72>
 8006410:	4620      	mov	r0, r4
 8006412:	f000 f887 	bl	8006524 <_free_r>
 8006416:	69a3      	ldr	r3, [r4, #24]
 8006418:	b1e3      	cbz	r3, 8006454 <_reclaim_reent+0xb0>
 800641a:	4620      	mov	r0, r4
 800641c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800641e:	4798      	blx	r3
 8006420:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006422:	b1b9      	cbz	r1, 8006454 <_reclaim_reent+0xb0>
 8006424:	4620      	mov	r0, r4
 8006426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800642a:	f7ff bfad 	b.w	8006388 <cleanup_glue>
 800642e:	5949      	ldr	r1, [r1, r5]
 8006430:	b941      	cbnz	r1, 8006444 <_reclaim_reent+0xa0>
 8006432:	3504      	adds	r5, #4
 8006434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006436:	2d80      	cmp	r5, #128	; 0x80
 8006438:	68d9      	ldr	r1, [r3, #12]
 800643a:	d1f8      	bne.n	800642e <_reclaim_reent+0x8a>
 800643c:	4620      	mov	r0, r4
 800643e:	f000 f871 	bl	8006524 <_free_r>
 8006442:	e7ba      	b.n	80063ba <_reclaim_reent+0x16>
 8006444:	680e      	ldr	r6, [r1, #0]
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f86c 	bl	8006524 <_free_r>
 800644c:	4631      	mov	r1, r6
 800644e:	e7ef      	b.n	8006430 <_reclaim_reent+0x8c>
 8006450:	2500      	movs	r5, #0
 8006452:	e7ef      	b.n	8006434 <_reclaim_reent+0x90>
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	bf00      	nop
 8006458:	20000010 	.word	0x20000010

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4d05      	ldr	r5, [pc, #20]	; (8006478 <_sbrk_r+0x1c>)
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fb f874 	bl	8001554 <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20003824 	.word	0x20003824

0800647c <sniprintf>:
 800647c:	b40c      	push	{r2, r3}
 800647e:	b530      	push	{r4, r5, lr}
 8006480:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <sniprintf+0x64>)
 8006482:	1e0c      	subs	r4, r1, #0
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	b09d      	sub	sp, #116	; 0x74
 8006488:	da08      	bge.n	800649c <sniprintf+0x20>
 800648a:	238b      	movs	r3, #139	; 0x8b
 800648c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	b01d      	add	sp, #116	; 0x74
 8006494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006498:	b002      	add	sp, #8
 800649a:	4770      	bx	lr
 800649c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064a4:	bf0c      	ite	eq
 80064a6:	4623      	moveq	r3, r4
 80064a8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	9307      	str	r3, [sp, #28]
 80064b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	9006      	str	r0, [sp, #24]
 80064b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064bc:	4628      	mov	r0, r5
 80064be:	ab21      	add	r3, sp, #132	; 0x84
 80064c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064c2:	a902      	add	r1, sp, #8
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	f000 f8d1 	bl	800666c <_svfiprintf_r>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	bfbc      	itt	lt
 80064ce:	238b      	movlt	r3, #139	; 0x8b
 80064d0:	602b      	strlt	r3, [r5, #0]
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	d0dd      	beq.n	8006492 <sniprintf+0x16>
 80064d6:	2200      	movs	r2, #0
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e7d9      	b.n	8006492 <sniprintf+0x16>
 80064de:	bf00      	nop
 80064e0:	20000010 	.word	0x20000010

080064e4 <strncpy>:
 80064e4:	4603      	mov	r3, r0
 80064e6:	b510      	push	{r4, lr}
 80064e8:	3901      	subs	r1, #1
 80064ea:	b132      	cbz	r2, 80064fa <strncpy+0x16>
 80064ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064f0:	3a01      	subs	r2, #1
 80064f2:	f803 4b01 	strb.w	r4, [r3], #1
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	d1f7      	bne.n	80064ea <strncpy+0x6>
 80064fa:	2100      	movs	r1, #0
 80064fc:	441a      	add	r2, r3
 80064fe:	4293      	cmp	r3, r2
 8006500:	d100      	bne.n	8006504 <strncpy+0x20>
 8006502:	bd10      	pop	{r4, pc}
 8006504:	f803 1b01 	strb.w	r1, [r3], #1
 8006508:	e7f9      	b.n	80064fe <strncpy+0x1a>
	...

0800650c <__malloc_lock>:
 800650c:	4801      	ldr	r0, [pc, #4]	; (8006514 <__malloc_lock+0x8>)
 800650e:	f7ff be8f 	b.w	8006230 <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	20003818 	.word	0x20003818

08006518 <__malloc_unlock>:
 8006518:	4801      	ldr	r0, [pc, #4]	; (8006520 <__malloc_unlock+0x8>)
 800651a:	f7ff be8a 	b.w	8006232 <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	20003818 	.word	0x20003818

08006524 <_free_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4605      	mov	r5, r0
 8006528:	2900      	cmp	r1, #0
 800652a:	d040      	beq.n	80065ae <_free_r+0x8a>
 800652c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006530:	1f0c      	subs	r4, r1, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	bfb8      	it	lt
 8006536:	18e4      	addlt	r4, r4, r3
 8006538:	f7ff ffe8 	bl	800650c <__malloc_lock>
 800653c:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <_free_r+0x8c>)
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	b933      	cbnz	r3, 8006550 <_free_r+0x2c>
 8006542:	6063      	str	r3, [r4, #4]
 8006544:	6014      	str	r4, [r2, #0]
 8006546:	4628      	mov	r0, r5
 8006548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800654c:	f7ff bfe4 	b.w	8006518 <__malloc_unlock>
 8006550:	42a3      	cmp	r3, r4
 8006552:	d908      	bls.n	8006566 <_free_r+0x42>
 8006554:	6820      	ldr	r0, [r4, #0]
 8006556:	1821      	adds	r1, r4, r0
 8006558:	428b      	cmp	r3, r1
 800655a:	bf01      	itttt	eq
 800655c:	6819      	ldreq	r1, [r3, #0]
 800655e:	685b      	ldreq	r3, [r3, #4]
 8006560:	1809      	addeq	r1, r1, r0
 8006562:	6021      	streq	r1, [r4, #0]
 8006564:	e7ed      	b.n	8006542 <_free_r+0x1e>
 8006566:	461a      	mov	r2, r3
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b10b      	cbz	r3, 8006570 <_free_r+0x4c>
 800656c:	42a3      	cmp	r3, r4
 800656e:	d9fa      	bls.n	8006566 <_free_r+0x42>
 8006570:	6811      	ldr	r1, [r2, #0]
 8006572:	1850      	adds	r0, r2, r1
 8006574:	42a0      	cmp	r0, r4
 8006576:	d10b      	bne.n	8006590 <_free_r+0x6c>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	4401      	add	r1, r0
 800657c:	1850      	adds	r0, r2, r1
 800657e:	4283      	cmp	r3, r0
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	d1e0      	bne.n	8006546 <_free_r+0x22>
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4401      	add	r1, r0
 800658a:	6011      	str	r1, [r2, #0]
 800658c:	6053      	str	r3, [r2, #4]
 800658e:	e7da      	b.n	8006546 <_free_r+0x22>
 8006590:	d902      	bls.n	8006598 <_free_r+0x74>
 8006592:	230c      	movs	r3, #12
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	e7d6      	b.n	8006546 <_free_r+0x22>
 8006598:	6820      	ldr	r0, [r4, #0]
 800659a:	1821      	adds	r1, r4, r0
 800659c:	428b      	cmp	r3, r1
 800659e:	bf01      	itttt	eq
 80065a0:	6819      	ldreq	r1, [r3, #0]
 80065a2:	685b      	ldreq	r3, [r3, #4]
 80065a4:	1809      	addeq	r1, r1, r0
 80065a6:	6021      	streq	r1, [r4, #0]
 80065a8:	6063      	str	r3, [r4, #4]
 80065aa:	6054      	str	r4, [r2, #4]
 80065ac:	e7cb      	b.n	8006546 <_free_r+0x22>
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
 80065b0:	2000381c 	.word	0x2000381c

080065b4 <__ssputs_r>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	688e      	ldr	r6, [r1, #8]
 80065ba:	4682      	mov	sl, r0
 80065bc:	429e      	cmp	r6, r3
 80065be:	460c      	mov	r4, r1
 80065c0:	4690      	mov	r8, r2
 80065c2:	461f      	mov	r7, r3
 80065c4:	d838      	bhi.n	8006638 <__ssputs_r+0x84>
 80065c6:	898a      	ldrh	r2, [r1, #12]
 80065c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065cc:	d032      	beq.n	8006634 <__ssputs_r+0x80>
 80065ce:	6825      	ldr	r5, [r4, #0]
 80065d0:	6909      	ldr	r1, [r1, #16]
 80065d2:	3301      	adds	r3, #1
 80065d4:	eba5 0901 	sub.w	r9, r5, r1
 80065d8:	6965      	ldr	r5, [r4, #20]
 80065da:	444b      	add	r3, r9
 80065dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065e4:	106d      	asrs	r5, r5, #1
 80065e6:	429d      	cmp	r5, r3
 80065e8:	bf38      	it	cc
 80065ea:	461d      	movcc	r5, r3
 80065ec:	0553      	lsls	r3, r2, #21
 80065ee:	d531      	bpl.n	8006654 <__ssputs_r+0xa0>
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7ff fe55 	bl	80062a0 <_malloc_r>
 80065f6:	4606      	mov	r6, r0
 80065f8:	b950      	cbnz	r0, 8006610 <__ssputs_r+0x5c>
 80065fa:	230c      	movs	r3, #12
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006600:	f8ca 3000 	str.w	r3, [sl]
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	464a      	mov	r2, r9
 8006612:	6921      	ldr	r1, [r4, #16]
 8006614:	f7ff fe0e 	bl	8006234 <memcpy>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	6126      	str	r6, [r4, #16]
 8006626:	444e      	add	r6, r9
 8006628:	6026      	str	r6, [r4, #0]
 800662a:	463e      	mov	r6, r7
 800662c:	6165      	str	r5, [r4, #20]
 800662e:	eba5 0509 	sub.w	r5, r5, r9
 8006632:	60a5      	str	r5, [r4, #8]
 8006634:	42be      	cmp	r6, r7
 8006636:	d900      	bls.n	800663a <__ssputs_r+0x86>
 8006638:	463e      	mov	r6, r7
 800663a:	4632      	mov	r2, r6
 800663c:	4641      	mov	r1, r8
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	f000 fab8 	bl	8006bb4 <memmove>
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	2000      	movs	r0, #0
 8006648:	1b9b      	subs	r3, r3, r6
 800664a:	60a3      	str	r3, [r4, #8]
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	4433      	add	r3, r6
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	e7db      	b.n	800660c <__ssputs_r+0x58>
 8006654:	462a      	mov	r2, r5
 8006656:	f000 fac7 	bl	8006be8 <_realloc_r>
 800665a:	4606      	mov	r6, r0
 800665c:	2800      	cmp	r0, #0
 800665e:	d1e1      	bne.n	8006624 <__ssputs_r+0x70>
 8006660:	4650      	mov	r0, sl
 8006662:	6921      	ldr	r1, [r4, #16]
 8006664:	f7ff ff5e 	bl	8006524 <_free_r>
 8006668:	e7c7      	b.n	80065fa <__ssputs_r+0x46>
	...

0800666c <_svfiprintf_r>:
 800666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	4698      	mov	r8, r3
 8006672:	898b      	ldrh	r3, [r1, #12]
 8006674:	4607      	mov	r7, r0
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	460d      	mov	r5, r1
 800667a:	4614      	mov	r4, r2
 800667c:	b09d      	sub	sp, #116	; 0x74
 800667e:	d50e      	bpl.n	800669e <_svfiprintf_r+0x32>
 8006680:	690b      	ldr	r3, [r1, #16]
 8006682:	b963      	cbnz	r3, 800669e <_svfiprintf_r+0x32>
 8006684:	2140      	movs	r1, #64	; 0x40
 8006686:	f7ff fe0b 	bl	80062a0 <_malloc_r>
 800668a:	6028      	str	r0, [r5, #0]
 800668c:	6128      	str	r0, [r5, #16]
 800668e:	b920      	cbnz	r0, 800669a <_svfiprintf_r+0x2e>
 8006690:	230c      	movs	r3, #12
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006698:	e0d1      	b.n	800683e <_svfiprintf_r+0x1d2>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	616b      	str	r3, [r5, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	9309      	str	r3, [sp, #36]	; 0x24
 80066a2:	2320      	movs	r3, #32
 80066a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a8:	2330      	movs	r3, #48	; 0x30
 80066aa:	f04f 0901 	mov.w	r9, #1
 80066ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006858 <_svfiprintf_r+0x1ec>
 80066b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ba:	4623      	mov	r3, r4
 80066bc:	469a      	mov	sl, r3
 80066be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c2:	b10a      	cbz	r2, 80066c8 <_svfiprintf_r+0x5c>
 80066c4:	2a25      	cmp	r2, #37	; 0x25
 80066c6:	d1f9      	bne.n	80066bc <_svfiprintf_r+0x50>
 80066c8:	ebba 0b04 	subs.w	fp, sl, r4
 80066cc:	d00b      	beq.n	80066e6 <_svfiprintf_r+0x7a>
 80066ce:	465b      	mov	r3, fp
 80066d0:	4622      	mov	r2, r4
 80066d2:	4629      	mov	r1, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ff6d 	bl	80065b4 <__ssputs_r>
 80066da:	3001      	adds	r0, #1
 80066dc:	f000 80aa 	beq.w	8006834 <_svfiprintf_r+0x1c8>
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	445a      	add	r2, fp
 80066e4:	9209      	str	r2, [sp, #36]	; 0x24
 80066e6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80a2 	beq.w	8006834 <_svfiprintf_r+0x1c8>
 80066f0:	2300      	movs	r3, #0
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066fa:	f10a 0a01 	add.w	sl, sl, #1
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	9307      	str	r3, [sp, #28]
 8006702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006706:	931a      	str	r3, [sp, #104]	; 0x68
 8006708:	4654      	mov	r4, sl
 800670a:	2205      	movs	r2, #5
 800670c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006710:	4851      	ldr	r0, [pc, #324]	; (8006858 <_svfiprintf_r+0x1ec>)
 8006712:	f000 fa41 	bl	8006b98 <memchr>
 8006716:	9a04      	ldr	r2, [sp, #16]
 8006718:	b9d8      	cbnz	r0, 8006752 <_svfiprintf_r+0xe6>
 800671a:	06d0      	lsls	r0, r2, #27
 800671c:	bf44      	itt	mi
 800671e:	2320      	movmi	r3, #32
 8006720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006724:	0711      	lsls	r1, r2, #28
 8006726:	bf44      	itt	mi
 8006728:	232b      	movmi	r3, #43	; 0x2b
 800672a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672e:	f89a 3000 	ldrb.w	r3, [sl]
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d015      	beq.n	8006762 <_svfiprintf_r+0xf6>
 8006736:	4654      	mov	r4, sl
 8006738:	2000      	movs	r0, #0
 800673a:	f04f 0c0a 	mov.w	ip, #10
 800673e:	9a07      	ldr	r2, [sp, #28]
 8006740:	4621      	mov	r1, r4
 8006742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006746:	3b30      	subs	r3, #48	; 0x30
 8006748:	2b09      	cmp	r3, #9
 800674a:	d94e      	bls.n	80067ea <_svfiprintf_r+0x17e>
 800674c:	b1b0      	cbz	r0, 800677c <_svfiprintf_r+0x110>
 800674e:	9207      	str	r2, [sp, #28]
 8006750:	e014      	b.n	800677c <_svfiprintf_r+0x110>
 8006752:	eba0 0308 	sub.w	r3, r0, r8
 8006756:	fa09 f303 	lsl.w	r3, r9, r3
 800675a:	4313      	orrs	r3, r2
 800675c:	46a2      	mov	sl, r4
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	e7d2      	b.n	8006708 <_svfiprintf_r+0x9c>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	1d19      	adds	r1, r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	9103      	str	r1, [sp, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfbb      	ittet	lt
 800676e:	425b      	neglt	r3, r3
 8006770:	f042 0202 	orrlt.w	r2, r2, #2
 8006774:	9307      	strge	r3, [sp, #28]
 8006776:	9307      	strlt	r3, [sp, #28]
 8006778:	bfb8      	it	lt
 800677a:	9204      	strlt	r2, [sp, #16]
 800677c:	7823      	ldrb	r3, [r4, #0]
 800677e:	2b2e      	cmp	r3, #46	; 0x2e
 8006780:	d10c      	bne.n	800679c <_svfiprintf_r+0x130>
 8006782:	7863      	ldrb	r3, [r4, #1]
 8006784:	2b2a      	cmp	r3, #42	; 0x2a
 8006786:	d135      	bne.n	80067f4 <_svfiprintf_r+0x188>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	3402      	adds	r4, #2
 800678c:	1d1a      	adds	r2, r3, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	9203      	str	r2, [sp, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfb8      	it	lt
 8006796:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800685c <_svfiprintf_r+0x1f0>
 80067a0:	2203      	movs	r2, #3
 80067a2:	4650      	mov	r0, sl
 80067a4:	7821      	ldrb	r1, [r4, #0]
 80067a6:	f000 f9f7 	bl	8006b98 <memchr>
 80067aa:	b140      	cbz	r0, 80067be <_svfiprintf_r+0x152>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	eba0 000a 	sub.w	r0, r0, sl
 80067b2:	fa03 f000 	lsl.w	r0, r3, r0
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	3401      	adds	r4, #1
 80067ba:	4303      	orrs	r3, r0
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c2:	2206      	movs	r2, #6
 80067c4:	4826      	ldr	r0, [pc, #152]	; (8006860 <_svfiprintf_r+0x1f4>)
 80067c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ca:	f000 f9e5 	bl	8006b98 <memchr>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d038      	beq.n	8006844 <_svfiprintf_r+0x1d8>
 80067d2:	4b24      	ldr	r3, [pc, #144]	; (8006864 <_svfiprintf_r+0x1f8>)
 80067d4:	bb1b      	cbnz	r3, 800681e <_svfiprintf_r+0x1b2>
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	3307      	adds	r3, #7
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	3308      	adds	r3, #8
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	4433      	add	r3, r6
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	e767      	b.n	80066ba <_svfiprintf_r+0x4e>
 80067ea:	460c      	mov	r4, r1
 80067ec:	2001      	movs	r0, #1
 80067ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f2:	e7a5      	b.n	8006740 <_svfiprintf_r+0xd4>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	4619      	mov	r1, r3
 80067fc:	3401      	adds	r4, #1
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	4620      	mov	r0, r4
 8006802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006806:	3a30      	subs	r2, #48	; 0x30
 8006808:	2a09      	cmp	r2, #9
 800680a:	d903      	bls.n	8006814 <_svfiprintf_r+0x1a8>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0c5      	beq.n	800679c <_svfiprintf_r+0x130>
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	e7c3      	b.n	800679c <_svfiprintf_r+0x130>
 8006814:	4604      	mov	r4, r0
 8006816:	2301      	movs	r3, #1
 8006818:	fb0c 2101 	mla	r1, ip, r1, r2
 800681c:	e7f0      	b.n	8006800 <_svfiprintf_r+0x194>
 800681e:	ab03      	add	r3, sp, #12
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	462a      	mov	r2, r5
 8006824:	4638      	mov	r0, r7
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <_svfiprintf_r+0x1fc>)
 8006828:	a904      	add	r1, sp, #16
 800682a:	f3af 8000 	nop.w
 800682e:	1c42      	adds	r2, r0, #1
 8006830:	4606      	mov	r6, r0
 8006832:	d1d6      	bne.n	80067e2 <_svfiprintf_r+0x176>
 8006834:	89ab      	ldrh	r3, [r5, #12]
 8006836:	065b      	lsls	r3, r3, #25
 8006838:	f53f af2c 	bmi.w	8006694 <_svfiprintf_r+0x28>
 800683c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800683e:	b01d      	add	sp, #116	; 0x74
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462a      	mov	r2, r5
 800684a:	4638      	mov	r0, r7
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <_svfiprintf_r+0x1fc>)
 800684e:	a904      	add	r1, sp, #16
 8006850:	f000 f87c 	bl	800694c <_printf_i>
 8006854:	e7eb      	b.n	800682e <_svfiprintf_r+0x1c2>
 8006856:	bf00      	nop
 8006858:	08006f2c 	.word	0x08006f2c
 800685c:	08006f32 	.word	0x08006f32
 8006860:	08006f36 	.word	0x08006f36
 8006864:	00000000 	.word	0x00000000
 8006868:	080065b5 	.word	0x080065b5

0800686c <_printf_common>:
 800686c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	4616      	mov	r6, r2
 8006872:	4699      	mov	r9, r3
 8006874:	688a      	ldr	r2, [r1, #8]
 8006876:	690b      	ldr	r3, [r1, #16]
 8006878:	4607      	mov	r7, r0
 800687a:	4293      	cmp	r3, r2
 800687c:	bfb8      	it	lt
 800687e:	4613      	movlt	r3, r2
 8006880:	6033      	str	r3, [r6, #0]
 8006882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006886:	460c      	mov	r4, r1
 8006888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800688c:	b10a      	cbz	r2, 8006892 <_printf_common+0x26>
 800688e:	3301      	adds	r3, #1
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	0699      	lsls	r1, r3, #26
 8006896:	bf42      	ittt	mi
 8006898:	6833      	ldrmi	r3, [r6, #0]
 800689a:	3302      	addmi	r3, #2
 800689c:	6033      	strmi	r3, [r6, #0]
 800689e:	6825      	ldr	r5, [r4, #0]
 80068a0:	f015 0506 	ands.w	r5, r5, #6
 80068a4:	d106      	bne.n	80068b4 <_printf_common+0x48>
 80068a6:	f104 0a19 	add.w	sl, r4, #25
 80068aa:	68e3      	ldr	r3, [r4, #12]
 80068ac:	6832      	ldr	r2, [r6, #0]
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	42ab      	cmp	r3, r5
 80068b2:	dc28      	bgt.n	8006906 <_printf_common+0x9a>
 80068b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068b8:	1e13      	subs	r3, r2, #0
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	bf18      	it	ne
 80068be:	2301      	movne	r3, #1
 80068c0:	0692      	lsls	r2, r2, #26
 80068c2:	d42d      	bmi.n	8006920 <_printf_common+0xb4>
 80068c4:	4649      	mov	r1, r9
 80068c6:	4638      	mov	r0, r7
 80068c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068cc:	47c0      	blx	r8
 80068ce:	3001      	adds	r0, #1
 80068d0:	d020      	beq.n	8006914 <_printf_common+0xa8>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	68e5      	ldr	r5, [r4, #12]
 80068d6:	f003 0306 	and.w	r3, r3, #6
 80068da:	2b04      	cmp	r3, #4
 80068dc:	bf18      	it	ne
 80068de:	2500      	movne	r5, #0
 80068e0:	6832      	ldr	r2, [r6, #0]
 80068e2:	f04f 0600 	mov.w	r6, #0
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	bf08      	it	eq
 80068ea:	1aad      	subeq	r5, r5, r2
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	bf08      	it	eq
 80068f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f4:	4293      	cmp	r3, r2
 80068f6:	bfc4      	itt	gt
 80068f8:	1a9b      	subgt	r3, r3, r2
 80068fa:	18ed      	addgt	r5, r5, r3
 80068fc:	341a      	adds	r4, #26
 80068fe:	42b5      	cmp	r5, r6
 8006900:	d11a      	bne.n	8006938 <_printf_common+0xcc>
 8006902:	2000      	movs	r0, #0
 8006904:	e008      	b.n	8006918 <_printf_common+0xac>
 8006906:	2301      	movs	r3, #1
 8006908:	4652      	mov	r2, sl
 800690a:	4649      	mov	r1, r9
 800690c:	4638      	mov	r0, r7
 800690e:	47c0      	blx	r8
 8006910:	3001      	adds	r0, #1
 8006912:	d103      	bne.n	800691c <_printf_common+0xb0>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	3501      	adds	r5, #1
 800691e:	e7c4      	b.n	80068aa <_printf_common+0x3e>
 8006920:	2030      	movs	r0, #48	; 0x30
 8006922:	18e1      	adds	r1, r4, r3
 8006924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800692e:	4422      	add	r2, r4
 8006930:	3302      	adds	r3, #2
 8006932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006936:	e7c5      	b.n	80068c4 <_printf_common+0x58>
 8006938:	2301      	movs	r3, #1
 800693a:	4622      	mov	r2, r4
 800693c:	4649      	mov	r1, r9
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d0e6      	beq.n	8006914 <_printf_common+0xa8>
 8006946:	3601      	adds	r6, #1
 8006948:	e7d9      	b.n	80068fe <_printf_common+0x92>
	...

0800694c <_printf_i>:
 800694c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	7e0f      	ldrb	r7, [r1, #24]
 8006952:	4691      	mov	r9, r2
 8006954:	2f78      	cmp	r7, #120	; 0x78
 8006956:	4680      	mov	r8, r0
 8006958:	460c      	mov	r4, r1
 800695a:	469a      	mov	sl, r3
 800695c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800695e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006962:	d807      	bhi.n	8006974 <_printf_i+0x28>
 8006964:	2f62      	cmp	r7, #98	; 0x62
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x32>
 8006968:	2f00      	cmp	r7, #0
 800696a:	f000 80d9 	beq.w	8006b20 <_printf_i+0x1d4>
 800696e:	2f58      	cmp	r7, #88	; 0x58
 8006970:	f000 80a4 	beq.w	8006abc <_printf_i+0x170>
 8006974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800697c:	e03a      	b.n	80069f4 <_printf_i+0xa8>
 800697e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006982:	2b15      	cmp	r3, #21
 8006984:	d8f6      	bhi.n	8006974 <_printf_i+0x28>
 8006986:	a101      	add	r1, pc, #4	; (adr r1, 800698c <_printf_i+0x40>)
 8006988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069f9 	.word	0x080069f9
 8006994:	08006975 	.word	0x08006975
 8006998:	08006975 	.word	0x08006975
 800699c:	08006975 	.word	0x08006975
 80069a0:	08006975 	.word	0x08006975
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006975 	.word	0x08006975
 80069ac:	08006975 	.word	0x08006975
 80069b0:	08006975 	.word	0x08006975
 80069b4:	08006975 	.word	0x08006975
 80069b8:	08006b07 	.word	0x08006b07
 80069bc:	08006a29 	.word	0x08006a29
 80069c0:	08006ae9 	.word	0x08006ae9
 80069c4:	08006975 	.word	0x08006975
 80069c8:	08006975 	.word	0x08006975
 80069cc:	08006b29 	.word	0x08006b29
 80069d0:	08006975 	.word	0x08006975
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	08006975 	.word	0x08006975
 80069dc:	08006975 	.word	0x08006975
 80069e0:	08006af1 	.word	0x08006af1
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	1d1a      	adds	r2, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	602a      	str	r2, [r5, #0]
 80069ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a4      	b.n	8006b42 <_printf_i+0x1f6>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	6829      	ldr	r1, [r5, #0]
 80069fc:	0606      	lsls	r6, r0, #24
 80069fe:	f101 0304 	add.w	r3, r1, #4
 8006a02:	d50a      	bpl.n	8006a1a <_printf_i+0xce>
 8006a04:	680e      	ldr	r6, [r1, #0]
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	da03      	bge.n	8006a14 <_printf_i+0xc8>
 8006a0c:	232d      	movs	r3, #45	; 0x2d
 8006a0e:	4276      	negs	r6, r6
 8006a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a14:	230a      	movs	r3, #10
 8006a16:	485e      	ldr	r0, [pc, #376]	; (8006b90 <_printf_i+0x244>)
 8006a18:	e019      	b.n	8006a4e <_printf_i+0x102>
 8006a1a:	680e      	ldr	r6, [r1, #0]
 8006a1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a20:	602b      	str	r3, [r5, #0]
 8006a22:	bf18      	it	ne
 8006a24:	b236      	sxthne	r6, r6
 8006a26:	e7ef      	b.n	8006a08 <_printf_i+0xbc>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	6029      	str	r1, [r5, #0]
 8006a30:	0601      	lsls	r1, r0, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0xec>
 8006a34:	681e      	ldr	r6, [r3, #0]
 8006a36:	e002      	b.n	8006a3e <_printf_i+0xf2>
 8006a38:	0646      	lsls	r6, r0, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0xe8>
 8006a3c:	881e      	ldrh	r6, [r3, #0]
 8006a3e:	2f6f      	cmp	r7, #111	; 0x6f
 8006a40:	bf0c      	ite	eq
 8006a42:	2308      	moveq	r3, #8
 8006a44:	230a      	movne	r3, #10
 8006a46:	4852      	ldr	r0, [pc, #328]	; (8006b90 <_printf_i+0x244>)
 8006a48:	2100      	movs	r1, #0
 8006a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a4e:	6865      	ldr	r5, [r4, #4]
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	bfa8      	it	ge
 8006a54:	6821      	ldrge	r1, [r4, #0]
 8006a56:	60a5      	str	r5, [r4, #8]
 8006a58:	bfa4      	itt	ge
 8006a5a:	f021 0104 	bicge.w	r1, r1, #4
 8006a5e:	6021      	strge	r1, [r4, #0]
 8006a60:	b90e      	cbnz	r6, 8006a66 <_printf_i+0x11a>
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d04d      	beq.n	8006b02 <_printf_i+0x1b6>
 8006a66:	4615      	mov	r5, r2
 8006a68:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a6c:	fb03 6711 	mls	r7, r3, r1, r6
 8006a70:	5dc7      	ldrb	r7, [r0, r7]
 8006a72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a76:	4637      	mov	r7, r6
 8006a78:	42bb      	cmp	r3, r7
 8006a7a:	460e      	mov	r6, r1
 8006a7c:	d9f4      	bls.n	8006a68 <_printf_i+0x11c>
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d10b      	bne.n	8006a9a <_printf_i+0x14e>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	07de      	lsls	r6, r3, #31
 8006a86:	d508      	bpl.n	8006a9a <_printf_i+0x14e>
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	6861      	ldr	r1, [r4, #4]
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	bfde      	ittt	le
 8006a90:	2330      	movle	r3, #48	; 0x30
 8006a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a9a:	1b52      	subs	r2, r2, r5
 8006a9c:	6122      	str	r2, [r4, #16]
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f8cd a000 	str.w	sl, [sp]
 8006aa8:	aa03      	add	r2, sp, #12
 8006aaa:	f7ff fedf 	bl	800686c <_printf_common>
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d14c      	bne.n	8006b4c <_printf_i+0x200>
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab6:	b004      	add	sp, #16
 8006ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abc:	4834      	ldr	r0, [pc, #208]	; (8006b90 <_printf_i+0x244>)
 8006abe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ac2:	6829      	ldr	r1, [r5, #0]
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aca:	6029      	str	r1, [r5, #0]
 8006acc:	061d      	lsls	r5, r3, #24
 8006ace:	d514      	bpl.n	8006afa <_printf_i+0x1ae>
 8006ad0:	07df      	lsls	r7, r3, #31
 8006ad2:	bf44      	itt	mi
 8006ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad8:	6023      	strmi	r3, [r4, #0]
 8006ada:	b91e      	cbnz	r6, 8006ae4 <_printf_i+0x198>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f023 0320 	bic.w	r3, r3, #32
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	e7af      	b.n	8006a48 <_printf_i+0xfc>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	2378      	movs	r3, #120	; 0x78
 8006af2:	4828      	ldr	r0, [pc, #160]	; (8006b94 <_printf_i+0x248>)
 8006af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006af8:	e7e3      	b.n	8006ac2 <_printf_i+0x176>
 8006afa:	0659      	lsls	r1, r3, #25
 8006afc:	bf48      	it	mi
 8006afe:	b2b6      	uxthmi	r6, r6
 8006b00:	e7e6      	b.n	8006ad0 <_printf_i+0x184>
 8006b02:	4615      	mov	r5, r2
 8006b04:	e7bb      	b.n	8006a7e <_printf_i+0x132>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	6826      	ldr	r6, [r4, #0]
 8006b0a:	1d18      	adds	r0, r3, #4
 8006b0c:	6961      	ldr	r1, [r4, #20]
 8006b0e:	6028      	str	r0, [r5, #0]
 8006b10:	0635      	lsls	r5, r6, #24
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	d501      	bpl.n	8006b1a <_printf_i+0x1ce>
 8006b16:	6019      	str	r1, [r3, #0]
 8006b18:	e002      	b.n	8006b20 <_printf_i+0x1d4>
 8006b1a:	0670      	lsls	r0, r6, #25
 8006b1c:	d5fb      	bpl.n	8006b16 <_printf_i+0x1ca>
 8006b1e:	8019      	strh	r1, [r3, #0]
 8006b20:	2300      	movs	r3, #0
 8006b22:	4615      	mov	r5, r2
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	e7ba      	b.n	8006a9e <_printf_i+0x152>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	1d1a      	adds	r2, r3, #4
 8006b2e:	602a      	str	r2, [r5, #0]
 8006b30:	681d      	ldr	r5, [r3, #0]
 8006b32:	6862      	ldr	r2, [r4, #4]
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 f82f 	bl	8006b98 <memchr>
 8006b3a:	b108      	cbz	r0, 8006b40 <_printf_i+0x1f4>
 8006b3c:	1b40      	subs	r0, r0, r5
 8006b3e:	6060      	str	r0, [r4, #4]
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	2300      	movs	r3, #0
 8006b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b4a:	e7a8      	b.n	8006a9e <_printf_i+0x152>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	47d0      	blx	sl
 8006b56:	3001      	adds	r0, #1
 8006b58:	d0ab      	beq.n	8006ab2 <_printf_i+0x166>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	079b      	lsls	r3, r3, #30
 8006b5e:	d413      	bmi.n	8006b88 <_printf_i+0x23c>
 8006b60:	68e0      	ldr	r0, [r4, #12]
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	4298      	cmp	r0, r3
 8006b66:	bfb8      	it	lt
 8006b68:	4618      	movlt	r0, r3
 8006b6a:	e7a4      	b.n	8006ab6 <_printf_i+0x16a>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4632      	mov	r2, r6
 8006b70:	4649      	mov	r1, r9
 8006b72:	4640      	mov	r0, r8
 8006b74:	47d0      	blx	sl
 8006b76:	3001      	adds	r0, #1
 8006b78:	d09b      	beq.n	8006ab2 <_printf_i+0x166>
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	68e3      	ldr	r3, [r4, #12]
 8006b7e:	9903      	ldr	r1, [sp, #12]
 8006b80:	1a5b      	subs	r3, r3, r1
 8006b82:	42ab      	cmp	r3, r5
 8006b84:	dcf2      	bgt.n	8006b6c <_printf_i+0x220>
 8006b86:	e7eb      	b.n	8006b60 <_printf_i+0x214>
 8006b88:	2500      	movs	r5, #0
 8006b8a:	f104 0619 	add.w	r6, r4, #25
 8006b8e:	e7f5      	b.n	8006b7c <_printf_i+0x230>
 8006b90:	08006f3d 	.word	0x08006f3d
 8006b94:	08006f4e 	.word	0x08006f4e

08006b98 <memchr>:
 8006b98:	4603      	mov	r3, r0
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	b2c9      	uxtb	r1, r1
 8006b9e:	4402      	add	r2, r0
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	d101      	bne.n	8006baa <memchr+0x12>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e003      	b.n	8006bb2 <memchr+0x1a>
 8006baa:	7804      	ldrb	r4, [r0, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	428c      	cmp	r4, r1
 8006bb0:	d1f6      	bne.n	8006ba0 <memchr+0x8>
 8006bb2:	bd10      	pop	{r4, pc}

08006bb4 <memmove>:
 8006bb4:	4288      	cmp	r0, r1
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	eb01 0402 	add.w	r4, r1, r2
 8006bbc:	d902      	bls.n	8006bc4 <memmove+0x10>
 8006bbe:	4284      	cmp	r4, r0
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	d807      	bhi.n	8006bd4 <memmove+0x20>
 8006bc4:	1e43      	subs	r3, r0, #1
 8006bc6:	42a1      	cmp	r1, r4
 8006bc8:	d008      	beq.n	8006bdc <memmove+0x28>
 8006bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bd2:	e7f8      	b.n	8006bc6 <memmove+0x12>
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	4402      	add	r2, r0
 8006bd8:	428a      	cmp	r2, r1
 8006bda:	d100      	bne.n	8006bde <memmove+0x2a>
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006be6:	e7f7      	b.n	8006bd8 <memmove+0x24>

08006be8 <_realloc_r>:
 8006be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bec:	4680      	mov	r8, r0
 8006bee:	4614      	mov	r4, r2
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	b921      	cbnz	r1, 8006bfe <_realloc_r+0x16>
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfa:	f7ff bb51 	b.w	80062a0 <_malloc_r>
 8006bfe:	b92a      	cbnz	r2, 8006c0c <_realloc_r+0x24>
 8006c00:	f7ff fc90 	bl	8006524 <_free_r>
 8006c04:	4625      	mov	r5, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c0c:	f000 f81b 	bl	8006c46 <_malloc_usable_size_r>
 8006c10:	4284      	cmp	r4, r0
 8006c12:	4607      	mov	r7, r0
 8006c14:	d802      	bhi.n	8006c1c <_realloc_r+0x34>
 8006c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c1a:	d812      	bhi.n	8006c42 <_realloc_r+0x5a>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7ff fb3e 	bl	80062a0 <_malloc_r>
 8006c24:	4605      	mov	r5, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d0ed      	beq.n	8006c06 <_realloc_r+0x1e>
 8006c2a:	42bc      	cmp	r4, r7
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4631      	mov	r1, r6
 8006c30:	bf28      	it	cs
 8006c32:	463a      	movcs	r2, r7
 8006c34:	f7ff fafe 	bl	8006234 <memcpy>
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f7ff fc72 	bl	8006524 <_free_r>
 8006c40:	e7e1      	b.n	8006c06 <_realloc_r+0x1e>
 8006c42:	4635      	mov	r5, r6
 8006c44:	e7df      	b.n	8006c06 <_realloc_r+0x1e>

08006c46 <_malloc_usable_size_r>:
 8006c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c4a:	1f18      	subs	r0, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bfbc      	itt	lt
 8006c50:	580b      	ldrlt	r3, [r1, r0]
 8006c52:	18c0      	addlt	r0, r0, r3
 8006c54:	4770      	bx	lr
	...

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
