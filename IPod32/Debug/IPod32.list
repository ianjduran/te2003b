
IPod32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004278  08004278  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004278  08004278  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004278  08004278  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a7c  20000074  080042f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  080042f4  00021af0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f09  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029dd  00000000  00000000  00032fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00035988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  000369f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002583  00000000  00000000  00037950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a24  00000000  00000000  00039ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b07  00000000  00000000  0004a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db3fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  000db450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004190 	.word	0x08004190

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004190 	.word	0x08004190

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa88 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f81c 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f860 	bl	8000220 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000160:	f000 f918 	bl	8000394 <USER_RCC_Init>
  USER_GPIO_Init();
 8000164:	f000 f92c 	bl	80003c0 <USER_GPIO_Init>
  USER_USART1_Init();
 8000168:	f000 f87c 	bl	8000264 <USER_USART1_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f001 fa0e 	bl	800158c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000170:	4a05      	ldr	r2, [pc, #20]	; (8000188 <main+0x38>)
 8000172:	2100      	movs	r1, #0
 8000174:	4805      	ldr	r0, [pc, #20]	; (800018c <main+0x3c>)
 8000176:	f001 fa6f 	bl	8001658 <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a04      	ldr	r2, [pc, #16]	; (8000190 <main+0x40>)
 800017e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000180:	f001 fa36 	bl	80015f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000184:	e7fe      	b.n	8000184 <main+0x34>
 8000186:	bf00      	nop
 8000188:	080041dc 	.word	0x080041dc
 800018c:	08000471 	.word	0x08000471
 8000190:	20000090 	.word	0x20000090

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f003 ff2e 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fb55 	bl	800088c <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e8:	f000 f95c 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fdc2 	bl	8000d90 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000212:	f000 f947 	bl	80004a4 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <MX_GPIO_Init+0x40>)
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <MX_GPIO_Init+0x40>)
 800022c:	f043 0320 	orr.w	r3, r3, #32
 8000230:	6193      	str	r3, [r2, #24]
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_GPIO_Init+0x40>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	f003 0320 	and.w	r3, r3, #32
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <MX_GPIO_Init+0x40>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <MX_GPIO_Init+0x40>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6193      	str	r3, [r2, #24]
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f003 0304 	and.w	r3, r3, #4
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]

}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000

08000264 <USER_USART1_Init>:

/* USER CODE BEGIN 4 */
void USER_USART1_Init(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <USER_USART1_Init+0x40>)
 800026a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800026e:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <USER_USART1_Init+0x40>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <USER_USART1_Init+0x40>)
 8000276:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 800027a:	f023 0313 	bic.w	r3, r3, #19
 800027e:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <USER_USART1_Init+0x40>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <USER_USART1_Init+0x40>)
 8000286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <USER_USART1_Init+0x40>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <USER_USART1_Init+0x40>)
 8000296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800029a:	6113      	str	r3, [r2, #16]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40013800 	.word	0x40013800

080002a8 <config_pin>:

	}
	return USART1->DR;
}

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
 80002b4:	4613      	mov	r3, r2
 80002b6:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 80002b8:	78bb      	ldrb	r3, [r7, #2]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d104      	bne.n	80002c8 <config_pin+0x20>
		//Input
		modeBits = 0b00;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 80002c2:	2301      	movs	r3, #1
 80002c4:	73bb      	strb	r3, [r7, #14]
 80002c6:	e014      	b.n	80002f2 <config_pin+0x4a>
	} else if(mode == 1){
 80002c8:	78bb      	ldrb	r3, [r7, #2]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d104      	bne.n	80002d8 <config_pin+0x30>
		//Output
		modeBits = 0b01;
 80002ce:	2301      	movs	r3, #1
 80002d0:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 80002d2:	2300      	movs	r3, #0
 80002d4:	73bb      	strb	r3, [r7, #14]
 80002d6:	e00c      	b.n	80002f2 <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 80002dc:	2302      	movs	r3, #2
 80002de:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	78fa      	ldrb	r2, [r7, #3]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 80002f2:	7bbb      	ldrb	r3, [r7, #14]
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	f003 030c 	and.w	r3, r3, #12
 80002fc:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 80002fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000302:	f003 0303 	and.w	r3, r3, #3
 8000306:	b25a      	sxtb	r2, r3
 8000308:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800030c:	4313      	orrs	r3, r2
 800030e:	b25b      	sxtb	r3, r3
 8000310:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 8000312:	78bb      	ldrb	r3, [r7, #2]
 8000314:	2b07      	cmp	r3, #7
 8000316:	d81a      	bhi.n	800034e <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	78fa      	ldrb	r2, [r7, #3]
 800031e:	0092      	lsls	r2, r2, #2
 8000320:	210f      	movs	r1, #15
 8000322:	fa01 f202 	lsl.w	r2, r1, r2
 8000326:	43d2      	mvns	r2, r2
 8000328:	401a      	ands	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	78fa      	ldrb	r2, [r7, #3]
 8000334:	0092      	lsls	r2, r2, #2
 8000336:	210f      	movs	r1, #15
 8000338:	4091      	lsls	r1, r2
 800033a:	7b78      	ldrb	r0, [r7, #13]
 800033c:	78fa      	ldrb	r2, [r7, #3]
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	fa00 f202 	lsl.w	r2, r0, r2
 8000344:	400a      	ands	r2, r1
 8000346:	431a      	orrs	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 800034c:	e01c      	b.n	8000388 <config_pin+0xe0>
		pin -= 8;
 800034e:	78fb      	ldrb	r3, [r7, #3]
 8000350:	3b08      	subs	r3, #8
 8000352:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	78fa      	ldrb	r2, [r7, #3]
 800035a:	0092      	lsls	r2, r2, #2
 800035c:	210f      	movs	r1, #15
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	43d2      	mvns	r2, r2
 8000364:	401a      	ands	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	78fa      	ldrb	r2, [r7, #3]
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	210f      	movs	r1, #15
 8000374:	4091      	lsls	r1, r2
 8000376:	7b78      	ldrb	r0, [r7, #13]
 8000378:	78fa      	ldrb	r2, [r7, #3]
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	fa00 f202 	lsl.w	r2, r0, r2
 8000380:	400a      	ands	r2, r1
 8000382:	431a      	orrs	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	605a      	str	r2, [r3, #4]
}
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
	...

08000394 <USER_RCC_Init>:

void USER_RCC_Init(void){
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <USER_RCC_Init+0x28>)
 800039a:	69db      	ldr	r3, [r3, #28]
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <USER_RCC_Init+0x28>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <USER_RCC_Init+0x28>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <USER_RCC_Init+0x28>)
 80003aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ae:	f043 0314 	orr.w	r3, r3, #20
 80003b2:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN;
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 80003c4:	4b28      	ldr	r3, [pc, #160]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4a27      	ldr	r2, [pc, #156]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80003ce:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a24      	ldr	r2, [pc, #144]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003d6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80003da:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 80003dc:	4b22      	ldr	r3, [pc, #136]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a21      	ldr	r2, [pc, #132]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80003e6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f2:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <USER_GPIO_Init+0xa8>)
 80003f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003fa:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <USER_GPIO_Init+0xac>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <USER_GPIO_Init+0xac>)
 8000402:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000406:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <USER_GPIO_Init+0xac>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <USER_GPIO_Init+0xac>)
 800040e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000412:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000414:	2202      	movs	r2, #2
 8000416:	2100      	movs	r1, #0
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <USER_GPIO_Init+0xa8>)
 800041a:	f7ff ff45 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 1, 2);
 800041e:	2202      	movs	r2, #2
 8000420:	2101      	movs	r1, #1
 8000422:	4811      	ldr	r0, [pc, #68]	; (8000468 <USER_GPIO_Init+0xa8>)
 8000424:	f7ff ff40 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 2, 2);
 8000428:	2202      	movs	r2, #2
 800042a:	2102      	movs	r1, #2
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <USER_GPIO_Init+0xa8>)
 800042e:	f7ff ff3b 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 3, 2);
 8000432:	2202      	movs	r2, #2
 8000434:	2103      	movs	r1, #3
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <USER_GPIO_Init+0xa8>)
 8000438:	f7ff ff36 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 4, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2104      	movs	r1, #4
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <USER_GPIO_Init+0xa8>)
 8000442:	f7ff ff31 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 5, 1);
 8000446:	2201      	movs	r2, #1
 8000448:	2105      	movs	r1, #5
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <USER_GPIO_Init+0xa8>)
 800044c:	f7ff ff2c 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 6, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	2106      	movs	r1, #6
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <USER_GPIO_Init+0xa8>)
 8000456:	f7ff ff27 	bl	80002a8 <config_pin>
	config_pin(GPIOA, 7, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	2107      	movs	r1, #7
 800045e:	4802      	ldr	r0, [pc, #8]	; (8000468 <USER_GPIO_Init+0xa8>)
 8000460:	f7ff ff22 	bl	80002a8 <config_pin>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40010800 	.word	0x40010800
 800046c:	40011000 	.word	0x40011000

08000470 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000478:	2001      	movs	r0, #1
 800047a:	f001 f997 	bl	80017ac <osDelay>
 800047e:	e7fb      	b.n	8000478 <StartDefaultTask+0x8>

08000480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d101      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000492:	f000 f8ff 	bl	8000694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40000800 	.word	0x40000800

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <HAL_MspInit+0x68>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a17      	ldr	r2, [pc, #92]	; (8000518 <HAL_MspInit+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <HAL_MspInit+0x68>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_MspInit+0x68>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <HAL_MspInit+0x68>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x68>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	210f      	movs	r1, #15
 80004ea:	f06f 0001 	mvn.w	r0, #1
 80004ee:	f000 f9a2 	bl	8000836 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_MspInit+0x6c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_MspInit+0x6c>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08c      	sub	sp, #48	; 0x30
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	201e      	movs	r0, #30
 8000536:	f000 f97e 	bl	8000836 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800053a:	201e      	movs	r0, #30
 800053c:	f000 f997 	bl	800086e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <HAL_InitTick+0xa0>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <HAL_InitTick+0xa0>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	61d3      	str	r3, [r2, #28]
 800054c:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <HAL_InitTick+0xa0>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000558:	f107 0210 	add.w	r2, r7, #16
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fd7a 	bl	800105c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000568:	f000 fd64 	bl	8001034 <HAL_RCC_GetPCLK1Freq>
 800056c:	4603      	mov	r3, r0
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000574:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <HAL_InitTick+0xa4>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	0c9b      	lsrs	r3, r3, #18
 800057c:	3b01      	subs	r3, #1
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <HAL_InitTick+0xa8>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <HAL_InitTick+0xac>)
 8000584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <HAL_InitTick+0xa8>)
 8000588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800058c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_InitTick+0xa8>)
 8000590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000592:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_InitTick+0xa8>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HAL_InitTick+0xa8>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <HAL_InitTick+0xa8>)
 80005a2:	f000 fda9 	bl	80010f8 <HAL_TIM_Base_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d104      	bne.n	80005b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <HAL_InitTick+0xa8>)
 80005ae:	f000 fdfb 	bl	80011a8 <HAL_TIM_Base_Start_IT>
 80005b2:	4603      	mov	r3, r0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3730      	adds	r7, #48	; 0x30
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000
 80005c4:	431bde83 	.word	0x431bde83
 80005c8:	20000094 	.word	0x20000094
 80005cc:	40000800 	.word	0x40000800

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
	...

080005fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <TIM4_IRQHandler+0x10>)
 8000602:	f000 fe23 	bl	800124c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000094 	.word	0x20000094

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000642:	f7ff ffe5 	bl	8000610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f003 fca9 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fd81 	bl	8000150 <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000658:	08004280 	.word	0x08004280
  ldr r2, =_sbss
 800065c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000660:	20001af0 	.word	0x20001af0

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f8d1 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f7ff ff4e 	bl	8000520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff ff14 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000008 	.word	0x20000008
 80006b4:	200000dc 	.word	0x200000dc

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	200000dc 	.word	0x200000dc

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db0b      	blt.n	800075a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f003 021f 	and.w	r2, r3, #31
 8000748:	4906      	ldr	r1, [pc, #24]	; (8000764 <__NVIC_EnableIRQ+0x34>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	2001      	movs	r0, #1
 8000752:	fa00 f202 	lsl.w	r2, r0, r2
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff4f 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000848:	f7ff ff64 	bl	8000714 <__NVIC_GetPriorityGrouping>
 800084c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f7ff ffb2 	bl	80007bc <NVIC_EncodePriority>
 8000858:	4602      	mov	r2, r0
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff81 	bl	8000768 <__NVIC_SetPriority>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff57 	bl	8000730 <__NVIC_EnableIRQ>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e272      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8087 	beq.w	80009ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ac:	4b92      	ldr	r3, [pc, #584]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 030c 	and.w	r3, r3, #12
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d00c      	beq.n	80008d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b8:	4b8f      	ldr	r3, [pc, #572]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 030c 	and.w	r3, r3, #12
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	d112      	bne.n	80008ea <HAL_RCC_OscConfig+0x5e>
 80008c4:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d0:	d10b      	bne.n	80008ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d2:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d06c      	beq.n	80009b8 <HAL_RCC_OscConfig+0x12c>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d168      	bne.n	80009b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e24c      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f2:	d106      	bne.n	8000902 <HAL_RCC_OscConfig+0x76>
 80008f4:	4b80      	ldr	r3, [pc, #512]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a7f      	ldr	r2, [pc, #508]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80008fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e02e      	b.n	8000960 <HAL_RCC_OscConfig+0xd4>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10c      	bne.n	8000924 <HAL_RCC_OscConfig+0x98>
 800090a:	4b7b      	ldr	r3, [pc, #492]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a7a      	ldr	r2, [pc, #488]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a77      	ldr	r2, [pc, #476]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 800091c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	e01d      	b.n	8000960 <HAL_RCC_OscConfig+0xd4>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800092c:	d10c      	bne.n	8000948 <HAL_RCC_OscConfig+0xbc>
 800092e:	4b72      	ldr	r3, [pc, #456]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a71      	ldr	r2, [pc, #452]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	4b6f      	ldr	r3, [pc, #444]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a6e      	ldr	r2, [pc, #440]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	e00b      	b.n	8000960 <HAL_RCC_OscConfig+0xd4>
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 800094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a67      	ldr	r2, [pc, #412]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 800095a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d013      	beq.n	8000990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000968:	f7ff fea6 	bl	80006b8 <HAL_GetTick>
 800096c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096e:	e008      	b.n	8000982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000970:	f7ff fea2 	bl	80006b8 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	2b64      	cmp	r3, #100	; 0x64
 800097c:	d901      	bls.n	8000982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800097e:	2303      	movs	r3, #3
 8000980:	e200      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000982:	4b5d      	ldr	r3, [pc, #372]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f0      	beq.n	8000970 <HAL_RCC_OscConfig+0xe4>
 800098e:	e014      	b.n	80009ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000990:	f7ff fe92 	bl	80006b8 <HAL_GetTick>
 8000994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000998:	f7ff fe8e 	bl	80006b8 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b64      	cmp	r3, #100	; 0x64
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e1ec      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009aa:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f0      	bne.n	8000998 <HAL_RCC_OscConfig+0x10c>
 80009b6:	e000      	b.n	80009ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d063      	beq.n	8000a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009c6:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 030c 	and.w	r3, r3, #12
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00b      	beq.n	80009ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009d2:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 030c 	and.w	r3, r3, #12
 80009da:	2b08      	cmp	r3, #8
 80009dc:	d11c      	bne.n	8000a18 <HAL_RCC_OscConfig+0x18c>
 80009de:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d116      	bne.n	8000a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ea:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d005      	beq.n	8000a02 <HAL_RCC_OscConfig+0x176>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d001      	beq.n	8000a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e1c0      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	4939      	ldr	r1, [pc, #228]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a16:	e03a      	b.n	8000a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d020      	beq.n	8000a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a20:	4b36      	ldr	r3, [pc, #216]	; (8000afc <HAL_RCC_OscConfig+0x270>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a26:	f7ff fe47 	bl	80006b8 <HAL_GetTick>
 8000a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a2c:	e008      	b.n	8000a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a2e:	f7ff fe43 	bl	80006b8 <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d901      	bls.n	8000a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e1a1      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f0      	beq.n	8000a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	4927      	ldr	r1, [pc, #156]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	600b      	str	r3, [r1, #0]
 8000a60:	e015      	b.n	8000a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_RCC_OscConfig+0x270>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fe26 	bl	80006b8 <HAL_GetTick>
 8000a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a6e:	e008      	b.n	8000a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a70:	f7ff fe22 	bl	80006b8 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d901      	bls.n	8000a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e180      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1f0      	bne.n	8000a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d03a      	beq.n	8000b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d019      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_RCC_OscConfig+0x274>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fe06 	bl	80006b8 <HAL_GetTick>
 8000aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aae:	e008      	b.n	8000ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ab0:	f7ff fe02 	bl	80006b8 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d901      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e160      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f0      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f000 faf4 	bl	80010bc <RCC_Delay>
 8000ad4:	e01c      	b.n	8000b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_RCC_OscConfig+0x274>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000adc:	f7ff fdec 	bl	80006b8 <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae2:	e00f      	b.n	8000b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ae4:	f7ff fde8 	bl	80006b8 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d908      	bls.n	8000b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e146      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	42420000 	.word	0x42420000
 8000b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b04:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e9      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 80a6 	beq.w	8000c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b22:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10d      	bne.n	8000b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b88      	ldr	r3, [pc, #544]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a87      	ldr	r2, [pc, #540]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b85      	ldr	r3, [pc, #532]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b46:	2301      	movs	r3, #1
 8000b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b4a:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <HAL_RCC_OscConfig+0x4c8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d118      	bne.n	8000b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b56:	4b7f      	ldr	r3, [pc, #508]	; (8000d54 <HAL_RCC_OscConfig+0x4c8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a7e      	ldr	r2, [pc, #504]	; (8000d54 <HAL_RCC_OscConfig+0x4c8>)
 8000b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b62:	f7ff fda9 	bl	80006b8 <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b6a:	f7ff fda5 	bl	80006b8 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b64      	cmp	r3, #100	; 0x64
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e103      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b7c:	4b75      	ldr	r3, [pc, #468]	; (8000d54 <HAL_RCC_OscConfig+0x4c8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f0      	beq.n	8000b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d106      	bne.n	8000b9e <HAL_RCC_OscConfig+0x312>
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	4a6e      	ldr	r2, [pc, #440]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6213      	str	r3, [r2, #32]
 8000b9c:	e02d      	b.n	8000bfa <HAL_RCC_OscConfig+0x36e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x334>
 8000ba6:	4b6a      	ldr	r3, [pc, #424]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	4a69      	ldr	r2, [pc, #420]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	6213      	str	r3, [r2, #32]
 8000bb2:	4b67      	ldr	r3, [pc, #412]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bb4:	6a1b      	ldr	r3, [r3, #32]
 8000bb6:	4a66      	ldr	r2, [pc, #408]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bb8:	f023 0304 	bic.w	r3, r3, #4
 8000bbc:	6213      	str	r3, [r2, #32]
 8000bbe:	e01c      	b.n	8000bfa <HAL_RCC_OscConfig+0x36e>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	2b05      	cmp	r3, #5
 8000bc6:	d10c      	bne.n	8000be2 <HAL_RCC_OscConfig+0x356>
 8000bc8:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6213      	str	r3, [r2, #32]
 8000bd4:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6213      	str	r3, [r2, #32]
 8000be0:	e00b      	b.n	8000bfa <HAL_RCC_OscConfig+0x36e>
 8000be2:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	4a5a      	ldr	r2, [pc, #360]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	f023 0301 	bic.w	r3, r3, #1
 8000bec:	6213      	str	r3, [r2, #32]
 8000bee:	4b58      	ldr	r3, [pc, #352]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	4a57      	ldr	r2, [pc, #348]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000bf4:	f023 0304 	bic.w	r3, r3, #4
 8000bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d015      	beq.n	8000c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c02:	f7ff fd59 	bl	80006b8 <HAL_GetTick>
 8000c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c08:	e00a      	b.n	8000c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fd55 	bl	80006b8 <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d901      	bls.n	8000c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e0b1      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c20:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000c22:	6a1b      	ldr	r3, [r3, #32]
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0ee      	beq.n	8000c0a <HAL_RCC_OscConfig+0x37e>
 8000c2c:	e014      	b.n	8000c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2e:	f7ff fd43 	bl	80006b8 <HAL_GetTick>
 8000c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c34:	e00a      	b.n	8000c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c36:	f7ff fd3f 	bl	80006b8 <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e09b      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1ee      	bne.n	8000c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d105      	bne.n	8000c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8087 	beq.w	8000d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d061      	beq.n	8000d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d146      	bne.n	8000d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_RCC_OscConfig+0x4cc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fd13 	bl	80006b8 <HAL_GetTick>
 8000c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c94:	e008      	b.n	8000ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c96:	f7ff fd0f 	bl	80006b8 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d901      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e06d      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f0      	bne.n	8000c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cbc:	d108      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	4921      	ldr	r1, [pc, #132]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a19      	ldr	r1, [r3, #32]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	491b      	ldr	r1, [pc, #108]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_RCC_OscConfig+0x4cc>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff fce3 	bl	80006b8 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cf6:	f7ff fcdf 	bl	80006b8 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e03d      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x46a>
 8000d14:	e035      	b.n	8000d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_RCC_OscConfig+0x4cc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fccc 	bl	80006b8 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d24:	f7ff fcc8 	bl	80006b8 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e026      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_RCC_OscConfig+0x4c4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x498>
 8000d42:	e01e      	b.n	8000d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d107      	bne.n	8000d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e019      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40007000 	.word	0x40007000
 8000d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_RCC_OscConfig+0x500>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d001      	beq.n	8000d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e0d0      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000da4:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d910      	bls.n	8000dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 0207 	bic.w	r2, r3, #7
 8000dba:	4965      	ldr	r1, [pc, #404]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e0b8      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d020      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dec:	4b59      	ldr	r3, [pc, #356]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4a58      	ldr	r2, [pc, #352]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e04:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a52      	ldr	r2, [pc, #328]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e10:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	494d      	ldr	r1, [pc, #308]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d040      	beq.n	8000eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d107      	bne.n	8000e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d115      	bne.n	8000e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e07f      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d107      	bne.n	8000e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4e:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e073      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e06b      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f023 0203 	bic.w	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4936      	ldr	r1, [pc, #216]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e80:	f7ff fc1a 	bl	80006b8 <HAL_GetTick>
 8000e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e86:	e00a      	b.n	8000e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e88:	f7ff fc16 	bl	80006b8 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e053      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 020c 	and.w	r2, r3, #12
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d1eb      	bne.n	8000e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d210      	bcs.n	8000ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 0207 	bic.w	r2, r3, #7
 8000ec6:	4922      	ldr	r1, [pc, #136]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d001      	beq.n	8000ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e032      	b.n	8000f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	4916      	ldr	r1, [pc, #88]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d009      	beq.n	8000f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	490e      	ldr	r1, [pc, #56]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f1e:	f000 f821 	bl	8000f64 <HAL_RCC_GetSysClockFreq>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_RCC_ClockConfig+0x1c4>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	490a      	ldr	r1, [pc, #40]	; (8000f58 <HAL_RCC_ClockConfig+0x1c8>)
 8000f30:	5ccb      	ldrb	r3, [r1, r3]
 8000f32:	fa22 f303 	lsr.w	r3, r2, r3
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_RCC_ClockConfig+0x1cc>)
 8000f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_RCC_ClockConfig+0x1d0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff faee 	bl	8000520 <HAL_InitTick>

  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000
 8000f54:	40021000 	.word	0x40021000
 8000f58:	08004200 	.word	0x08004200
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f64:	b490      	push	{r4, r7}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_RCC_GetSysClockFreq+0xac>)
 8000f6c:	1d3c      	adds	r4, r7, #4
 8000f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f74:	f240 2301 	movw	r3, #513	; 0x201
 8000f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d002      	beq.n	8000fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d003      	beq.n	8000faa <HAL_RCC_GetSysClockFreq+0x46>
 8000fa2:	e02b      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fa6:	623b      	str	r3, [r7, #32]
      break;
 8000fa8:	e02b      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	0c9b      	lsrs	r3, r3, #18
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3328      	adds	r3, #40	; 0x28
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d012      	beq.n	8000fec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	0c5b      	lsrs	r3, r3, #17
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	3328      	adds	r3, #40	; 0x28
 8000fd2:	443b      	add	r3, r7
 8000fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fde:	fb03 f202 	mul.w	r2, r3, r2
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fea:	e004      	b.n	8000ff6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	623b      	str	r3, [r7, #32]
      break;
 8000ffa:	e002      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ffe:	623b      	str	r3, [r7, #32]
      break;
 8001000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001002:	6a3b      	ldr	r3, [r7, #32]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bc90      	pop	{r4, r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	080041b4 	.word	0x080041b4
 8001014:	40021000 	.word	0x40021000
 8001018:	007a1200 	.word	0x007a1200
 800101c:	003d0900 	.word	0x003d0900

08001020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_RCC_GetHCLKFreq+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001038:	f7ff fff2 	bl	8001020 <HAL_RCC_GetHCLKFreq>
 800103c:	4602      	mov	r2, r0
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	4903      	ldr	r1, [pc, #12]	; (8001058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800104a:	5ccb      	ldrb	r3, [r1, r3]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	08004210 	.word	0x08004210

0800105c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	220f      	movs	r2, #15
 800106a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_RCC_GetClockConfig+0x58>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_RCC_GetClockConfig+0x58>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_GetClockConfig+0x58>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_RCC_GetClockConfig+0x58>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_RCC_GetClockConfig+0x5c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0207 	and.w	r2, r3, #7
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40022000 	.word	0x40022000

080010bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <RCC_Delay+0x34>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <RCC_Delay+0x38>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0a5b      	lsrs	r3, r3, #9
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80010d8:	bf00      	nop
  }
  while (Delay --);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	60fa      	str	r2, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f9      	bne.n	80010d8 <RCC_Delay+0x1c>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000000 	.word	0x20000000
 80010f4:	10624dd3 	.word	0x10624dd3

080010f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e041      	b.n	800118e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f839 	bl	8001196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2202      	movs	r2, #2
 8001128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3304      	adds	r3, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f000 f9b4 	bl	80014a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d001      	beq.n	80011c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e03a      	b.n	8001236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2202      	movs	r2, #2
 80011c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_TIM_Base_Start_IT+0x98>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00e      	beq.n	8001200 <HAL_TIM_Base_Start_IT+0x58>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ea:	d009      	beq.n	8001200 <HAL_TIM_Base_Start_IT+0x58>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_TIM_Base_Start_IT+0x9c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_TIM_Base_Start_IT+0x58>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <HAL_TIM_Base_Start_IT+0xa0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d111      	bne.n	8001224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b06      	cmp	r3, #6
 8001210:	d010      	beq.n	8001234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001222:	e007      	b.n	8001234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40000400 	.word	0x40000400
 8001248:	40000800 	.word	0x40000800

0800124c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d122      	bne.n	80012a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b02      	cmp	r3, #2
 800126e:	d11b      	bne.n	80012a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f06f 0202 	mvn.w	r2, #2
 8001278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f8ed 	bl	800146e <HAL_TIM_IC_CaptureCallback>
 8001294:	e005      	b.n	80012a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f8e0 	bl	800145c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f8ef 	bl	8001480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d122      	bne.n	80012fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d11b      	bne.n	80012fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0204 	mvn.w	r2, #4
 80012cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2202      	movs	r2, #2
 80012d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f8c3 	bl	800146e <HAL_TIM_IC_CaptureCallback>
 80012e8:	e005      	b.n	80012f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8b6 	bl	800145c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f8c5 	bl	8001480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b08      	cmp	r3, #8
 8001308:	d122      	bne.n	8001350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b08      	cmp	r3, #8
 8001316:	d11b      	bne.n	8001350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f06f 0208 	mvn.w	r2, #8
 8001320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2204      	movs	r2, #4
 8001326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f899 	bl	800146e <HAL_TIM_IC_CaptureCallback>
 800133c:	e005      	b.n	800134a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f88c 	bl	800145c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f89b 	bl	8001480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b10      	cmp	r3, #16
 800135c:	d122      	bne.n	80013a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	2b10      	cmp	r3, #16
 800136a:	d11b      	bne.n	80013a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f06f 0210 	mvn.w	r2, #16
 8001374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2208      	movs	r2, #8
 800137a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f86f 	bl	800146e <HAL_TIM_IC_CaptureCallback>
 8001390:	e005      	b.n	800139e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f862 	bl	800145c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f871 	bl	8001480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10e      	bne.n	80013d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d107      	bne.n	80013d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f06f 0201 	mvn.w	r2, #1
 80013c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff f858 	bl	8000480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b80      	cmp	r3, #128	; 0x80
 80013dc:	d10e      	bne.n	80013fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e8:	2b80      	cmp	r3, #128	; 0x80
 80013ea:	d107      	bne.n	80013fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f8bf 	bl	800157a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001406:	2b40      	cmp	r3, #64	; 0x40
 8001408:	d10e      	bne.n	8001428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b40      	cmp	r3, #64	; 0x40
 8001416:	d107      	bne.n	8001428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f835 	bl	8001492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	2b20      	cmp	r3, #32
 8001434:	d10e      	bne.n	8001454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b20      	cmp	r3, #32
 8001442:	d107      	bne.n	8001454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f06f 0220 	mvn.w	r2, #32
 800144c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f88a 	bl	8001568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <TIM_Base_SetConfig+0xb8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d00b      	beq.n	80014d4 <TIM_Base_SetConfig+0x30>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c2:	d007      	beq.n	80014d4 <TIM_Base_SetConfig+0x30>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a26      	ldr	r2, [pc, #152]	; (8001560 <TIM_Base_SetConfig+0xbc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d003      	beq.n	80014d4 <TIM_Base_SetConfig+0x30>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <TIM_Base_SetConfig+0xc0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d108      	bne.n	80014e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <TIM_Base_SetConfig+0xb8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00b      	beq.n	8001506 <TIM_Base_SetConfig+0x62>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f4:	d007      	beq.n	8001506 <TIM_Base_SetConfig+0x62>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <TIM_Base_SetConfig+0xbc>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d003      	beq.n	8001506 <TIM_Base_SetConfig+0x62>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a18      	ldr	r2, [pc, #96]	; (8001564 <TIM_Base_SetConfig+0xc0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d108      	bne.n	8001518 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <TIM_Base_SetConfig+0xb8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d103      	bne.n	800154c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	615a      	str	r2, [r3, #20]
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40012c00 	.word	0x40012c00
 8001560:	40000400 	.word	0x40000400
 8001564:	40000800 	.word	0x40000800

08001568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001592:	f3ef 8305 	mrs	r3, IPSR
 8001596:	60bb      	str	r3, [r7, #8]
  return(result);
 8001598:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800159e:	f3ef 8310 	mrs	r3, PRIMASK
 80015a2:	607b      	str	r3, [r7, #4]
  return(result);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <osKernelInitialize+0x32>
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <osKernelInitialize+0x60>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d109      	bne.n	80015c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015b2:	f3ef 8311 	mrs	r3, BASEPRI
 80015b6:	603b      	str	r3, [r7, #0]
  return(result);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80015be:	f06f 0305 	mvn.w	r3, #5
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e00c      	b.n	80015e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <osKernelInitialize+0x60>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <osKernelInitialize+0x60>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e002      	b.n	80015e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80015e0:	68fb      	ldr	r3, [r7, #12]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	200000e0 	.word	0x200000e0

080015f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015f6:	f3ef 8305 	mrs	r3, IPSR
 80015fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80015fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001602:	f3ef 8310 	mrs	r3, PRIMASK
 8001606:	607b      	str	r3, [r7, #4]
  return(result);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <osKernelStart+0x32>
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <osKernelStart+0x64>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d109      	bne.n	800162a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001616:	f3ef 8311 	mrs	r3, BASEPRI
 800161a:	603b      	str	r3, [r7, #0]
  return(result);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001622:	f06f 0305 	mvn.w	r3, #5
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e00e      	b.n	8001648 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <osKernelStart+0x64>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <osKernelStart+0x64>)
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001638:	f001 f890 	bl	800275c <vTaskStartScheduler>
      stat = osOK;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e002      	b.n	8001648 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000e0 	.word	0x200000e0

08001658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b092      	sub	sp, #72	; 0x48
 800165c:	af04      	add	r7, sp, #16
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001668:	f3ef 8305 	mrs	r3, IPSR
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 8094 	bne.w	800179e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001676:	f3ef 8310 	mrs	r3, PRIMASK
 800167a:	623b      	str	r3, [r7, #32]
  return(result);
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 808d 	bne.w	800179e <osThreadNew+0x146>
 8001684:	4b48      	ldr	r3, [pc, #288]	; (80017a8 <osThreadNew+0x150>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d106      	bne.n	800169a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800168c:	f3ef 8311 	mrs	r3, BASEPRI
 8001690:	61fb      	str	r3, [r7, #28]
  return(result);
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 8082 	bne.w	800179e <osThreadNew+0x146>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d07e      	beq.n	800179e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80016a4:	2318      	movs	r3, #24
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80016a8:	2300      	movs	r3, #0
 80016aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80016ac:	f107 031b 	add.w	r3, r7, #27
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d045      	beq.n	800174a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <osThreadNew+0x74>
        name = attr->name;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <osThreadNew+0x9a>
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	2b38      	cmp	r3, #56	; 0x38
 80016e4:	d805      	bhi.n	80016f2 <osThreadNew+0x9a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <osThreadNew+0x9e>
        return (NULL);
 80016f2:	2300      	movs	r3, #0
 80016f4:	e054      	b.n	80017a0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00e      	beq.n	800172c <osThreadNew+0xd4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2bbb      	cmp	r3, #187	; 0xbb
 8001714:	d90a      	bls.n	800172c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <osThreadNew+0xd4>
        mem = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
 800172a:	e010      	b.n	800174e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <osThreadNew+0xf6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d108      	bne.n	800174e <osThreadNew+0xf6>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d104      	bne.n	800174e <osThreadNew+0xf6>
          mem = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
 8001748:	e001      	b.n	800174e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	2b01      	cmp	r3, #1
 8001752:	d110      	bne.n	8001776 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800175c:	9202      	str	r2, [sp, #8]
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001768:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fe12 	bl	8002394 <xTaskCreateStatic>
 8001770:	4603      	mov	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e013      	b.n	800179e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001778:	2b00      	cmp	r3, #0
 800177a:	d110      	bne.n	800179e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fe5c 	bl	800244c <xTaskCreate>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <osThreadNew+0x146>
          hTask = NULL;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800179e:	697b      	ldr	r3, [r7, #20]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3738      	adds	r7, #56	; 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200000e0 	.word	0x200000e0

080017ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017b4:	f3ef 8305 	mrs	r3, IPSR
 80017b8:	613b      	str	r3, [r7, #16]
  return(result);
 80017ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10f      	bne.n	80017e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017c0:	f3ef 8310 	mrs	r3, PRIMASK
 80017c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <osDelay+0x34>
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <osDelay+0x58>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d109      	bne.n	80017e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017d4:	f3ef 8311 	mrs	r3, BASEPRI
 80017d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <osDelay+0x3c>
    stat = osErrorISR;
 80017e0:	f06f 0305 	mvn.w	r3, #5
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e007      	b.n	80017f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 ff7e 	bl	80026f4 <vTaskDelay>
    }
  }

  return (stat);
 80017f8:	697b      	ldr	r3, [r7, #20]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000e0 	.word	0x200000e0

08001808 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a06      	ldr	r2, [pc, #24]	; (8001830 <vApplicationGetIdleTaskMemory+0x28>)
 8001818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <vApplicationGetIdleTaskMemory+0x2c>)
 800181e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	601a      	str	r2, [r3, #0]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	200000e4 	.word	0x200000e4
 8001834:	200001a0 	.word	0x200001a0

08001838 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <vApplicationGetTimerTaskMemory+0x2c>)
 8001848:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <vApplicationGetTimerTaskMemory+0x30>)
 800184e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200003a0 	.word	0x200003a0
 8001868:	2000045c 	.word	0x2000045c

0800186c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f103 0208 	add.w	r2, r3, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f103 0208 	add.w	r2, r3, #8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 0208 	add.w	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800191e:	d103      	bne.n	8001928 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e00c      	b.n	8001942 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3308      	adds	r3, #8
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e002      	b.n	8001936 <vListInsert+0x2e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d2f6      	bcs.n	8001930 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6892      	ldr	r2, [r2, #8]
 800198e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6852      	ldr	r2, [r2, #4]
 8001998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d103      	bne.n	80019ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e4:	f383 8811 	msr	BASEPRI, r3
 80019e8:	f3bf 8f6f 	isb	sy
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019f2:	bf00      	nop
 80019f4:	e7fe      	b.n	80019f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80019f6:	f001 fff9 	bl	80039ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	441a      	add	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	3b01      	subs	r3, #1
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	441a      	add	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	22ff      	movs	r2, #255	; 0xff
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d114      	bne.n	8001a76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01a      	beq.n	8001a8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3310      	adds	r3, #16
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 f91b 	bl	8002c94 <xTaskRemoveFromEventList>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d012      	beq.n	8001a8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <xQueueGenericReset+0xcc>)
 8001a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	e009      	b.n	8001a8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3310      	adds	r3, #16
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fef6 	bl	800186c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3324      	adds	r3, #36	; 0x24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fef1 	bl	800186c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a8a:	f001 ffdf 	bl	8003a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	e000ed04 	.word	0xe000ed04

08001a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ac2:	bf00      	nop
 8001ac4:	e7fe      	b.n	8001ac4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ade:	bf00      	nop
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <xQueueGenericCreateStatic+0x52>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <xQueueGenericCreateStatic+0x56>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <xQueueGenericCreateStatic+0x58>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10a      	bne.n	8001b0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afc:	f383 8811 	msr	BASEPRI, r3
 8001b00:	f3bf 8f6f 	isb	sy
 8001b04:	f3bf 8f4f 	dsb	sy
 8001b08:	623b      	str	r3, [r7, #32]
}
 8001b0a:	bf00      	nop
 8001b0c:	e7fe      	b.n	8001b0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <xQueueGenericCreateStatic+0x7e>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <xQueueGenericCreateStatic+0x82>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <xQueueGenericCreateStatic+0x84>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	61fb      	str	r3, [r7, #28]
}
 8001b36:	bf00      	nop
 8001b38:	e7fe      	b.n	8001b38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001b3a:	2350      	movs	r3, #80	; 0x50
 8001b3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b50      	cmp	r3, #80	; 0x50
 8001b42:	d00a      	beq.n	8001b5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	61bb      	str	r3, [r7, #24]
}
 8001b56:	bf00      	nop
 8001b58:	e7fe      	b.n	8001b58 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00d      	beq.n	8001b80 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f805 	bl	8001b8a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3730      	adds	r7, #48	; 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d103      	bne.n	8001ba6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e002      	b.n	8001bac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bb8:	2101      	movs	r1, #1
 8001bba:	69b8      	ldr	r0, [r7, #24]
 8001bbc:	f7ff ff06 	bl	80019cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	; 0x38
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <xQueueGenericSend+0x32>
	__asm volatile
 8001bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf0:	f383 8811 	msr	BASEPRI, r3
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001bfe:	bf00      	nop
 8001c00:	e7fe      	b.n	8001c00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <xQueueGenericSend+0x40>
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <xQueueGenericSend+0x44>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <xQueueGenericSend+0x46>
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <xQueueGenericSend+0x60>
	__asm volatile
 8001c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c2c:	bf00      	nop
 8001c2e:	e7fe      	b.n	8001c2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d103      	bne.n	8001c3e <xQueueGenericSend+0x6e>
 8001c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <xQueueGenericSend+0x72>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <xQueueGenericSend+0x74>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <xQueueGenericSend+0x8e>
	__asm volatile
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	623b      	str	r3, [r7, #32]
}
 8001c5a:	bf00      	nop
 8001c5c:	e7fe      	b.n	8001c5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c5e:	f001 f9df 	bl	8003020 <xTaskGetSchedulerState>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <xQueueGenericSend+0x9e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <xQueueGenericSend+0xa2>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <xQueueGenericSend+0xa4>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <xQueueGenericSend+0xbe>
	__asm volatile
 8001c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7c:	f383 8811 	msr	BASEPRI, r3
 8001c80:	f3bf 8f6f 	isb	sy
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	61fb      	str	r3, [r7, #28]
}
 8001c8a:	bf00      	nop
 8001c8c:	e7fe      	b.n	8001c8c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c8e:	f001 fead 	bl	80039ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <xQueueGenericSend+0xd4>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d129      	bne.n	8001cf8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001caa:	f000 fa07 	bl	80020bc <prvCopyDataToQueue>
 8001cae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	3324      	adds	r3, #36	; 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 ffe9 	bl	8002c94 <xTaskRemoveFromEventList>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <xQueueGenericSend+0x1f8>)
 8001cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	e00a      	b.n	8001cf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <xQueueGenericSend+0x1f8>)
 8001ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cf0:	f001 feac 	bl	8003a4c <vPortExitCritical>
				return pdPASS;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e063      	b.n	8001dc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d103      	bne.n	8001d06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cfe:	f001 fea5 	bl	8003a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e05c      	b.n	8001dc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 f823 	bl	8002d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d1a:	f001 fe97 	bl	8003a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d1e:	f000 fd8d 	bl	800283c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d22:	f001 fe63 	bl	80039ec <vPortEnterCritical>
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d32:	d103      	bne.n	8001d3c <xQueueGenericSend+0x16c>
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d48:	d103      	bne.n	8001d52 <xQueueGenericSend+0x182>
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d52:	f001 fe7b 	bl	8003a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d56:	1d3a      	adds	r2, r7, #4
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 f812 	bl	8002d88 <xTaskCheckForTimeOut>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d124      	bne.n	8001db4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d6c:	f000 fa9e 	bl	80022ac <prvIsQueueFull>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d018      	beq.n	8001da8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	3310      	adds	r3, #16
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 ff38 	bl	8002bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d86:	f000 fa29 	bl	80021dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d8a:	f000 fd65 	bl	8002858 <xTaskResumeAll>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f af7c 	bne.w	8001c8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <xQueueGenericSend+0x1f8>)
 8001d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	e772      	b.n	8001c8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001daa:	f000 fa17 	bl	80021dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001dae:	f000 fd53 	bl	8002858 <xTaskResumeAll>
 8001db2:	e76c      	b.n	8001c8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001db6:	f000 fa11 	bl	80021dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001dba:	f000 fd4d 	bl	8002858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001dbe:	2300      	movs	r3, #0
		}
	}
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3738      	adds	r7, #56	; 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	e000ed04 	.word	0xe000ed04

08001dcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001df6:	bf00      	nop
 8001df8:	e7fe      	b.n	8001df8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <xQueueGenericSendFromISR+0x3c>
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <xQueueGenericSendFromISR+0x40>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <xQueueGenericSendFromISR+0x42>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10a      	bne.n	8001e28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	623b      	str	r3, [r7, #32]
}
 8001e24:	bf00      	nop
 8001e26:	e7fe      	b.n	8001e26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d103      	bne.n	8001e36 <xQueueGenericSendFromISR+0x6a>
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <xQueueGenericSendFromISR+0x6e>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <xQueueGenericSendFromISR+0x70>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	61fb      	str	r3, [r7, #28]
}
 8001e52:	bf00      	nop
 8001e54:	e7fe      	b.n	8001e54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e56:	f001 fe8b 	bl	8003b70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e5a:	f3ef 8211 	mrs	r2, BASEPRI
 8001e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e62:	f383 8811 	msr	BASEPRI, r3
 8001e66:	f3bf 8f6f 	isb	sy
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	61ba      	str	r2, [r7, #24]
 8001e70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001e72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <xQueueGenericSendFromISR+0xbc>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d12c      	bne.n	8001ee2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e98:	f000 f910 	bl	80020bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea4:	d112      	bne.n	8001ecc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	3324      	adds	r3, #36	; 0x24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 feee 	bl	8002c94 <xTaskRemoveFromEventList>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00e      	beq.n	8001edc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e007      	b.n	8001edc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	b25a      	sxtb	r2, r3
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001edc:	2301      	movs	r3, #1
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001ee0:	e001      	b.n	8001ee6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001ef0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	; 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <xQueueReceive+0x30>
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	623b      	str	r3, [r7, #32]
}
 8001f28:	bf00      	nop
 8001f2a:	e7fe      	b.n	8001f2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <xQueueReceive+0x3e>
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <xQueueReceive+0x42>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <xQueueReceive+0x44>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <xQueueReceive+0x5e>
	__asm volatile
 8001f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	61fb      	str	r3, [r7, #28]
}
 8001f56:	bf00      	nop
 8001f58:	e7fe      	b.n	8001f58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f5a:	f001 f861 	bl	8003020 <xTaskGetSchedulerState>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <xQueueReceive+0x6e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <xQueueReceive+0x72>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <xQueueReceive+0x74>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <xQueueReceive+0x8e>
	__asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	61bb      	str	r3, [r7, #24]
}
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f8a:	f001 fd2f 	bl	80039ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01f      	beq.n	8001fda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f9e:	f000 f8f7 	bl	8002190 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00f      	beq.n	8001fd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fe6c 	bl	8002c94 <xTaskRemoveFromEventList>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <xQueueReceive+0x1bc>)
 8001fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001fd2:	f001 fd3b 	bl	8003a4c <vPortExitCritical>
				return pdPASS;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e069      	b.n	80020ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fe0:	f001 fd34 	bl	8003a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e062      	b.n	80020ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 feb2 	bl	8002d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ffc:	f001 fd26 	bl	8003a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002000:	f000 fc1c 	bl	800283c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002004:	f001 fcf2 	bl	80039ec <vPortEnterCritical>
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800200e:	b25b      	sxtb	r3, r3
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d103      	bne.n	800201e <xQueueReceive+0x122>
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002024:	b25b      	sxtb	r3, r3
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202a:	d103      	bne.n	8002034 <xQueueReceive+0x138>
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002034:	f001 fd0a 	bl	8003a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002038:	1d3a      	adds	r2, r7, #4
 800203a:	f107 0310 	add.w	r3, r7, #16
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fea1 	bl	8002d88 <xTaskCheckForTimeOut>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d123      	bne.n	8002094 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800204c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800204e:	f000 f917 	bl	8002280 <prvIsQueueEmpty>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	3324      	adds	r3, #36	; 0x24
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fdc7 	bl	8002bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002068:	f000 f8b8 	bl	80021dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800206c:	f000 fbf4 	bl	8002858 <xTaskResumeAll>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d189      	bne.n	8001f8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <xQueueReceive+0x1bc>)
 8002078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	e780      	b.n	8001f8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800208a:	f000 f8a7 	bl	80021dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800208e:	f000 fbe3 	bl	8002858 <xTaskResumeAll>
 8002092:	e77a      	b.n	8001f8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002096:	f000 f8a1 	bl	80021dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800209a:	f000 fbdd 	bl	8002858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800209e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020a0:	f000 f8ee 	bl	8002280 <prvIsQueueEmpty>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f43f af6f 	beq.w	8001f8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80020ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3730      	adds	r7, #48	; 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000ed04 	.word	0xe000ed04

080020bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d14d      	bne.n	800217e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 ffb8 	bl	800305c <xTaskPriorityDisinherit>
 80020ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	e043      	b.n	800217e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d119      	bne.n	8002130 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	461a      	mov	r2, r3
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	f001 ff6e 	bl	8003fe8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	441a      	add	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d32b      	bcc.n	800217e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e026      	b.n	800217e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68d8      	ldr	r0, [r3, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	461a      	mov	r2, r3
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	f001 ff54 	bl	8003fe8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	425b      	negs	r3, r3
 800214a:	441a      	add	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	425b      	negs	r3, r3
 8002166:	441a      	add	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d105      	bne.n	800217e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3b01      	subs	r3, #1
 800217c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002186:	697b      	ldr	r3, [r7, #20]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d018      	beq.n	80021d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	441a      	add	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d303      	bcc.n	80021c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	461a      	mov	r2, r3
 80021ce:	6838      	ldr	r0, [r7, #0]
 80021d0:	f001 ff0a 	bl	8003fe8 <memcpy>
	}
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021e4:	f001 fc02 	bl	80039ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021f0:	e011      	b.n	8002216 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d012      	beq.n	8002220 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3324      	adds	r3, #36	; 0x24
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd48 	bl	8002c94 <xTaskRemoveFromEventList>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800220a:	f000 fe1f 	bl	8002e4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3b01      	subs	r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	2b00      	cmp	r3, #0
 800221c:	dce9      	bgt.n	80021f2 <prvUnlockQueue+0x16>
 800221e:	e000      	b.n	8002222 <prvUnlockQueue+0x46>
					break;
 8002220:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	22ff      	movs	r2, #255	; 0xff
 8002226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800222a:	f001 fc0f 	bl	8003a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800222e:	f001 fbdd 	bl	80039ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002238:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800223a:	e011      	b.n	8002260 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3310      	adds	r3, #16
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fd23 	bl	8002c94 <xTaskRemoveFromEventList>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002254:	f000 fdfa 	bl	8002e4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	3b01      	subs	r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002264:	2b00      	cmp	r3, #0
 8002266:	dce9      	bgt.n	800223c <prvUnlockQueue+0x60>
 8002268:	e000      	b.n	800226c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800226a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	22ff      	movs	r2, #255	; 0xff
 8002270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002274:	f001 fbea 	bl	8003a4c <vPortExitCritical>
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002288:	f001 fbb0 	bl	80039ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002294:	2301      	movs	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e001      	b.n	800229e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800229e:	f001 fbd5 	bl	8003a4c <vPortExitCritical>

	return xReturn;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80022b4:	f001 fb9a 	bl	80039ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d102      	bne.n	80022ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e001      	b.n	80022ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022ce:	f001 fbbd 	bl	8003a4c <vPortExitCritical>

	return xReturn;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e014      	b.n	8002316 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <vQueueAddToRegistry+0x4c>)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022f8:	490b      	ldr	r1, [pc, #44]	; (8002328 <vQueueAddToRegistry+0x4c>)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <vQueueAddToRegistry+0x4c>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800230e:	e006      	b.n	800231e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b07      	cmp	r3, #7
 800231a:	d9e7      	bls.n	80022ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	2000085c 	.word	0x2000085c

0800232c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800233c:	f001 fb56 	bl	80039ec <vPortEnterCritical>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002346:	b25b      	sxtb	r3, r3
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800234c:	d103      	bne.n	8002356 <vQueueWaitForMessageRestricted+0x2a>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800235c:	b25b      	sxtb	r3, r3
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002362:	d103      	bne.n	800236c <vQueueWaitForMessageRestricted+0x40>
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800236c:	f001 fb6e 	bl	8003a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3324      	adds	r3, #36	; 0x24
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fc5b 	bl	8002c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff28 	bl	80021dc <prvUnlockQueue>
	}
 800238c:	bf00      	nop
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af04      	add	r7, sp, #16
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xTaskCreateStatic+0x2a>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	623b      	str	r3, [r7, #32]
}
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <xTaskCreateStatic+0x46>
	__asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	61fb      	str	r3, [r7, #28]
}
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023da:	23bc      	movs	r3, #188	; 0xbc
 80023dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2bbc      	cmp	r3, #188	; 0xbc
 80023e2:	d00a      	beq.n	80023fa <xTaskCreateStatic+0x66>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	61bb      	str	r3, [r7, #24]
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01e      	beq.n	800243e <xTaskCreateStatic+0xaa>
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01b      	beq.n	800243e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	2202      	movs	r2, #2
 8002414:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002418:	2300      	movs	r3, #0
 800241a:	9303      	str	r3, [sp, #12]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f851 	bl	80024d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002438:	f000 f8ec 	bl	8002614 <prvAddNewTaskToReadyList>
 800243c:	e001      	b.n	8002442 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002442:	697b      	ldr	r3, [r7, #20]
	}
 8002444:	4618      	mov	r0, r3
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af04      	add	r7, sp, #16
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fbc3 	bl	8003bec <pvPortMalloc>
 8002466:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800246e:	20bc      	movs	r0, #188	; 0xbc
 8002470:	f001 fbbc 	bl	8003bec <pvPortMalloc>
 8002474:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
 8002482:	e005      	b.n	8002490 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002484:	6978      	ldr	r0, [r7, #20]
 8002486:	f001 fc75 	bl	8003d74 <vPortFree>
 800248a:	e001      	b.n	8002490 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d017      	beq.n	80024c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	2300      	movs	r3, #0
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f80f 	bl	80024d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024ba:	69f8      	ldr	r0, [r7, #28]
 80024bc:	f000 f8aa 	bl	8002614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e002      	b.n	80024cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024cc:	69bb      	ldr	r3, [r7, #24]
	}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	461a      	mov	r2, r3
 80024f0:	21a5      	movs	r1, #165	; 0xa5
 80024f2:	f001 fd87 	bl	8004004 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002500:	3b01      	subs	r3, #1
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f023 0307 	bic.w	r3, r3, #7
 800250e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <prvInitialiseNewTask+0x58>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	617b      	str	r3, [r7, #20]
}
 800252c:	bf00      	nop
 800252e:	e7fe      	b.n	800252e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	e012      	b.n	800255c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	7819      	ldrb	r1, [r3, #0]
 800253e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	3334      	adds	r3, #52	; 0x34
 8002546:	460a      	mov	r2, r1
 8002548:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	d9e9      	bls.n	8002536 <prvInitialiseNewTask+0x5e>
 8002562:	e000      	b.n	8002566 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002564:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	2b37      	cmp	r3, #55	; 0x37
 8002572:	d901      	bls.n	8002578 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002574:	2337      	movs	r3, #55	; 0x37
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002582:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	2200      	movs	r2, #0
 8002588:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	3304      	adds	r3, #4
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f98b 	bl	80018aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	3318      	adds	r3, #24
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f986 	bl	80018aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	3354      	adds	r3, #84	; 0x54
 80025c8:	2260      	movs	r2, #96	; 0x60
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 fd19 	bl	8004004 <memset>
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <prvInitialiseNewTask+0x130>)
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <prvInitialiseNewTask+0x134>)
 80025dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <prvInitialiseNewTask+0x138>)
 80025e2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	69b8      	ldr	r0, [r7, #24]
 80025ea:	f001 f90b 	bl	8003804 <pxPortInitialiseStack>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002600:	bf00      	nop
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	08004238 	.word	0x08004238
 800260c:	08004258 	.word	0x08004258
 8002610:	08004218 	.word	0x08004218

08002614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800261c:	f001 f9e6 	bl	80039ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <prvAddNewTaskToReadyList+0xc4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <prvAddNewTaskToReadyList+0xc4>)
 8002628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <prvAddNewTaskToReadyList+0xc8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002632:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <prvAddNewTaskToReadyList+0xc8>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002638:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <prvAddNewTaskToReadyList+0xc4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d110      	bne.n	8002662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002640:	f000 fc28 	bl	8002e94 <prvInitialiseTaskLists>
 8002644:	e00d      	b.n	8002662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <prvAddNewTaskToReadyList+0xcc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <prvAddNewTaskToReadyList+0xc8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	429a      	cmp	r2, r3
 800265a:	d802      	bhi.n	8002662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <prvAddNewTaskToReadyList+0xc8>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <prvAddNewTaskToReadyList+0xd0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <prvAddNewTaskToReadyList+0xd0>)
 800266a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <prvAddNewTaskToReadyList+0xd0>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <prvAddNewTaskToReadyList+0xd4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d903      	bls.n	8002688 <prvAddNewTaskToReadyList+0x74>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <prvAddNewTaskToReadyList+0xd4>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <prvAddNewTaskToReadyList+0xd8>)
 8002696:	441a      	add	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7ff f90f 	bl	80018c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026a4:	f001 f9d2 	bl	8003a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <prvAddNewTaskToReadyList+0xcc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00e      	beq.n	80026ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <prvAddNewTaskToReadyList+0xc8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d207      	bcs.n	80026ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <prvAddNewTaskToReadyList+0xdc>)
 80026c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000d70 	.word	0x20000d70
 80026dc:	2000089c 	.word	0x2000089c
 80026e0:	20000d7c 	.word	0x20000d7c
 80026e4:	20000d8c 	.word	0x20000d8c
 80026e8:	20000d78 	.word	0x20000d78
 80026ec:	200008a0 	.word	0x200008a0
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d017      	beq.n	8002736 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <vTaskDelay+0x60>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <vTaskDelay+0x30>
	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	60bb      	str	r3, [r7, #8]
}
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002724:	f000 f88a 	bl	800283c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002728:	2100      	movs	r1, #0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fd04 	bl	8003138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002730:	f000 f892 	bl	8002858 <xTaskResumeAll>
 8002734:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <vTaskDelay+0x64>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000d98 	.word	0x20000d98
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800276a:	463a      	mov	r2, r7
 800276c:	1d39      	adds	r1, r7, #4
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f848 	bl	8001808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	9202      	str	r2, [sp, #8]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	460a      	mov	r2, r1
 800278a:	4924      	ldr	r1, [pc, #144]	; (800281c <vTaskStartScheduler+0xc0>)
 800278c:	4824      	ldr	r0, [pc, #144]	; (8002820 <vTaskStartScheduler+0xc4>)
 800278e:	f7ff fe01 	bl	8002394 <xTaskCreateStatic>
 8002792:	4603      	mov	r3, r0
 8002794:	4a23      	ldr	r2, [pc, #140]	; (8002824 <vTaskStartScheduler+0xc8>)
 8002796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <vTaskStartScheduler+0xc8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e001      	b.n	80027aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80027b0:	f000 fd16 	bl	80031e0 <xTimerCreateTimerTask>
 80027b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d11b      	bne.n	80027f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	613b      	str	r3, [r7, #16]
}
 80027ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <vTaskStartScheduler+0xcc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3354      	adds	r3, #84	; 0x54
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <vTaskStartScheduler+0xd0>)
 80027d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <vTaskStartScheduler+0xd4>)
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <vTaskStartScheduler+0xd8>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <vTaskStartScheduler+0xdc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027ee:	f001 f88b 	bl	8003908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027f2:	e00e      	b.n	8002812 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fa:	d10a      	bne.n	8002812 <vTaskStartScheduler+0xb6>
	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	60fb      	str	r3, [r7, #12]
}
 800280e:	bf00      	nop
 8002810:	e7fe      	b.n	8002810 <vTaskStartScheduler+0xb4>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	080041c4 	.word	0x080041c4
 8002820:	08002e65 	.word	0x08002e65
 8002824:	20000d94 	.word	0x20000d94
 8002828:	2000089c 	.word	0x2000089c
 800282c:	20000010 	.word	0x20000010
 8002830:	20000d90 	.word	0x20000d90
 8002834:	20000d7c 	.word	0x20000d7c
 8002838:	20000d74 	.word	0x20000d74

0800283c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <vTaskSuspendAll+0x18>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a03      	ldr	r2, [pc, #12]	; (8002854 <vTaskSuspendAll+0x18>)
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000d98 	.word	0x20000d98

08002858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002866:	4b42      	ldr	r3, [pc, #264]	; (8002970 <xTaskResumeAll+0x118>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <xTaskResumeAll+0x2c>
	__asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	603b      	str	r3, [r7, #0]
}
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002884:	f001 f8b2 	bl	80039ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <xTaskResumeAll+0x118>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	4a38      	ldr	r2, [pc, #224]	; (8002970 <xTaskResumeAll+0x118>)
 8002890:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <xTaskResumeAll+0x118>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d162      	bne.n	8002960 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <xTaskResumeAll+0x11c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d05e      	beq.n	8002960 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028a2:	e02f      	b.n	8002904 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <xTaskResumeAll+0x120>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3318      	adds	r3, #24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f861 	bl	8001978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f85c 	bl	8001978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <xTaskResumeAll+0x124>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d903      	bls.n	80028d4 <xTaskResumeAll+0x7c>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4a2a      	ldr	r2, [pc, #168]	; (800297c <xTaskResumeAll+0x124>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <xTaskResumeAll+0x128>)
 80028e2:	441a      	add	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3304      	adds	r3, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7fe ffe9 	bl	80018c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <xTaskResumeAll+0x12c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <xTaskResumeAll+0x130>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <xTaskResumeAll+0x120>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1cb      	bne.n	80028a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002912:	f000 fb61 	bl	8002fd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <xTaskResumeAll+0x134>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002922:	f000 f845 	bl	80029b0 <xTaskIncrementTick>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <xTaskResumeAll+0x130>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3b01      	subs	r3, #1
 8002936:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f1      	bne.n	8002922 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <xTaskResumeAll+0x134>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <xTaskResumeAll+0x130>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800294c:	2301      	movs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <xTaskResumeAll+0x138>)
 8002952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002960:	f001 f874 	bl	8003a4c <vPortExitCritical>

	return xAlreadyYielded;
 8002964:	68bb      	ldr	r3, [r7, #8]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000d98 	.word	0x20000d98
 8002974:	20000d70 	.word	0x20000d70
 8002978:	20000d30 	.word	0x20000d30
 800297c:	20000d78 	.word	0x20000d78
 8002980:	200008a0 	.word	0x200008a0
 8002984:	2000089c 	.word	0x2000089c
 8002988:	20000d84 	.word	0x20000d84
 800298c:	20000d80 	.word	0x20000d80
 8002990:	e000ed04 	.word	0xe000ed04

08002994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <xTaskGetTickCount+0x18>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000d74 	.word	0x20000d74

080029b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029ba:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <xTaskIncrementTick+0x150>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 808e 	bne.w	8002ae0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <xTaskIncrementTick+0x154>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029cc:	4a4d      	ldr	r2, [pc, #308]	; (8002b04 <xTaskIncrementTick+0x154>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d120      	bne.n	8002a1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80029d8:	4b4b      	ldr	r3, [pc, #300]	; (8002b08 <xTaskIncrementTick+0x158>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	603b      	str	r3, [r7, #0]
}
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <xTaskIncrementTick+0x46>
 80029f8:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <xTaskIncrementTick+0x158>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <xTaskIncrementTick+0x15c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <xTaskIncrementTick+0x158>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <xTaskIncrementTick+0x15c>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <xTaskIncrementTick+0x160>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a3f      	ldr	r2, [pc, #252]	; (8002b10 <xTaskIncrementTick+0x160>)
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	f000 fadf 	bl	8002fd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a1a:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <xTaskIncrementTick+0x164>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d34e      	bcc.n	8002ac2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <xTaskIncrementTick+0x158>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <xTaskIncrementTick+0x82>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <xTaskIncrementTick+0x84>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <xTaskIncrementTick+0x164>)
 8002a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a3e:	601a      	str	r2, [r3, #0]
					break;
 8002a40:	e03f      	b.n	8002ac2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <xTaskIncrementTick+0x158>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d203      	bcs.n	8002a62 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <xTaskIncrementTick+0x164>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6013      	str	r3, [r2, #0]
						break;
 8002a60:	e02f      	b.n	8002ac2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe ff86 	bl	8001978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3318      	adds	r3, #24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe ff7d 	bl	8001978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <xTaskIncrementTick+0x168>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d903      	bls.n	8002a92 <xTaskIncrementTick+0xe2>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <xTaskIncrementTick+0x168>)
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <xTaskIncrementTick+0x16c>)
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe ff0a 	bl	80018c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <xTaskIncrementTick+0x170>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d3b3      	bcc.n	8002a24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002abc:	2301      	movs	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac0:	e7b0      	b.n	8002a24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <xTaskIncrementTick+0x170>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	4914      	ldr	r1, [pc, #80]	; (8002b1c <xTaskIncrementTick+0x16c>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d907      	bls.n	8002aea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e004      	b.n	8002aea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <xTaskIncrementTick+0x174>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <xTaskIncrementTick+0x174>)
 8002ae8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <xTaskIncrementTick+0x178>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002af6:	697b      	ldr	r3, [r7, #20]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000d98 	.word	0x20000d98
 8002b04:	20000d74 	.word	0x20000d74
 8002b08:	20000d28 	.word	0x20000d28
 8002b0c:	20000d2c 	.word	0x20000d2c
 8002b10:	20000d88 	.word	0x20000d88
 8002b14:	20000d90 	.word	0x20000d90
 8002b18:	20000d78 	.word	0x20000d78
 8002b1c:	200008a0 	.word	0x200008a0
 8002b20:	2000089c 	.word	0x2000089c
 8002b24:	20000d80 	.word	0x20000d80
 8002b28:	20000d84 	.word	0x20000d84

08002b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <vTaskSwitchContext+0xb0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b3a:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <vTaskSwitchContext+0xb4>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b40:	e046      	b.n	8002bd0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8002b42:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <vTaskSwitchContext+0xb4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <vTaskSwitchContext+0xb8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e010      	b.n	8002b72 <vTaskSwitchContext+0x46>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <vTaskSwitchContext+0x40>
	__asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	607b      	str	r3, [r7, #4]
}
 8002b68:	bf00      	nop
 8002b6a:	e7fe      	b.n	8002b6a <vTaskSwitchContext+0x3e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	491d      	ldr	r1, [pc, #116]	; (8002be8 <vTaskSwitchContext+0xbc>)
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0e4      	beq.n	8002b50 <vTaskSwitchContext+0x24>
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <vTaskSwitchContext+0xbc>)
 8002b92:	4413      	add	r3, r2
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d104      	bne.n	8002bb6 <vTaskSwitchContext+0x8a>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <vTaskSwitchContext+0xc0>)
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <vTaskSwitchContext+0xb8>)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <vTaskSwitchContext+0xc0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3354      	adds	r3, #84	; 0x54
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <vTaskSwitchContext+0xc4>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000d98 	.word	0x20000d98
 8002be0:	20000d84 	.word	0x20000d84
 8002be4:	20000d78 	.word	0x20000d78
 8002be8:	200008a0 	.word	0x200008a0
 8002bec:	2000089c 	.word	0x2000089c
 8002bf0:	20000010 	.word	0x20000010

08002bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <vTaskPlaceOnEventList+0x44>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3318      	adds	r3, #24
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fe70 	bl	8001908 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c28:	2101      	movs	r1, #1
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	f000 fa84 	bl	8003138 <prvAddCurrentTaskToDelayedList>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	2000089c 	.word	0x2000089c

08002c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	617b      	str	r3, [r7, #20]
}
 8002c60:	bf00      	nop
 8002c62:	e7fe      	b.n	8002c62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <vTaskPlaceOnEventListRestricted+0x54>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3318      	adds	r3, #24
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7fe fe28 	bl	80018c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	68b8      	ldr	r0, [r7, #8]
 8002c82:	f000 fa59 	bl	8003138 <prvAddCurrentTaskToDelayedList>
	}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000089c 	.word	0x2000089c

08002c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60fb      	str	r3, [r7, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fe57 	bl	8001978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <xTaskRemoveFromEventList+0xb0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11d      	bne.n	8002d0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fe4e 	bl	8001978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <xTaskRemoveFromEventList+0xb4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d903      	bls.n	8002cf0 <xTaskRemoveFromEventList+0x5c>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <xTaskRemoveFromEventList+0xb4>)
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <xTaskRemoveFromEventList+0xb8>)
 8002cfe:	441a      	add	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7fe fddb 	bl	80018c2 <vListInsertEnd>
 8002d0c:	e005      	b.n	8002d1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3318      	adds	r3, #24
 8002d12:	4619      	mov	r1, r3
 8002d14:	480e      	ldr	r0, [pc, #56]	; (8002d50 <xTaskRemoveFromEventList+0xbc>)
 8002d16:	f7fe fdd4 	bl	80018c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <xTaskRemoveFromEventList+0xc0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d905      	bls.n	8002d34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <xTaskRemoveFromEventList+0xc4>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e001      	b.n	8002d38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002d38:	697b      	ldr	r3, [r7, #20]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000d98 	.word	0x20000d98
 8002d48:	20000d78 	.word	0x20000d78
 8002d4c:	200008a0 	.word	0x200008a0
 8002d50:	20000d30 	.word	0x20000d30
 8002d54:	2000089c 	.word	0x2000089c
 8002d58:	20000d84 	.word	0x20000d84

08002d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <vTaskInternalSetTimeOutState+0x24>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <vTaskInternalSetTimeOutState+0x28>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000d88 	.word	0x20000d88
 8002d84:	20000d74 	.word	0x20000d74

08002d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	613b      	str	r3, [r7, #16]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	60fb      	str	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002dca:	f000 fe0f 	bl	80039ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <xTaskCheckForTimeOut+0xbc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de6:	d102      	bne.n	8002dee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e023      	b.n	8002e36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <xTaskCheckForTimeOut+0xc0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d007      	beq.n	8002e0a <xTaskCheckForTimeOut+0x82>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	e015      	b.n	8002e36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d20b      	bcs.n	8002e2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff9b 	bl	8002d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e004      	b.n	8002e36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e36:	f000 fe09 	bl	8003a4c <vPortExitCritical>

	return xReturn;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000d74 	.word	0x20000d74
 8002e48:	20000d88 	.word	0x20000d88

08002e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <vTaskMissedYield+0x14>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000d84 	.word	0x20000d84

08002e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e6c:	f000 f852 	bl	8002f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <prvIdleTask+0x28>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d9f9      	bls.n	8002e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <prvIdleTask+0x2c>)
 8002e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e88:	e7f0      	b.n	8002e6c <prvIdleTask+0x8>
 8002e8a:	bf00      	nop
 8002e8c:	200008a0 	.word	0x200008a0
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	e00c      	b.n	8002eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <prvInitialiseTaskLists+0x60>)
 8002eac:	4413      	add	r3, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fcdc 	bl	800186c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b37      	cmp	r3, #55	; 0x37
 8002ebe:	d9ef      	bls.n	8002ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <prvInitialiseTaskLists+0x64>)
 8002ec2:	f7fe fcd3 	bl	800186c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ec6:	480d      	ldr	r0, [pc, #52]	; (8002efc <prvInitialiseTaskLists+0x68>)
 8002ec8:	f7fe fcd0 	bl	800186c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <prvInitialiseTaskLists+0x6c>)
 8002ece:	f7fe fccd 	bl	800186c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ed2:	480c      	ldr	r0, [pc, #48]	; (8002f04 <prvInitialiseTaskLists+0x70>)
 8002ed4:	f7fe fcca 	bl	800186c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <prvInitialiseTaskLists+0x74>)
 8002eda:	f7fe fcc7 	bl	800186c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <prvInitialiseTaskLists+0x78>)
 8002ee0:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <prvInitialiseTaskLists+0x64>)
 8002ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <prvInitialiseTaskLists+0x7c>)
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <prvInitialiseTaskLists+0x68>)
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200008a0 	.word	0x200008a0
 8002ef8:	20000d00 	.word	0x20000d00
 8002efc:	20000d14 	.word	0x20000d14
 8002f00:	20000d30 	.word	0x20000d30
 8002f04:	20000d44 	.word	0x20000d44
 8002f08:	20000d5c 	.word	0x20000d5c
 8002f0c:	20000d28 	.word	0x20000d28
 8002f10:	20000d2c 	.word	0x20000d2c

08002f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f1a:	e019      	b.n	8002f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f1c:	f000 fd66 	bl	80039ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <prvCheckTasksWaitingTermination+0x50>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fd23 	bl	8001978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <prvCheckTasksWaitingTermination+0x54>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <prvCheckTasksWaitingTermination+0x54>)
 8002f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <prvCheckTasksWaitingTermination+0x58>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <prvCheckTasksWaitingTermination+0x58>)
 8002f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f46:	f000 fd81 	bl	8003a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f810 	bl	8002f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <prvCheckTasksWaitingTermination+0x58>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e1      	bne.n	8002f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000d44 	.word	0x20000d44
 8002f68:	20000d70 	.word	0x20000d70
 8002f6c:	20000d58 	.word	0x20000d58

08002f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3354      	adds	r3, #84	; 0x54
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 f857 	bl	8004030 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 feef 	bl	8003d74 <vPortFree>
				vPortFree( pxTCB );
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 feec 	bl	8003d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f9c:	e018      	b.n	8002fd0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d103      	bne.n	8002fb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fee3 	bl	8003d74 <vPortFree>
	}
 8002fae:	e00f      	b.n	8002fd0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d00a      	beq.n	8002fd0 <prvDeleteTCB+0x60>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60fb      	str	r3, [r7, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <prvDeleteTCB+0x5e>
	}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <prvResetNextTaskUnblockTime+0x40>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <prvResetNextTaskUnblockTime+0x14>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <prvResetNextTaskUnblockTime+0x16>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <prvResetNextTaskUnblockTime+0x44>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ffa:	e008      	b.n	800300e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <prvResetNextTaskUnblockTime+0x40>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <prvResetNextTaskUnblockTime+0x44>)
 800300c:	6013      	str	r3, [r2, #0]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20000d28 	.word	0x20000d28
 800301c:	20000d90 	.word	0x20000d90

08003020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <xTaskGetSchedulerState+0x34>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800302e:	2301      	movs	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e008      	b.n	8003046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <xTaskGetSchedulerState+0x38>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800303c:	2302      	movs	r3, #2
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	e001      	b.n	8003046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003046:	687b      	ldr	r3, [r7, #4]
	}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000d7c 	.word	0x20000d7c
 8003058:	20000d98 	.word	0x20000d98

0800305c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d056      	beq.n	8003120 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <xTaskPriorityDisinherit+0xd0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d00a      	beq.n	8003092 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	60fb      	str	r3, [r7, #12]
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	60bb      	str	r3, [r7, #8]
}
 80030ac:	bf00      	nop
 80030ae:	e7fe      	b.n	80030ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d02c      	beq.n	8003120 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d128      	bne.n	8003120 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fc50 	bl	8001978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <xTaskPriorityDisinherit+0xd4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d903      	bls.n	8003100 <xTaskPriorityDisinherit+0xa4>
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <xTaskPriorityDisinherit+0xd4>)
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a09      	ldr	r2, [pc, #36]	; (8003134 <xTaskPriorityDisinherit+0xd8>)
 800310e:	441a      	add	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7fe fbd3 	bl	80018c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800311c:	2301      	movs	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003120:	697b      	ldr	r3, [r7, #20]
	}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	2000089c 	.word	0x2000089c
 8003130:	20000d78 	.word	0x20000d78
 8003134:	200008a0 	.word	0x200008a0

08003138 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <prvAddCurrentTaskToDelayedList+0x94>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3304      	adds	r3, #4
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fc12 	bl	8001978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315a:	d10a      	bne.n	8003172 <prvAddCurrentTaskToDelayedList+0x3a>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <prvAddCurrentTaskToDelayedList+0x94>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3304      	adds	r3, #4
 8003168:	4619      	mov	r1, r3
 800316a:	4819      	ldr	r0, [pc, #100]	; (80031d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800316c:	f7fe fba9 	bl	80018c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003170:	e026      	b.n	80031c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <prvAddCurrentTaskToDelayedList+0x94>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	429a      	cmp	r2, r3
 8003188:	d209      	bcs.n	800319e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <prvAddCurrentTaskToDelayedList+0x94>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7fe fbb6 	bl	8001908 <vListInsert>
}
 800319c:	e010      	b.n	80031c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <prvAddCurrentTaskToDelayedList+0x94>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fe fbac 	bl	8001908 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d202      	bcs.n	80031c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80031ba:	4a08      	ldr	r2, [pc, #32]	; (80031dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000d74 	.word	0x20000d74
 80031cc:	2000089c 	.word	0x2000089c
 80031d0:	20000d5c 	.word	0x20000d5c
 80031d4:	20000d2c 	.word	0x20000d2c
 80031d8:	20000d28 	.word	0x20000d28
 80031dc:	20000d90 	.word	0x20000d90

080031e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80031ea:	f000 facb 	bl	8003784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80031ee:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <xTimerCreateTimerTask+0x80>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d021      	beq.n	800323a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80031fe:	1d3a      	adds	r2, r7, #4
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fb15 	bl	8001838 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	9202      	str	r2, [sp, #8]
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	2302      	movs	r3, #2
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	460a      	mov	r2, r1
 8003220:	4910      	ldr	r1, [pc, #64]	; (8003264 <xTimerCreateTimerTask+0x84>)
 8003222:	4811      	ldr	r0, [pc, #68]	; (8003268 <xTimerCreateTimerTask+0x88>)
 8003224:	f7ff f8b6 	bl	8002394 <xTaskCreateStatic>
 8003228:	4603      	mov	r3, r0
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <xTimerCreateTimerTask+0x8c>)
 800322c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <xTimerCreateTimerTask+0x8c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003236:	2301      	movs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	613b      	str	r3, [r7, #16]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003256:	697b      	ldr	r3, [r7, #20]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000dcc 	.word	0x20000dcc
 8003264:	080041cc 	.word	0x080041cc
 8003268:	0800338d 	.word	0x0800338d
 800326c:	20000dd0 	.word	0x20000dd0

08003270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <xTimerGenericCommand+0x98>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02a      	beq.n	80032fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	dc18      	bgt.n	80032ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80032b8:	f7ff feb2 	bl	8003020 <xTaskGetSchedulerState>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d109      	bne.n	80032d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <xTimerGenericCommand+0x98>)
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	f107 0110 	add.w	r1, r7, #16
 80032ca:	2300      	movs	r3, #0
 80032cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ce:	f7fe fc7f 	bl	8001bd0 <xQueueGenericSend>
 80032d2:	6278      	str	r0, [r7, #36]	; 0x24
 80032d4:	e012      	b.n	80032fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <xTimerGenericCommand+0x98>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	f107 0110 	add.w	r1, r7, #16
 80032de:	2300      	movs	r3, #0
 80032e0:	2200      	movs	r2, #0
 80032e2:	f7fe fc75 	bl	8001bd0 <xQueueGenericSend>
 80032e6:	6278      	str	r0, [r7, #36]	; 0x24
 80032e8:	e008      	b.n	80032fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <xTimerGenericCommand+0x98>)
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f107 0110 	add.w	r1, r7, #16
 80032f2:	2300      	movs	r3, #0
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	f7fe fd69 	bl	8001dcc <xQueueGenericSendFromISR>
 80032fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3728      	adds	r7, #40	; 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000dcc 	.word	0x20000dcc

0800330c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <prvProcessExpiredTimer+0x7c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3304      	adds	r3, #4
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fb27 	bl	8001978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d122      	bne.n	8003378 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	18d1      	adds	r1, r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f000 f8c8 	bl	80034d4 <prvInsertTimerInActiveList>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2300      	movs	r3, #0
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	2100      	movs	r1, #0
 8003354:	6978      	ldr	r0, [r7, #20]
 8003356:	f7ff ff8b 	bl	8003270 <xTimerGenericCommand>
 800335a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	60fb      	str	r3, [r7, #12]
}
 8003374:	bf00      	nop
 8003376:	e7fe      	b.n	8003376 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	6978      	ldr	r0, [r7, #20]
 800337e:	4798      	blx	r3
}
 8003380:	bf00      	nop
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000dc4 	.word	0x20000dc4

0800338c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003394:	f107 0308 	add.w	r3, r7, #8
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f857 	bl	800344c <prvGetNextExpireTime>
 800339e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4619      	mov	r1, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f803 	bl	80033b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80033aa:	f000 f8d5 	bl	8003558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033ae:	e7f1      	b.n	8003394 <prvTimerTask+0x8>

080033b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80033ba:	f7ff fa3f 	bl	800283c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033be:	f107 0308 	add.w	r3, r7, #8
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f866 	bl	8003494 <prvSampleTimeNow>
 80033c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d130      	bne.n	8003432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <prvProcessTimerOrBlockTask+0x3c>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d806      	bhi.n	80033ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80033de:	f7ff fa3b 	bl	8002858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff91 	bl	800330c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80033ea:	e024      	b.n	8003436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <prvProcessTimerOrBlockTask+0x90>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <prvProcessTimerOrBlockTask+0x94>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	f7fe ff8b 	bl	800232c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003416:	f7ff fa1f 	bl	8002858 <xTaskResumeAll>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <prvProcessTimerOrBlockTask+0x98>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
}
 8003430:	e001      	b.n	8003436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003432:	f7ff fa11 	bl	8002858 <xTaskResumeAll>
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000dc8 	.word	0x20000dc8
 8003444:	20000dcc 	.word	0x20000dcc
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <prvGetNextExpireTime+0x44>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <prvGetNextExpireTime+0x44>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e001      	b.n	8003482 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000dc4 	.word	0x20000dc4

08003494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800349c:	f7ff fa7a 	bl	8002994 <xTaskGetTickCount>
 80034a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <prvSampleTimeNow+0x3c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d205      	bcs.n	80034b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80034ac:	f000 f908 	bl	80036c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e002      	b.n	80034be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80034be:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <prvSampleTimeNow+0x3c>)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80034c4:	68fb      	ldr	r3, [r7, #12]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000dd4 	.word	0x20000dd4

080034d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d812      	bhi.n	8003520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e01b      	b.n	8003546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <prvInsertTimerInActiveList+0x7c>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3304      	adds	r3, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f7fe f9f5 	bl	8001908 <vListInsert>
 800351e:	e012      	b.n	8003546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d206      	bcs.n	8003536 <prvInsertTimerInActiveList+0x62>
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003530:	2301      	movs	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e007      	b.n	8003546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003536:	4b07      	ldr	r3, [pc, #28]	; (8003554 <prvInsertTimerInActiveList+0x80>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3304      	adds	r3, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7fe f9e1 	bl	8001908 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003546:	697b      	ldr	r3, [r7, #20]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000dc8 	.word	0x20000dc8
 8003554:	20000dc4 	.word	0x20000dc4

08003558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	; 0x38
 800355c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800355e:	e09d      	b.n	800369c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	da18      	bge.n	8003598 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	3304      	adds	r3, #4
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	61fb      	str	r3, [r7, #28]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358e:	6850      	ldr	r0, [r2, #4]
 8003590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	4611      	mov	r1, r2
 8003596:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db7d      	blt.n	800369a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	3304      	adds	r3, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f9e2 	bl	8001978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035b4:	463b      	mov	r3, r7
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff6c 	bl	8003494 <prvSampleTimeNow>
 80035bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b09      	cmp	r3, #9
 80035c2:	d86b      	bhi.n	800369c <prvProcessReceivedCommands+0x144>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <prvProcessReceivedCommands+0x74>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035f5 	.word	0x080035f5
 80035d8:	0800369d 	.word	0x0800369d
 80035dc:	08003651 	.word	0x08003651
 80035e0:	08003689 	.word	0x08003689
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	080035f5 	.word	0x080035f5
 80035ec:	0800369d 	.word	0x0800369d
 80035f0:	08003651 	.word	0x08003651
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	18d1      	adds	r1, r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003602:	f7ff ff67 	bl	80034d4 <prvInsertTimerInActiveList>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d047      	beq.n	800369c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003612:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d13f      	bne.n	800369c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	441a      	add	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	2100      	movs	r1, #0
 800362c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362e:	f7ff fe1f 	bl	8003270 <xTimerGenericCommand>
 8003632:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d130      	bne.n	800369c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	61bb      	str	r3, [r7, #24]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	617b      	str	r3, [r7, #20]
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	18d1      	adds	r1, r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003682:	f7ff ff27 	bl	80034d4 <prvInsertTimerInActiveList>
					break;
 8003686:	e009      	b.n	800369c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003694:	f000 fb6e 	bl	8003d74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003698:	e000      	b.n	800369c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800369a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <prvProcessReceivedCommands+0x164>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	1d39      	adds	r1, r7, #4
 80036a2:	2200      	movs	r2, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fc29 	bl	8001efc <xQueueReceive>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f47f af57 	bne.w	8003560 <prvProcessReceivedCommands+0x8>
	}
}
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
 80036b6:	3730      	adds	r7, #48	; 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000dcc 	.word	0x20000dcc

080036c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036c6:	e045      	b.n	8003754 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <prvSwitchTimerLists+0xbc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <prvSwitchTimerLists+0xbc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3304      	adds	r3, #4
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe f949 	bl	8001978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d12e      	bne.n	8003754 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d90e      	bls.n	8003726 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <prvSwitchTimerLists+0xbc>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fe f8f2 	bl	8001908 <vListInsert>
 8003724:	e016      	b.n	8003754 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	2100      	movs	r1, #0
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fd9d 	bl	8003270 <xTimerGenericCommand>
 8003736:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <prvSwitchTimerLists+0x94>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	603b      	str	r3, [r7, #0]
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <prvSwitchTimerLists+0xbc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1b4      	bne.n	80036c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <prvSwitchTimerLists+0xbc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <prvSwitchTimerLists+0xc0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <prvSwitchTimerLists+0xbc>)
 800376a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <prvSwitchTimerLists+0xc0>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6013      	str	r3, [r2, #0]
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000dc4 	.word	0x20000dc4
 8003780:	20000dc8 	.word	0x20000dc8

08003784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800378a:	f000 f92f 	bl	80039ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <prvCheckForValidListAndQueue+0x60>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d120      	bne.n	80037d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003796:	4814      	ldr	r0, [pc, #80]	; (80037e8 <prvCheckForValidListAndQueue+0x64>)
 8003798:	f7fe f868 	bl	800186c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800379c:	4813      	ldr	r0, [pc, #76]	; (80037ec <prvCheckForValidListAndQueue+0x68>)
 800379e:	f7fe f865 	bl	800186c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <prvCheckForValidListAndQueue+0x6c>)
 80037a4:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <prvCheckForValidListAndQueue+0x64>)
 80037a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <prvCheckForValidListAndQueue+0x70>)
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <prvCheckForValidListAndQueue+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80037ae:	2300      	movs	r3, #0
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <prvCheckForValidListAndQueue+0x74>)
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <prvCheckForValidListAndQueue+0x78>)
 80037b6:	2110      	movs	r1, #16
 80037b8:	200a      	movs	r0, #10
 80037ba:	f7fe f96f 	bl	8001a9c <xQueueGenericCreateStatic>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <prvCheckForValidListAndQueue+0x60>)
 80037c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <prvCheckForValidListAndQueue+0x60>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <prvCheckForValidListAndQueue+0x60>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	490b      	ldr	r1, [pc, #44]	; (8003800 <prvCheckForValidListAndQueue+0x7c>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fd82 	bl	80022dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037d8:	f000 f938 	bl	8003a4c <vPortExitCritical>
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000dcc 	.word	0x20000dcc
 80037e8:	20000d9c 	.word	0x20000d9c
 80037ec:	20000db0 	.word	0x20000db0
 80037f0:	20000dc4 	.word	0x20000dc4
 80037f4:	20000dc8 	.word	0x20000dc8
 80037f8:	20000e78 	.word	0x20000e78
 80037fc:	20000dd8 	.word	0x20000dd8
 8003800:	080041d4 	.word	0x080041d4

08003804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3b04      	subs	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3b04      	subs	r3, #4
 8003822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f023 0201 	bic.w	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b04      	subs	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003834:	4a08      	ldr	r2, [pc, #32]	; (8003858 <pxPortInitialiseStack+0x54>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3b14      	subs	r3, #20
 800383e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3b20      	subs	r3, #32
 800384a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	0800385d 	.word	0x0800385d

0800385c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <prvTaskExitError+0x54>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386e:	d00a      	beq.n	8003886 <prvTaskExitError+0x2a>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	60fb      	str	r3, [r7, #12]
}
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <prvTaskExitError+0x28>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60bb      	str	r3, [r7, #8]
}
 8003898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800389a:	bf00      	nop
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0fc      	beq.n	800389c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c
	...

080038c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <pxCurrentTCBConst2>)
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	6808      	ldr	r0, [r1, #0]
 80038c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038ca:	f380 8809 	msr	PSP, r0
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f380 8811 	msr	BASEPRI, r0
 80038da:	f04e 0e0d 	orr.w	lr, lr, #13
 80038de:	4770      	bx	lr

080038e0 <pxCurrentTCBConst2>:
 80038e0:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop

080038e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80038e8:	4806      	ldr	r0, [pc, #24]	; (8003904 <prvPortStartFirstTask+0x1c>)
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	6800      	ldr	r0, [r0, #0]
 80038ee:	f380 8808 	msr	MSP, r0
 80038f2:	b662      	cpsie	i
 80038f4:	b661      	cpsie	f
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	df00      	svc	0
 8003900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003902:	bf00      	nop
 8003904:	e000ed08 	.word	0xe000ed08

08003908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <xPortStartScheduler+0xd0>)
 8003910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <xPortStartScheduler+0xd4>)
 8003934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800393c:	e009      	b.n	8003952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3b01      	subs	r3, #1
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d0ef      	beq.n	800393e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00a      	beq.n	8003980 <xPortStartScheduler+0x78>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60bb      	str	r3, [r7, #8]
}
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <xPortStartScheduler+0xd8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003992:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039b6:	f000 f8b9 	bl	8003b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <xPortStartScheduler+0xe0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039c0:	f7ff ff92 	bl	80038e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039c4:	f7ff f8b2 	bl	8002b2c <vTaskSwitchContext>
	prvTaskExitError();
 80039c8:	f7ff ff48 	bl	800385c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e400 	.word	0xe000e400
 80039dc:	20000ec8 	.word	0x20000ec8
 80039e0:	20000ecc 	.word	0x20000ecc
 80039e4:	e000ed20 	.word	0xe000ed20
 80039e8:	2000000c 	.word	0x2000000c

080039ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
}
 8003a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10f      	bne.n	8003a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <vPortEnterCritical+0x5c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	603b      	str	r3, [r7, #0]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <vPortEnterCritical+0x4a>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <vPortExitCritical+0x24>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	607b      	str	r3, [r7, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <vPortExitCritical+0x42>
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f383 8811 	msr	BASEPRI, r3
}
 8003a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003aa0:	f3ef 8009 	mrs	r0, PSP
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <pxCurrentTCBConst>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ab0:	6010      	str	r0, [r2, #0]
 8003ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003aba:	f380 8811 	msr	BASEPRI, r0
 8003abe:	f7ff f835 	bl	8002b2c <vTaskSwitchContext>
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	6808      	ldr	r0, [r1, #0]
 8003ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ad6:	f380 8809 	msr	PSP, r0
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	4770      	bx	lr

08003ae0 <pxCurrentTCBConst>:
 8003ae0:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b02:	f7fe ff55 	bl	80029b0 <xTaskIncrementTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <SysTick_Handler+0x40>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f383 8811 	msr	BASEPRI, r3
}
 8003b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <vPortSetupTimerInterrupt+0x30>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <vPortSetupTimerInterrupt+0x34>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <vPortSetupTimerInterrupt+0x38>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <vPortSetupTimerInterrupt+0x3c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <vPortSetupTimerInterrupt+0x40>)
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b4e:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <vPortSetupTimerInterrupt+0x30>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e010 	.word	0xe000e010
 8003b60:	e000e018 	.word	0xe000e018
 8003b64:	20000000 	.word	0x20000000
 8003b68:	10624dd3 	.word	0x10624dd3
 8003b6c:	e000e014 	.word	0xe000e014

08003b70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b76:	f3ef 8305 	mrs	r3, IPSR
 8003b7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	d914      	bls.n	8003bac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <vPortValidateInterruptPriority+0x6c>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <vPortValidateInterruptPriority+0x70>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	7afa      	ldrb	r2, [r7, #11]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d20a      	bcs.n	8003bac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	607b      	str	r3, [r7, #4]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bac:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <vPortValidateInterruptPriority+0x74>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <vPortValidateInterruptPriority+0x78>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d90a      	bls.n	8003bd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	603b      	str	r3, [r7, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <vPortValidateInterruptPriority+0x60>
	}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	e000e3f0 	.word	0xe000e3f0
 8003be0:	20000ec8 	.word	0x20000ec8
 8003be4:	e000ed0c 	.word	0xe000ed0c
 8003be8:	20000ecc 	.word	0x20000ecc

08003bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bf8:	f7fe fe20 	bl	800283c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <pvPortMalloc+0x174>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c04:	f000 f910 	bl	8003e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c08:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <pvPortMalloc+0x178>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 808e 	bne.w	8003d32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01d      	beq.n	8003c58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d014      	beq.n	8003c58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f023 0307 	bic.w	r3, r3, #7
 8003c34:	3308      	adds	r3, #8
 8003c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <pvPortMalloc+0x6c>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	617b      	str	r3, [r7, #20]
}
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d069      	beq.n	8003d32 <pvPortMalloc+0x146>
 8003c5e:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <pvPortMalloc+0x17c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d864      	bhi.n	8003d32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <pvPortMalloc+0x180>)
 8003c6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c6c:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <pvPortMalloc+0x180>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c72:	e004      	b.n	8003c7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d903      	bls.n	8003c90 <pvPortMalloc+0xa4>
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f1      	bne.n	8003c74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c90:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <pvPortMalloc+0x174>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d04b      	beq.n	8003d32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	4413      	add	r3, r2
 8003ca2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d91f      	bls.n	8003cfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <pvPortMalloc+0xf8>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	613b      	str	r3, [r7, #16]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cf6:	69b8      	ldr	r0, [r7, #24]
 8003cf8:	f000 f8f8 	bl	8003eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <pvPortMalloc+0x17c>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <pvPortMalloc+0x17c>)
 8003d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <pvPortMalloc+0x17c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <pvPortMalloc+0x184>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d203      	bcs.n	8003d1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <pvPortMalloc+0x17c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <pvPortMalloc+0x184>)
 8003d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <pvPortMalloc+0x178>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d32:	f7fe fd91 	bl	8002858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <pvPortMalloc+0x16a>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <pvPortMalloc+0x168>
	return pvReturn;
 8003d56:	69fb      	ldr	r3, [r7, #28]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20001ad8 	.word	0x20001ad8
 8003d64:	20001ae4 	.word	0x20001ae4
 8003d68:	20001adc 	.word	0x20001adc
 8003d6c:	20001ad0 	.word	0x20001ad0
 8003d70:	20001ae0 	.word	0x20001ae0

08003d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d048      	beq.n	8003e18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d86:	2308      	movs	r3, #8
 8003d88:	425b      	negs	r3, r3
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <vPortFree+0xac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <vPortFree+0x44>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60fb      	str	r3, [r7, #12]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <vPortFree+0x62>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	60bb      	str	r3, [r7, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <vPortFree+0xac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d019      	beq.n	8003e18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d115      	bne.n	8003e18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <vPortFree+0xac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dfc:	f7fe fd1e 	bl	800283c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <vPortFree+0xb0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <vPortFree+0xb0>)
 8003e0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e0e:	6938      	ldr	r0, [r7, #16]
 8003e10:	f000 f86c 	bl	8003eec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e14:	f7fe fd20 	bl	8002858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20001ae4 	.word	0x20001ae4
 8003e24:	20001adc 	.word	0x20001adc

08003e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <prvHeapInit+0xac>)
 8003e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3307      	adds	r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <prvHeapInit+0xac>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <prvHeapInit+0xb0>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <prvHeapInit+0xb0>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e74:	2208      	movs	r2, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <prvHeapInit+0xb4>)
 8003e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <prvHeapInit+0xb4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <prvHeapInit+0xb4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <prvHeapInit+0xb4>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <prvHeapInit+0xb8>)
 8003eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <prvHeapInit+0xbc>)
 8003ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <prvHeapInit+0xc0>)
 8003ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000ed0 	.word	0x20000ed0
 8003ed8:	20001ad0 	.word	0x20001ad0
 8003edc:	20001ad8 	.word	0x20001ad8
 8003ee0:	20001ae0 	.word	0x20001ae0
 8003ee4:	20001adc 	.word	0x20001adc
 8003ee8:	20001ae4 	.word	0x20001ae4

08003eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <prvInsertBlockIntoFreeList+0xa8>)
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e002      	b.n	8003f00 <prvInsertBlockIntoFreeList+0x14>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d8f7      	bhi.n	8003efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4413      	add	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d108      	bne.n	8003f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	441a      	add	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	441a      	add	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d118      	bne.n	8003f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <prvInsertBlockIntoFreeList+0xac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d00d      	beq.n	8003f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e008      	b.n	8003f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvInsertBlockIntoFreeList+0xac>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e003      	b.n	8003f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d002      	beq.n	8003f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	20001ad0 	.word	0x20001ad0
 8003f98:	20001ad8 	.word	0x20001ad8

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	4d0c      	ldr	r5, [pc, #48]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa2:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa4:	1b64      	subs	r4, r4, r5
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	f000 f8f0 	bl	8004190 <_init>
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	4d0a      	ldr	r5, [pc, #40]	; (8003fdc <__libc_init_array+0x40>)
 8003fb4:	4c0a      	ldr	r4, [pc, #40]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb6:	1b64      	subs	r4, r4, r5
 8003fb8:	10a4      	asrs	r4, r4, #2
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08004278 	.word	0x08004278
 8003fd8:	08004278 	.word	0x08004278
 8003fdc:	08004278 	.word	0x08004278
 8003fe0:	0800427c 	.word	0x0800427c

08003fe4 <__retarget_lock_acquire_recursive>:
 8003fe4:	4770      	bx	lr

08003fe6 <__retarget_lock_release_recursive>:
 8003fe6:	4770      	bx	lr

08003fe8 <memcpy>:
 8003fe8:	440a      	add	r2, r1
 8003fea:	4291      	cmp	r1, r2
 8003fec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ff0:	d100      	bne.n	8003ff4 <memcpy+0xc>
 8003ff2:	4770      	bx	lr
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004000:	d1f9      	bne.n	8003ff6 <memcpy+0xe>
 8004002:	bd10      	pop	{r4, pc}

08004004 <memset>:
 8004004:	4603      	mov	r3, r0
 8004006:	4402      	add	r2, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	f803 1b01 	strb.w	r1, [r3], #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <cleanup_glue>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	460c      	mov	r4, r1
 8004018:	6809      	ldr	r1, [r1, #0]
 800401a:	4605      	mov	r5, r0
 800401c:	b109      	cbz	r1, 8004022 <cleanup_glue+0xe>
 800401e:	f7ff fff9 	bl	8004014 <cleanup_glue>
 8004022:	4621      	mov	r1, r4
 8004024:	4628      	mov	r0, r5
 8004026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402a:	f000 b869 	b.w	8004100 <_free_r>
	...

08004030 <_reclaim_reent>:
 8004030:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <_reclaim_reent+0xb4>)
 8004032:	b570      	push	{r4, r5, r6, lr}
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4604      	mov	r4, r0
 8004038:	4283      	cmp	r3, r0
 800403a:	d051      	beq.n	80040e0 <_reclaim_reent+0xb0>
 800403c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800403e:	b143      	cbz	r3, 8004052 <_reclaim_reent+0x22>
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14a      	bne.n	80040dc <_reclaim_reent+0xac>
 8004046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	b111      	cbz	r1, 8004052 <_reclaim_reent+0x22>
 800404c:	4620      	mov	r0, r4
 800404e:	f000 f857 	bl	8004100 <_free_r>
 8004052:	6961      	ldr	r1, [r4, #20]
 8004054:	b111      	cbz	r1, 800405c <_reclaim_reent+0x2c>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f852 	bl	8004100 <_free_r>
 800405c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800405e:	b111      	cbz	r1, 8004066 <_reclaim_reent+0x36>
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f84d 	bl	8004100 <_free_r>
 8004066:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004068:	b111      	cbz	r1, 8004070 <_reclaim_reent+0x40>
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f848 	bl	8004100 <_free_r>
 8004070:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004072:	b111      	cbz	r1, 800407a <_reclaim_reent+0x4a>
 8004074:	4620      	mov	r0, r4
 8004076:	f000 f843 	bl	8004100 <_free_r>
 800407a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800407c:	b111      	cbz	r1, 8004084 <_reclaim_reent+0x54>
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f83e 	bl	8004100 <_free_r>
 8004084:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004086:	b111      	cbz	r1, 800408e <_reclaim_reent+0x5e>
 8004088:	4620      	mov	r0, r4
 800408a:	f000 f839 	bl	8004100 <_free_r>
 800408e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004090:	b111      	cbz	r1, 8004098 <_reclaim_reent+0x68>
 8004092:	4620      	mov	r0, r4
 8004094:	f000 f834 	bl	8004100 <_free_r>
 8004098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409a:	b111      	cbz	r1, 80040a2 <_reclaim_reent+0x72>
 800409c:	4620      	mov	r0, r4
 800409e:	f000 f82f 	bl	8004100 <_free_r>
 80040a2:	69a3      	ldr	r3, [r4, #24]
 80040a4:	b1e3      	cbz	r3, 80040e0 <_reclaim_reent+0xb0>
 80040a6:	4620      	mov	r0, r4
 80040a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040aa:	4798      	blx	r3
 80040ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80040ae:	b1b9      	cbz	r1, 80040e0 <_reclaim_reent+0xb0>
 80040b0:	4620      	mov	r0, r4
 80040b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040b6:	f7ff bfad 	b.w	8004014 <cleanup_glue>
 80040ba:	5949      	ldr	r1, [r1, r5]
 80040bc:	b941      	cbnz	r1, 80040d0 <_reclaim_reent+0xa0>
 80040be:	3504      	adds	r5, #4
 80040c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c2:	2d80      	cmp	r5, #128	; 0x80
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	d1f8      	bne.n	80040ba <_reclaim_reent+0x8a>
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 f819 	bl	8004100 <_free_r>
 80040ce:	e7ba      	b.n	8004046 <_reclaim_reent+0x16>
 80040d0:	680e      	ldr	r6, [r1, #0]
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 f814 	bl	8004100 <_free_r>
 80040d8:	4631      	mov	r1, r6
 80040da:	e7ef      	b.n	80040bc <_reclaim_reent+0x8c>
 80040dc:	2500      	movs	r5, #0
 80040de:	e7ef      	b.n	80040c0 <_reclaim_reent+0x90>
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	bf00      	nop
 80040e4:	20000010 	.word	0x20000010

080040e8 <__malloc_lock>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__malloc_lock+0x8>)
 80040ea:	f7ff bf7b 	b.w	8003fe4 <__retarget_lock_acquire_recursive>
 80040ee:	bf00      	nop
 80040f0:	20001ae8 	.word	0x20001ae8

080040f4 <__malloc_unlock>:
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <__malloc_unlock+0x8>)
 80040f6:	f7ff bf76 	b.w	8003fe6 <__retarget_lock_release_recursive>
 80040fa:	bf00      	nop
 80040fc:	20001ae8 	.word	0x20001ae8

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d040      	beq.n	800418a <_free_r+0x8a>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f7ff ffe8 	bl	80040e8 <__malloc_lock>
 8004118:	4a1c      	ldr	r2, [pc, #112]	; (800418c <_free_r+0x8c>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	b933      	cbnz	r3, 800412c <_free_r+0x2c>
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	4628      	mov	r0, r5
 8004124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004128:	f7ff bfe4 	b.w	80040f4 <__malloc_unlock>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d908      	bls.n	8004142 <_free_r+0x42>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf01      	itttt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	e7ed      	b.n	800411e <_free_r+0x1e>
 8004142:	461a      	mov	r2, r3
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b10b      	cbz	r3, 800414c <_free_r+0x4c>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d9fa      	bls.n	8004142 <_free_r+0x42>
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	1850      	adds	r0, r2, r1
 8004150:	42a0      	cmp	r0, r4
 8004152:	d10b      	bne.n	800416c <_free_r+0x6c>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	4401      	add	r1, r0
 8004158:	1850      	adds	r0, r2, r1
 800415a:	4283      	cmp	r3, r0
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	d1e0      	bne.n	8004122 <_free_r+0x22>
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4401      	add	r1, r0
 8004166:	6011      	str	r1, [r2, #0]
 8004168:	6053      	str	r3, [r2, #4]
 800416a:	e7da      	b.n	8004122 <_free_r+0x22>
 800416c:	d902      	bls.n	8004174 <_free_r+0x74>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d6      	b.n	8004122 <_free_r+0x22>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf01      	itttt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	6054      	str	r4, [r2, #4]
 8004188:	e7cb      	b.n	8004122 <_free_r+0x22>
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20001aec 	.word	0x20001aec

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
