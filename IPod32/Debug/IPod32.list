
IPod32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c48  08004c48  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004c48  08004c48  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c48  08004c48  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa0  20000074  08004cc4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b14  08004cc4  00021b14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018260  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343b  00000000  00000000  000382fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0003b738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  0003c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c30  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cbd  00000000  00000000  00042410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d84  00000000  00000000  000550cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a0  00000000  00000000  000e5ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a50 	.word	0x08004a50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004a50 	.word	0x08004a50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <init_lcd_task>:
osMessageQueueId_t lcdMsgHandle;
const osMessageQueueAttr_t lcdMessageHandleAttrs = {
		.name = "lcdMessageHandle",
};

void init_lcd_task(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	//LCD_Init();
	lcdMsgHandle = osMessageQueueNew(5, sizeof(LCDData), NULL);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016a:	2005      	movs	r0, #5
 800016c:	f001 fd70 	bl	8001c50 <osMessageQueueNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a04      	ldr	r2, [pc, #16]	; (8000184 <init_lcd_task+0x24>)
 8000174:	6013      	str	r3, [r2, #0]
	set_lcd("Hello", "world!");
 8000176:	4904      	ldr	r1, [pc, #16]	; (8000188 <init_lcd_task+0x28>)
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <init_lcd_task+0x2c>)
 800017a:	f000 f881 	bl	8000280 <set_lcd>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	20001a5c 	.word	0x20001a5c
 8000188:	08004a7c 	.word	0x08004a7c
 800018c:	08004a84 	.word	0x08004a84

08000190 <lcd_task>:

void lcd_task(){
 8000190:	b580      	push	{r7, lr}
 8000192:	b0c8      	sub	sp, #288	; 0x120
 8000194:	af00      	add	r7, sp, #0
	init_lcd_task();
 8000196:	f7ff ffe3 	bl	8000160 <init_lcd_task>

	LCDData data;
	memset(data.line1, 0, sizeof(data.line1));
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2280      	movs	r2, #128	; 0x80
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f004 fb77 	bl	8004894 <memset>
	memset(data.line2, 0, sizeof(data.line2));
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	3380      	adds	r3, #128	; 0x80
 80001aa:	2280      	movs	r2, #128	; 0x80
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f004 fb70 	bl	8004894 <memset>
	int line1_char = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int line2_char = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	while(1){
		osStatus_t ret = osMessageQueueGet(lcdMsgHandle, &data, NULL, osWaitForever);
 80001c0:	4b2e      	ldr	r3, [pc, #184]	; (800027c <lcd_task+0xec>)
 80001c2:	6818      	ldr	r0, [r3, #0]
 80001c4:	1d39      	adds	r1, r7, #4
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001ca:	2200      	movs	r2, #0
 80001cc:	f001 fe3a 	bl	8001e44 <osMessageQueueGet>
 80001d0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		if (ret == osOK){
 80001d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d105      	bne.n	80001e8 <lcd_task+0x58>
			//New message, reset current char
			line1_char = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			line2_char = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		}

		size_t line1_size = strlen(data.line1);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4618      	mov	r0, r3
 80001ec:	f7ff ffb0 	bl	8000150 <strlen>
 80001f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		size_t line2_size = strlen(data.line2);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	3380      	adds	r3, #128	; 0x80
 80001f8:	4618      	mov	r0, r3
 80001fa:	f7ff ffa9 	bl	8000150 <strlen>
 80001fe:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

		//Draw line 1
		//LCD_Set_Cursor(0, 1);
		for(int i = line1_char; i < line1_char + 16; i++){
 8000202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800020a:	e00b      	b.n	8000224 <lcd_task+0x94>
			//Send chars
			char test = data.line1[i];
 800020c:	1d3a      	adds	r2, r7, #4
 800020e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000212:	4413      	add	r3, r2
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		for(int i = line1_char; i < line1_char + 16; i++){
 800021a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800021e:	3301      	adds	r3, #1
 8000220:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000224:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000228:	330f      	adds	r3, #15
 800022a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800022e:	429a      	cmp	r2, r3
 8000230:	ddec      	ble.n	800020c <lcd_task+0x7c>

		//Draw line 2
		//LCD_Set_cursor(0, 2);

		//Increment char counts
		line1_char++;
 8000232:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000236:	3301      	adds	r3, #1
 8000238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if(line1_char + 16 >= line1_size){
 800023c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000240:	3310      	adds	r3, #16
 8000242:	461a      	mov	r2, r3
 8000244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000248:	4293      	cmp	r3, r2
 800024a:	d802      	bhi.n	8000252 <lcd_task+0xc2>
			line1_char = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}

		line2_char++;
 8000252:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000256:	3301      	adds	r3, #1
 8000258:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		if(line2_char + 16 >= line2_size){
 800025c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000260:	3310      	adds	r3, #16
 8000262:	461a      	mov	r2, r3
 8000264:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000268:	4293      	cmp	r3, r2
 800026a:	d802      	bhi.n	8000272 <lcd_task+0xe2>
			line2_char = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		}

		osDelay(100);
 8000272:	2064      	movs	r0, #100	; 0x64
 8000274:	f001 fcbe 	bl	8001bf4 <osDelay>
	while(1){
 8000278:	e7a2      	b.n	80001c0 <lcd_task+0x30>
 800027a:	bf00      	nop
 800027c:	20001a5c 	.word	0x20001a5c

08000280 <set_lcd>:
	}
}

osStatus_t set_lcd(char *line1, char *line2){
 8000280:	b580      	push	{r7, lr}
 8000282:	b0c2      	sub	sp, #264	; 0x108
 8000284:	af00      	add	r7, sp, #0
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	6018      	str	r0, [r3, #0]
 800028a:	463b      	mov	r3, r7
 800028c:	6019      	str	r1, [r3, #0]
	LCDData data;
	strncpy(data.line1, line1, sizeof(data.line1));
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	f107 0008 	add.w	r0, r7, #8
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	6819      	ldr	r1, [r3, #0]
 8000298:	f004 fb6e 	bl	8004978 <strncpy>
	strncpy(data.line2, line2, sizeof(data.line2));
 800029c:	463b      	mov	r3, r7
 800029e:	f107 0208 	add.w	r2, r7, #8
 80002a2:	f102 0080 	add.w	r0, r2, #128	; 0x80
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	6819      	ldr	r1, [r3, #0]
 80002aa:	f004 fb65 	bl	8004978 <strncpy>
	return osMessageQueuePut(lcdMsgHandle, &data, NULL, 1000);
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <set_lcd+0x4c>)
 80002b0:	6818      	ldr	r0, [r3, #0]
 80002b2:	f107 0108 	add.w	r1, r7, #8
 80002b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ba:	2200      	movs	r2, #0
 80002bc:	f001 fd4e 	bl	8001d5c <osMessageQueuePut>
 80002c0:	4603      	mov	r3, r0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20001a5c 	.word	0x20001a5c

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 fbec 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f85e 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f8a2 	bl	8000424 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 80002e0:	f000 f95a 	bl	8000598 <USER_RCC_Init>
  USER_GPIO_Init();
 80002e4:	f000 f96e 	bl	80005c4 <USER_GPIO_Init>
  USER_USART1_Init();
 80002e8:	f000 f8be 	bl	8000468 <USER_USART1_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002ec:	f001 fb72 	bl	80019d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  inputQueueHandle = osMessageQueueNew(20, sizeof(uint8_t), &inputQueue_attributes);
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <main+0x88>)
 80002f2:	2101      	movs	r1, #1
 80002f4:	2014      	movs	r0, #20
 80002f6:	f001 fcab 	bl	8001c50 <osMessageQueueNew>
 80002fa:	4603      	mov	r3, r0
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <main+0x8c>)
 80002fe:	6013      	str	r3, [r2, #0]
  rpiInQueueHandle = osMessageQueueNew(5, sizeof(uint8_t), &rpiInQueue_attributes);
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <main+0x90>)
 8000302:	2101      	movs	r1, #1
 8000304:	2005      	movs	r0, #5
 8000306:	f001 fca3 	bl	8001c50 <osMessageQueueNew>
 800030a:	4603      	mov	r3, r0
 800030c:	4a15      	ldr	r2, [pc, #84]	; (8000364 <main+0x94>)
 800030e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000310:	4a15      	ldr	r2, [pc, #84]	; (8000368 <main+0x98>)
 8000312:	2100      	movs	r1, #0
 8000314:	4815      	ldr	r0, [pc, #84]	; (800036c <main+0x9c>)
 8000316:	f001 fbc3 	bl	8001aa0 <osThreadNew>
 800031a:	4603      	mov	r3, r0
 800031c:	4a14      	ldr	r2, [pc, #80]	; (8000370 <main+0xa0>)
 800031e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  lcdTaskHandle = osThreadNew(lcd_task, NULL, &lcdTask_attributes);
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <main+0xa4>)
 8000322:	2100      	movs	r1, #0
 8000324:	4814      	ldr	r0, [pc, #80]	; (8000378 <main+0xa8>)
 8000326:	f001 fbbb 	bl	8001aa0 <osThreadNew>
 800032a:	4603      	mov	r3, r0
 800032c:	4a13      	ldr	r2, [pc, #76]	; (800037c <main+0xac>)
 800032e:	6013      	str	r3, [r2, #0]
  txTaskHandle = osThreadNew(transmit_data_task, NULL, &txTask_attributes);
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <main+0xb0>)
 8000332:	2100      	movs	r1, #0
 8000334:	4813      	ldr	r0, [pc, #76]	; (8000384 <main+0xb4>)
 8000336:	f001 fbb3 	bl	8001aa0 <osThreadNew>
 800033a:	4603      	mov	r3, r0
 800033c:	4a12      	ldr	r2, [pc, #72]	; (8000388 <main+0xb8>)
 800033e:	6013      	str	r3, [r2, #0]
  pollKeypadTaskHandle = osThreadNew(poll_keyboard_button_task, NULL, &pollKeypad_attributes);
 8000340:	4a12      	ldr	r2, [pc, #72]	; (800038c <main+0xbc>)
 8000342:	2100      	movs	r1, #0
 8000344:	4812      	ldr	r0, [pc, #72]	; (8000390 <main+0xc0>)
 8000346:	f001 fbab 	bl	8001aa0 <osThreadNew>
 800034a:	4603      	mov	r3, r0
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <main+0xc4>)
 800034e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000350:	f001 fb72 	bl	8001a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000354:	e7fe      	b.n	8000354 <main+0x84>
 8000356:	bf00      	nop
 8000358:	08004ba0 	.word	0x08004ba0
 800035c:	20001a78 	.word	0x20001a78
 8000360:	08004bb8 	.word	0x08004bb8
 8000364:	20001a70 	.word	0x20001a70
 8000368:	08004b10 	.word	0x08004b10
 800036c:	08000681 	.word	0x08000681
 8000370:	20001a64 	.word	0x20001a64
 8000374:	08004b7c 	.word	0x08004b7c
 8000378:	08000191 	.word	0x08000191
 800037c:	20001a74 	.word	0x20001a74
 8000380:	08004b58 	.word	0x08004b58
 8000384:	08000981 	.word	0x08000981
 8000388:	20001a60 	.word	0x20001a60
 800038c:	08004b34 	.word	0x08004b34
 8000390:	0800075d 	.word	0x0800075d
 8000394:	20001a68 	.word	0x20001a68

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	; 0x40
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2228      	movs	r2, #40	; 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 fa74 	bl	8004894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fc77 	bl	8000cd4 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ec:	f000 f978 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2302      	movs	r3, #2
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fee2 	bl	80011d4 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000416:	f000 f963 	bl	80006e0 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	; 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_GPIO_Init+0x40>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <MX_GPIO_Init+0x40>)
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_GPIO_Init+0x40>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0320 	and.w	r3, r3, #32
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_GPIO_Init+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a07      	ldr	r2, [pc, #28]	; (8000464 <MX_GPIO_Init+0x40>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_GPIO_Init+0x40>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000

08000468 <USER_USART1_Init>:

/* USER CODE BEGIN 4 */
void USER_USART1_Init(void) {
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <USER_USART1_Init+0x40>)
 800046e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000472:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <USER_USART1_Init+0x40>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <USER_USART1_Init+0x40>)
 800047a:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 800047e:	f023 0313 	bic.w	r3, r3, #19
 8000482:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <USER_USART1_Init+0x40>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <USER_USART1_Init+0x40>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800048e:	f043 030c 	orr.w	r3, r3, #12
 8000492:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <USER_USART1_Init+0x40>)
 8000496:	691b      	ldr	r3, [r3, #16]
 8000498:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <USER_USART1_Init+0x40>)
 800049a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800049e:	6113      	str	r3, [r2, #16]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40013800 	.word	0x40013800

080004ac <config_pin>:

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]
 80004b8:	4613      	mov	r3, r2
 80004ba:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 80004bc:	78bb      	ldrb	r3, [r7, #2]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d104      	bne.n	80004cc <config_pin+0x20>
		//Input
		modeBits = 0b00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 80004c6:	2301      	movs	r3, #1
 80004c8:	73bb      	strb	r3, [r7, #14]
 80004ca:	e014      	b.n	80004f6 <config_pin+0x4a>
	} else if(mode == 1){
 80004cc:	78bb      	ldrb	r3, [r7, #2]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d104      	bne.n	80004dc <config_pin+0x30>
		//Output
		modeBits = 0b01;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73bb      	strb	r3, [r7, #14]
 80004da:	e00c      	b.n	80004f6 <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 80004e0:	2302      	movs	r3, #2
 80004e2:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	431a      	orrs	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 80004f6:	7bbb      	ldrb	r3, [r7, #14]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	f003 030c 	and.w	r3, r3, #12
 8000500:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 8000502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000506:	f003 0303 	and.w	r3, r3, #3
 800050a:	b25a      	sxtb	r2, r3
 800050c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000510:	4313      	orrs	r3, r2
 8000512:	b25b      	sxtb	r3, r3
 8000514:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 8000516:	78bb      	ldrb	r3, [r7, #2]
 8000518:	2b07      	cmp	r3, #7
 800051a:	d81a      	bhi.n	8000552 <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	78fa      	ldrb	r2, [r7, #3]
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	210f      	movs	r1, #15
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	43d2      	mvns	r2, r2
 800052c:	401a      	ands	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	78fa      	ldrb	r2, [r7, #3]
 8000538:	0092      	lsls	r2, r2, #2
 800053a:	210f      	movs	r1, #15
 800053c:	4091      	lsls	r1, r2
 800053e:	7b78      	ldrb	r0, [r7, #13]
 8000540:	78fa      	ldrb	r2, [r7, #3]
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	fa00 f202 	lsl.w	r2, r0, r2
 8000548:	400a      	ands	r2, r1
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 8000550:	e01c      	b.n	800058c <config_pin+0xe0>
		pin -= 8;
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	3b08      	subs	r3, #8
 8000556:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	78fa      	ldrb	r2, [r7, #3]
 800055e:	0092      	lsls	r2, r2, #2
 8000560:	210f      	movs	r1, #15
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	43d2      	mvns	r2, r2
 8000568:	401a      	ands	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	78fa      	ldrb	r2, [r7, #3]
 8000574:	0092      	lsls	r2, r2, #2
 8000576:	210f      	movs	r1, #15
 8000578:	4091      	lsls	r1, r2
 800057a:	7b78      	ldrb	r0, [r7, #13]
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	fa00 f202 	lsl.w	r2, r0, r2
 8000584:	400a      	ands	r2, r1
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	605a      	str	r2, [r3, #4]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <USER_RCC_Init>:

void USER_RCC_Init(void){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <USER_RCC_Init+0x28>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <USER_RCC_Init+0x28>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <USER_RCC_Init+0x28>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <USER_RCC_Init+0x28>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	f043 0314 	orr.w	r3, r3, #20
 80005b6:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN;
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000

080005c4 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005ce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80005d2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005da:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80005de:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a24      	ldr	r2, [pc, #144]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80005ea:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <USER_GPIO_Init+0xb4>)
 80005fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fe:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <USER_GPIO_Init+0xb8>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <USER_GPIO_Init+0xb8>)
 8000606:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800060a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <USER_GPIO_Init+0xb8>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a1a      	ldr	r2, [pc, #104]	; (800067c <USER_GPIO_Init+0xb8>)
 8000612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000616:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000618:	2202      	movs	r2, #2
 800061a:	2100      	movs	r1, #0
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <USER_GPIO_Init+0xb4>)
 800061e:	f7ff ff45 	bl	80004ac <config_pin>
	config_pin(GPIOA, 1, 2);
 8000622:	2202      	movs	r2, #2
 8000624:	2101      	movs	r1, #1
 8000626:	4814      	ldr	r0, [pc, #80]	; (8000678 <USER_GPIO_Init+0xb4>)
 8000628:	f7ff ff40 	bl	80004ac <config_pin>
	config_pin(GPIOA, 2, 2);
 800062c:	2202      	movs	r2, #2
 800062e:	2102      	movs	r1, #2
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <USER_GPIO_Init+0xb4>)
 8000632:	f7ff ff3b 	bl	80004ac <config_pin>
	config_pin(GPIOA, 3, 2);
 8000636:	2202      	movs	r2, #2
 8000638:	2103      	movs	r1, #3
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <USER_GPIO_Init+0xb4>)
 800063c:	f7ff ff36 	bl	80004ac <config_pin>
	config_pin(GPIOA, 4, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	2104      	movs	r1, #4
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <USER_GPIO_Init+0xb4>)
 8000646:	f7ff ff31 	bl	80004ac <config_pin>
	config_pin(GPIOA, 5, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	2105      	movs	r1, #5
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <USER_GPIO_Init+0xb4>)
 8000650:	f7ff ff2c 	bl	80004ac <config_pin>
	config_pin(GPIOA, 6, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2106      	movs	r1, #6
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <USER_GPIO_Init+0xb4>)
 800065a:	f7ff ff27 	bl	80004ac <config_pin>
	config_pin(GPIOA, 7, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	2107      	movs	r1, #7
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <USER_GPIO_Init+0xb4>)
 8000664:	f7ff ff22 	bl	80004ac <config_pin>
	config_pin(GPIOC, 13, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	210d      	movs	r1, #13
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <USER_GPIO_Init+0xb8>)
 800066e:	f7ff ff1d 	bl	80004ac <config_pin>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010800 	.word	0x40010800
 800067c:	40011000 	.word	0x40011000

08000680 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	uint8_t message;
	osMessageQueueGet(inputQueueHandle, &message, NULL, 200);
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <StartDefaultTask+0x34>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	f107 010f 	add.w	r1, r7, #15
 8000690:	23c8      	movs	r3, #200	; 0xc8
 8000692:	2200      	movs	r2, #0
 8000694:	f001 fbd6 	bl	8001e44 <osMessageQueueGet>

	GPIOC->BSRR = (message==1)?
 8000698:	7bfb      	ldrb	r3, [r7, #15]
			 GPIO_BSRR_BR13:
 800069a:	2b01      	cmp	r3, #1
 800069c:	d102      	bne.n	80006a4 <StartDefaultTask+0x24>
 800069e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006a2:	e001      	b.n	80006a8 <StartDefaultTask+0x28>
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIOC->BSRR = (message==1)?
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <StartDefaultTask+0x38>)
 80006aa:	6113      	str	r3, [r2, #16]
			 GPIO_BSRR_BS13;
    osDelay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f001 faa1 	bl	8001bf4 <osDelay>
  {
 80006b2:	e7e9      	b.n	8000688 <StartDefaultTask+0x8>
 80006b4:	20001a78 	.word	0x20001a78
 80006b8:	40011000 	.word	0x40011000

080006bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ce:	f000 fa05 	bl	8000adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40000800 	.word	0x40000800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <pollButton>:

#include "poll_keyboard_task.h"


extern osMessageQueueId_t inputQueueHandle;
uint8_t pollButton(uint8_t row, uint8_t col){
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	//Set all row pins to 1, except polling row
	for(int i = 4; i < 8; i++){
 80006fc:	2304      	movs	r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e00c      	b.n	800071c <pollButton+0x30>
		GPIOA->ODR |= 1 << i;
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <pollButton+0x6c>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2101      	movs	r1, #1
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	fa01 f202 	lsl.w	r2, r1, r2
 800070e:	4611      	mov	r1, r2
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <pollButton+0x6c>)
 8000712:	430b      	orrs	r3, r1
 8000714:	60d3      	str	r3, [r2, #12]
	for(int i = 4; i < 8; i++){
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b07      	cmp	r3, #7
 8000720:	ddef      	ble.n	8000702 <pollButton+0x16>
	}
	GPIOA->ODR &= ~(1 << row);
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <pollButton+0x6c>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <pollButton+0x6c>)
 8000734:	400b      	ands	r3, r1
 8000736:	60d3      	str	r3, [r2, #12]

	//Read col
	//return 0;
	return GPIOA->IDR & (1 << col);
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <pollButton+0x6c>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2101      	movs	r1, #1
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4013      	ands	r3, r2
 800074a:	b2db      	uxtb	r3, r3
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40010800 	.word	0x40010800

0800075c <poll_keyboard_button_task>:


void poll_keyboard_button_task(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
	/* FAVOR DE IGNORAR, NI SE SI ESTA BIEN*/
	uint8_t isPressed;
	while(1){
		for(int i = 0; i < 4; i++){
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e025      	b.n	80007b4 <poll_keyboard_button_task+0x58>
			  for(int j = 0; j < 4; j++){
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	e01c      	b.n	80007a8 <poll_keyboard_button_task+0x4c>
				  int out = pollButton(j + 4, i);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	3304      	adds	r3, #4
 8000774:	b2db      	uxtb	r3, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffb5 	bl	80006ec <pollButton>
 8000782:	4603      	mov	r3, r0
 8000784:	607b      	str	r3, [r7, #4]
//				  int index = i * 4 + j;

				  isPressed = (out==0) ? 1 : 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	70fb      	strb	r3, [r7, #3]
				  osMessageQueuePut(inputQueueHandle, &isPressed, 0U, 100);
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <poll_keyboard_button_task+0x68>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	1cf9      	adds	r1, r7, #3
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2200      	movs	r2, #0
 800079e:	f001 fadd 	bl	8001d5c <osMessageQueuePut>
			  for(int j = 0; j < 4; j++){
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	dddf      	ble.n	800076e <poll_keyboard_button_task+0x12>
		for(int i = 0; i < 4; i++){
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	ddd6      	ble.n	8000768 <poll_keyboard_button_task+0xc>
			  }
			}
		osDelay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f001 fa1a 	bl	8001bf4 <osDelay>
		for(int i = 0; i < 4; i++){
 80007c0:	e7cf      	b.n	8000762 <poll_keyboard_button_task+0x6>
 80007c2:	bf00      	nop
 80007c4:	20001a78 	.word	0x20001a78

080007c8 <USER_USART1_Transmit>:
 *      Author: iandu
 */

#include "serial.h"

void USER_USART1_Transmit(uint8_t *pData, uint16_t size){
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
	for(int i=0; i< size; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e00f      	b.n	80007fa <USER_USART1_Transmit+0x32>
		while( (USART1->SR & USART_SR_TXE)==0 ){
 80007da:	bf00      	nop
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <USER_USART1_Transmit+0x48>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f9      	beq.n	80007dc <USER_USART1_Transmit+0x14>

		}
		USART1->DR = *pData++;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <USER_USART1_Transmit+0x48>)
 80007f2:	605a      	str	r2, [r3, #4]
	for(int i=0; i< size; i++){
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	887b      	ldrh	r3, [r7, #2]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbeb      	blt.n	80007da <USER_USART1_Transmit+0x12>
	}
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40013800 	.word	0x40013800

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_MspInit+0x68>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_MspInit+0x68>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_MspInit+0x68>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x68>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_MspInit+0x68>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x68>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 fa14 	bl	8000c7e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_MspInit+0x6c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_MspInit+0x6c>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000
 8000880:	40010000 	.word	0x40010000

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	201e      	movs	r0, #30
 800089a:	f000 f9f0 	bl	8000c7e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800089e:	201e      	movs	r0, #30
 80008a0:	f000 fa09 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <HAL_InitTick+0xa0>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <HAL_InitTick+0xa0>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_InitTick+0xa0>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f107 0210 	add.w	r2, r7, #16
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fdec 	bl	80014a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008cc:	f000 fdd6 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 80008d0:	4603      	mov	r3, r0
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_InitTick+0xa4>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_InitTick+0xa8>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_InitTick+0xac>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_InitTick+0xa8>)
 80008ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_InitTick+0xa8>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_InitTick+0xa8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_InitTick+0xa8>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_InitTick+0xa8>)
 8000906:	f000 fe1b 	bl	8001540 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_InitTick+0xa8>)
 8000912:	f000 fe6d 	bl	80015f0 <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20001a7c 	.word	0x20001a7c
 8000930:	40000800 	.word	0x40000800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM4_IRQHandler+0x10>)
 8000966:	f000 fe95 	bl	8001694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20001a7c 	.word	0x20001a7c

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <transmit_data_task>:
 *      Author: iandu
 */

#include "tx_task.h"

void transmit_data_task(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
	uint8_t play[] = "z\0";
 8000986:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <transmit_data_task+0xd4>)
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	6812      	ldr	r2, [r2, #0]
 800098e:	4611      	mov	r1, r2
 8000990:	8019      	strh	r1, [r3, #0]
 8000992:	3302      	adds	r3, #2
 8000994:	0c12      	lsrs	r2, r2, #16
 8000996:	701a      	strb	r2, [r3, #0]
	uint8_t next[] = "n\0";
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <transmit_data_task+0xd8>)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	4611      	mov	r1, r2
 80009a2:	8019      	strh	r1, [r3, #0]
 80009a4:	3302      	adds	r3, #2
 80009a6:	0c12      	lsrs	r2, r2, #16
 80009a8:	701a      	strb	r2, [r3, #0]
	uint8_t prev[] = "p\0";
 80009aa:	4a2c      	ldr	r2, [pc, #176]	; (8000a5c <transmit_data_task+0xdc>)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	6812      	ldr	r2, [r2, #0]
 80009b0:	4611      	mov	r1, r2
 80009b2:	8019      	strh	r1, [r3, #0]
 80009b4:	3302      	adds	r3, #2
 80009b6:	0c12      	lsrs	r2, r2, #16
 80009b8:	701a      	strb	r2, [r3, #0]
	uint8_t stop[] = "s\0";
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <transmit_data_task+0xe0>)
 80009bc:	463b      	mov	r3, r7
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	4611      	mov	r1, r2
 80009c2:	8019      	strh	r1, [r3, #0]
 80009c4:	3302      	adds	r3, #2
 80009c6:	0c12      	lsrs	r2, r2, #16
 80009c8:	701a      	strb	r2, [r3, #0]
	while(1){
		USER_USART1_Transmit(play, strlen(play));
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fbbe 	bl	8000150 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fef2 	bl	80007c8 <USER_USART1_Transmit>
		osDelay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f001 f904 	bl	8001bf4 <osDelay>
		USER_USART1_Transmit(next, strlen(next));
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fbad 	bl	8000150 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fee1 	bl	80007c8 <USER_USART1_Transmit>
		osDelay(1000);
 8000a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0a:	f001 f8f3 	bl	8001bf4 <osDelay>
		USER_USART1_Transmit(prev, strlen(prev));
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fb9d 	bl	8000150 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fed2 	bl	80007c8 <USER_USART1_Transmit>
		osDelay(1000);
 8000a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a28:	f001 f8e4 	bl	8001bf4 <osDelay>
		USER_USART1_Transmit(stop, strlen(stop));
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fb8e 	bl	8000150 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fec3 	bl	80007c8 <USER_USART1_Transmit>
		osDelay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f001 f8d5 	bl	8001bf4 <osDelay>
		osDelay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f001 f8d2 	bl	8001bf4 <osDelay>
	while(1){
 8000a50:	e7bb      	b.n	80009ca <transmit_data_task+0x4a>
 8000a52:	bf00      	nop
 8000a54:	08004ad8 	.word	0x08004ad8
 8000a58:	08004adc 	.word	0x08004adc
 8000a5c:	08004ae0 	.word	0x08004ae0
 8000a60:	08004ae4 	.word	0x08004ae4

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8a:	f7ff ff73 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f003 fecd 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fc1d 	bl	80002d0 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aa0:	08004c50 	.word	0x08004c50
  ldr r2, =_sbss
 8000aa4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000aa8:	20001b14 	.word	0x20001b14

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f8d1 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fedc 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fea2 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20001ac4 	.word	0x20001ac4

08000b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20001ac4 	.word	0x20001ac4

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <__NVIC_EnableIRQ+0x34>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff4f 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff64 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ffb2 	bl	8000c04 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff81 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff57 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e26c      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e246      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fea6 	bl	8000b00 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fea2 	bl	8000b00 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1fa      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fe92 	bl	8000b00 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fe8e 	bl	8000b00 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1e6      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1ba      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fe47 	bl	8000b00 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fe43 	bl	8000b00 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e19b      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fe26 	bl	8000b00 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fe22 	bl	8000b00 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e17a      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fe06 	bl	8000b00 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fe02 	bl	8000b00 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e15a      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 faf4 	bl	8001504 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fdec 	bl	8000b00 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fde8 	bl	8000b00 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e140      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b9e      	ldr	r3, [pc, #632]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b97      	ldr	r3, [pc, #604]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a93      	ldr	r2, [pc, #588]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b91      	ldr	r3, [pc, #580]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b8e      	ldr	r3, [pc, #568]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b8b      	ldr	r3, [pc, #556]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a8a      	ldr	r2, [pc, #552]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fda9 	bl	8000b00 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fda5 	bl	8000b00 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	; 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e0fd      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b81      	ldr	r3, [pc, #516]	; (80011cc <HAL_RCC_OscConfig+0x4f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b7b      	ldr	r3, [pc, #492]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a7a      	ldr	r2, [pc, #488]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b76      	ldr	r3, [pc, #472]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a75      	ldr	r2, [pc, #468]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b73      	ldr	r3, [pc, #460]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a72      	ldr	r2, [pc, #456]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a6c      	ldr	r2, [pc, #432]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a69      	ldr	r2, [pc, #420]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a66      	ldr	r2, [pc, #408]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a63      	ldr	r2, [pc, #396]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fd59 	bl	8000b00 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fd55 	bl	8000b00 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0ab      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fd43 	bl	8000b00 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fd3f 	bl	8000b00 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e095      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8081 	beq.w	80011be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_OscConfig+0x4fc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fd13 	bl	8000b00 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fd0f 	bl	8000b00 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e067      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	492d      	ldr	r1, [pc, #180]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	4927      	ldr	r1, [pc, #156]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x4fc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fce3 	bl	8000b00 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fcdf 	bl	8000b00 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e037      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e02f      	b.n	80011be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_RCC_OscConfig+0x4fc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fccc 	bl	8000b00 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fcc8 	bl	8000b00 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e020      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e018      	b.n	80011be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e013      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40007000 	.word	0x40007000
 80011d0:	42420060 	.word	0x42420060

080011d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0d0      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b6a      	ldr	r3, [pc, #424]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d910      	bls.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4965      	ldr	r1, [pc, #404]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b8      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800123a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b50      	ldr	r3, [pc, #320]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	494d      	ldr	r1, [pc, #308]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d040      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d115      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e07f      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e073      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06b      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4936      	ldr	r1, [pc, #216]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fc1c 	bl	8000b00 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff fc18 	bl	8000b00 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e053      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d210      	bcs.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4922      	ldr	r1, [pc, #136]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e032      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4916      	ldr	r1, [pc, #88]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	490e      	ldr	r1, [pc, #56]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f000 f821 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	490a      	ldr	r1, [pc, #40]	; (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_RCC_ClockConfig+0x1cc>)
 800137c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa7e 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	08004bd0 	.word	0x08004bd0
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	b490      	push	{r4, r7}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b0:	1d3c      	adds	r4, r7, #4
 80013b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013b8:	f240 2301 	movw	r3, #513	; 0x201
 80013bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_RCC_GetSysClockFreq+0xb4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d002      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x40>
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d003      	beq.n	80013ee <HAL_RCC_GetSysClockFreq+0x46>
 80013e6:	e02d      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ea:	623b      	str	r3, [r7, #32]
      break;
 80013ec:	e02d      	b.n	800144a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	0c9b      	lsrs	r3, r3, #18
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013fa:	4413      	add	r3, r2
 80013fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001400:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_RCC_GetSysClockFreq+0xb4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0c5b      	lsrs	r3, r3, #17
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800141a:	4413      	add	r3, r2
 800141c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001426:	fb02 f203 	mul.w	r2, r2, r3
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	e004      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	623b      	str	r3, [r7, #32]
      break;
 8001442:	e002      	b.n	800144a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001446:	623b      	str	r3, [r7, #32]
      break;
 8001448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144a:	6a3b      	ldr	r3, [r7, #32]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bc90      	pop	{r4, r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08004ae8 	.word	0x08004ae8
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_RCC_GetHCLKFreq+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001480:	f7ff fff2 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	08004be0 	.word	0x08004be0

080014a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	220f      	movs	r2, #15
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0207 	and.w	r2, r3, #7
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40022000 	.word	0x40022000

08001504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <RCC_Delay+0x34>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <RCC_Delay+0x38>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0a5b      	lsrs	r3, r3, #9
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001520:	bf00      	nop
  }
  while (Delay --);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	60fa      	str	r2, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f9      	bne.n	8001520 <RCC_Delay+0x1c>
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000
 800153c:	10624dd3 	.word	0x10624dd3

08001540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e041      	b.n	80015d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f839 	bl	80015de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3304      	adds	r3, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f000 f9b4 	bl	80018ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d001      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e03a      	b.n	800167e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_TIM_Base_Start_IT+0x98>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00e      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001632:	d009      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_TIM_Base_Start_IT+0x9c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d004      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x58>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_TIM_Base_Start_IT+0xa0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b06      	cmp	r3, #6
 8001658:	d010      	beq.n	800167c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166a:	e007      	b.n	800167c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40012c00 	.word	0x40012c00
 800168c:	40000400 	.word	0x40000400
 8001690:	40000800 	.word	0x40000800

08001694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d122      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d11b      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0202 	mvn.w	r2, #2
 80016c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8ed 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 80016dc:	e005      	b.n	80016ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8e0 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8ef 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d122      	bne.n	8001744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b04      	cmp	r3, #4
 800170a:	d11b      	bne.n	8001744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0204 	mvn.w	r2, #4
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8c3 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8b6 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f8c5 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b08      	cmp	r3, #8
 8001750:	d122      	bne.n	8001798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b08      	cmp	r3, #8
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0208 	mvn.w	r2, #8
 8001768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2204      	movs	r2, #4
 800176e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f899 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f88c 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f89b 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d122      	bne.n	80017ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d11b      	bne.n	80017ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0210 	mvn.w	r2, #16
 80017bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2208      	movs	r2, #8
 80017c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f86f 	bl	80018b6 <HAL_TIM_IC_CaptureCallback>
 80017d8:	e005      	b.n	80017e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f862 	bl	80018a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f871 	bl	80018c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10e      	bne.n	8001818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0201 	mvn.w	r2, #1
 8001810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe ff52 	bl	80006bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b80      	cmp	r3, #128	; 0x80
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001830:	2b80      	cmp	r3, #128	; 0x80
 8001832:	d107      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800183c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8bf 	bl	80019c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d107      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f835 	bl	80018da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b20      	cmp	r3, #32
 800187c:	d10e      	bne.n	800189c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b20      	cmp	r3, #32
 800188a:	d107      	bne.n	800189c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0220 	mvn.w	r2, #32
 8001894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f88a 	bl	80019b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a29      	ldr	r2, [pc, #164]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00b      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190a:	d007      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d003      	beq.n	800191c <TIM_Base_SetConfig+0x30>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d108      	bne.n	800192e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00b      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d007      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <TIM_Base_SetConfig+0xbc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d003      	beq.n	800194e <TIM_Base_SetConfig+0x62>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <TIM_Base_SetConfig+0xc0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <TIM_Base_SetConfig+0xb8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d103      	bne.n	8001994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	615a      	str	r2, [r3, #20]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800

080019b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019da:	f3ef 8305 	mrs	r3, IPSR
 80019de:	60bb      	str	r3, [r7, #8]
  return(result);
 80019e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ea:	607b      	str	r3, [r7, #4]
  return(result);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <osKernelInitialize+0x32>
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <osKernelInitialize+0x60>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d109      	bne.n	8001a0e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019fa:	f3ef 8311 	mrs	r3, BASEPRI
 80019fe:	603b      	str	r3, [r7, #0]
  return(result);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001a06:	f06f 0305 	mvn.w	r3, #5
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e00c      	b.n	8001a28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <osKernelInitialize+0x60>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <osKernelInitialize+0x60>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e002      	b.n	8001a28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a28:	68fb      	ldr	r3, [r7, #12]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000090 	.word	0x20000090

08001a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a3e:	f3ef 8305 	mrs	r3, IPSR
 8001a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <osKernelStart+0x32>
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <osKernelStart+0x64>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d109      	bne.n	8001a72 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a62:	603b      	str	r3, [r7, #0]
  return(result);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a6a:	f06f 0305 	mvn.w	r3, #5
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e00e      	b.n	8001a90 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <osKernelStart+0x64>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <osKernelStart+0x64>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a80:	f001 faba 	bl	8002ff8 <vTaskStartScheduler>
      stat = osOK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e002      	b.n	8001a90 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a90:	68fb      	ldr	r3, [r7, #12]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000090 	.word	0x20000090

08001aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b092      	sub	sp, #72	; 0x48
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ab0:	f3ef 8305 	mrs	r3, IPSR
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 8094 	bne.w	8001be6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001abe:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac2:	623b      	str	r3, [r7, #32]
  return(result);
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 808d 	bne.w	8001be6 <osThreadNew+0x146>
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <osThreadNew+0x150>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d106      	bne.n	8001ae2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8001ad8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 8082 	bne.w	8001be6 <osThreadNew+0x146>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d07e      	beq.n	8001be6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001aec:	2318      	movs	r3, #24
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001af0:	2300      	movs	r3, #0
 8001af2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001af4:	f107 031b 	add.w	r3, r7, #27
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d045      	beq.n	8001b92 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <osThreadNew+0x74>
        name = attr->name;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <osThreadNew+0x9a>
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	2b38      	cmp	r3, #56	; 0x38
 8001b2c:	d805      	bhi.n	8001b3a <osThreadNew+0x9a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <osThreadNew+0x9e>
        return (NULL);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e054      	b.n	8001be8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00e      	beq.n	8001b74 <osThreadNew+0xd4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2bbb      	cmp	r3, #187	; 0xbb
 8001b5c:	d90a      	bls.n	8001b74 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <osThreadNew+0xd4>
        mem = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b72:	e010      	b.n	8001b96 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10c      	bne.n	8001b96 <osThreadNew+0xf6>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <osThreadNew+0xf6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d104      	bne.n	8001b96 <osThreadNew+0xf6>
          mem = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b90:	e001      	b.n	8001b96 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d110      	bne.n	8001bbe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ba4:	9202      	str	r2, [sp, #8]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f001 f83c 	bl	8002c30 <xTaskCreateStatic>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e013      	b.n	8001be6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d110      	bne.n	8001be6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f001 f886 	bl	8002ce8 <xTaskCreate>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <osThreadNew+0x146>
          hTask = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001be6:	697b      	ldr	r3, [r7, #20]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000090 	.word	0x20000090

08001bf4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bfc:	f3ef 8305 	mrs	r3, IPSR
 8001c00:	613b      	str	r3, [r7, #16]
  return(result);
 8001c02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10f      	bne.n	8001c28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c08:	f3ef 8310 	mrs	r3, PRIMASK
 8001c0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <osDelay+0x34>
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <osDelay+0x58>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d109      	bne.n	8001c30 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8001c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <osDelay+0x3c>
    stat = osErrorISR;
 8001c28:	f06f 0305 	mvn.w	r3, #5
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e007      	b.n	8001c40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f001 f9a8 	bl	8002f90 <vTaskDelay>
    }
  }

  return (stat);
 8001c40:	697b      	ldr	r3, [r7, #20]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000090 	.word	0x20000090

08001c50 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c60:	f3ef 8305 	mrs	r3, IPSR
 8001c64:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d16f      	bne.n	8001d4c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c70:	617b      	str	r3, [r7, #20]
  return(result);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d169      	bne.n	8001d4c <osMessageQueueNew+0xfc>
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <osMessageQueueNew+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d105      	bne.n	8001c8c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c80:	f3ef 8311 	mrs	r3, BASEPRI
 8001c84:	613b      	str	r3, [r7, #16]
  return(result);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d15f      	bne.n	8001d4c <osMessageQueueNew+0xfc>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d05c      	beq.n	8001d4c <osMessageQueueNew+0xfc>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d059      	beq.n	8001d4c <osMessageQueueNew+0xfc>
    mem = -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d029      	beq.n	8001cf8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <osMessageQueueNew+0x82>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b4f      	cmp	r3, #79	; 0x4f
 8001cb2:	d90e      	bls.n	8001cd2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d302      	bcc.n	8001cd2 <osMessageQueueNew+0x82>
        mem = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	e014      	b.n	8001cfc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d110      	bne.n	8001cfc <osMessageQueueNew+0xac>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <osMessageQueueNew+0xac>
          mem = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	e001      	b.n	8001cfc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10b      	bne.n	8001d1a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	9100      	str	r1, [sp, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 fa53 	bl	80021bc <xQueueGenericCreateStatic>
 8001d16:	6278      	str	r0, [r7, #36]	; 0x24
 8001d18:	e008      	b.n	8001d2c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001d20:	2200      	movs	r2, #0
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 fac0 	bl	80022aa <xQueueGenericCreate>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e001      	b.n	8001d44 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001d44:	69f9      	ldr	r1, [r7, #28]
 8001d46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d48:	f000 ff16 	bl	8002b78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000090 	.word	0x20000090

08001d5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d74:	f3ef 8305 	mrs	r3, IPSR
 8001d78:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d7a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d80:	f3ef 8310 	mrs	r3, PRIMASK
 8001d84:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <osMessageQueuePut+0x44>
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <osMessageQueuePut+0xe0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d12e      	bne.n	8001df2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d94:	f3ef 8311 	mrs	r3, BASEPRI
 8001d98:	617b      	str	r3, [r7, #20]
  return(result);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d028      	beq.n	8001df2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <osMessageQueuePut+0x56>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <osMessageQueuePut+0x56>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8001db2:	f06f 0303 	mvn.w	r3, #3
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001db8:	e039      	b.n	8001e2e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001dbe:	f107 0210 	add.w	r2, r7, #16
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6a38      	ldr	r0, [r7, #32]
 8001dc8:	f000 fbce 	bl	8002568 <xQueueGenericSendFromISR>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d003      	beq.n	8001dda <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8001dd2:	f06f 0302 	mvn.w	r3, #2
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001dd8:	e029      	b.n	8001e2e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <osMessageQueuePut+0xd2>
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <osMessageQueuePut+0xe4>)
 8001de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001df0:	e01d      	b.n	8001e2e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <osMessageQueuePut+0xa2>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8001dfe:	f06f 0303 	mvn.w	r3, #3
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	e014      	b.n	8001e30 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001e06:	2300      	movs	r3, #0
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	6a38      	ldr	r0, [r7, #32]
 8001e0e:	f000 faad 	bl	800236c <xQueueGenericSend>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d00b      	beq.n	8001e30 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8001e1e:	f06f 0301 	mvn.w	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e004      	b.n	8001e30 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8001e26:	f06f 0302 	mvn.w	r3, #2
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2c:	e000      	b.n	8001e30 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001e2e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000090 	.word	0x20000090
 8001e40:	e000ed04 	.word	0xe000ed04

08001e44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5a:	f3ef 8305 	mrs	r3, IPSR
 8001e5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e60:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e66:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <osMessageQueueGet+0x42>
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <osMessageQueueGet+0xdc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d12e      	bne.n	8001ed8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8001e7e:	617b      	str	r3, [r7, #20]
  return(result);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d028      	beq.n	8001ed8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <osMessageQueueGet+0x54>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <osMessageQueueGet+0x54>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8001e98:	f06f 0303 	mvn.w	r3, #3
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001e9e:	e038      	b.n	8001f12 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f000 fcd3 	bl	8002858 <xQueueReceiveFromISR>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d003      	beq.n	8001ec0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8001eb8:	f06f 0302 	mvn.w	r3, #2
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ebe:	e028      	b.n	8001f12 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d025      	beq.n	8001f12 <osMessageQueueGet+0xce>
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <osMessageQueueGet+0xe0>)
 8001ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ed6:	e01c      	b.n	8001f12 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <osMessageQueueGet+0xa0>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8001ee4:	f06f 0303 	mvn.w	r3, #3
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	e013      	b.n	8001f14 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	6a38      	ldr	r0, [r7, #32]
 8001ef2:	f000 fbd1 	bl	8002698 <xQueueReceive>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d00b      	beq.n	8001f14 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8001f02:	f06f 0301 	mvn.w	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	e004      	b.n	8001f14 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8001f0a:	f06f 0302 	mvn.w	r3, #2
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e000      	b.n	8001f14 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f12:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000090 	.word	0x20000090
 8001f24:	e000ed04 	.word	0xe000ed04

08001f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <vApplicationGetIdleTaskMemory+0x28>)
 8001f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000094 	.word	0x20000094
 8001f54:	20000150 	.word	0x20000150

08001f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <vApplicationGetTimerTaskMemory+0x30>)
 8001f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000350 	.word	0x20000350
 8001f88:	2000040c 	.word	0x2000040c

08001f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f103 0208 	add.w	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f103 0208 	add.w	r2, r3, #8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f103 0208 	add.w	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203e:	d103      	bne.n	8002048 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e00c      	b.n	8002062 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3308      	adds	r3, #8
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e002      	b.n	8002056 <vListInsert+0x2e>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d2f6      	bcs.n	8002050 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6892      	ldr	r2, [r2, #8]
 80020ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6852      	ldr	r2, [r2, #4]
 80020b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d103      	bne.n	80020cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
	...

080020ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002112:	bf00      	nop
 8002114:	e7fe      	b.n	8002114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002116:	f002 f8b1 	bl	800427c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	441a      	add	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	3b01      	subs	r3, #1
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	441a      	add	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d114      	bne.n	8002196 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01a      	beq.n	80021aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3310      	adds	r3, #16
 8002178:	4618      	mov	r0, r3
 800217a:	f001 f9d9 	bl	8003530 <xTaskRemoveFromEventList>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d012      	beq.n	80021aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <xQueueGenericReset+0xcc>)
 8002186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	e009      	b.n	80021aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3310      	adds	r3, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fef6 	bl	8001f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3324      	adds	r3, #36	; 0x24
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fef1 	bl	8001f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021aa:	f002 f897 	bl	80042dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80021e2:	bf00      	nop
 80021e4:	e7fe      	b.n	80021e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021fe:	bf00      	nop
 8002200:	e7fe      	b.n	8002200 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <xQueueGenericCreateStatic+0x52>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <xQueueGenericCreateStatic+0x56>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <xQueueGenericCreateStatic+0x58>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	623b      	str	r3, [r7, #32]
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <xQueueGenericCreateStatic+0x7e>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <xQueueGenericCreateStatic+0x82>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <xQueueGenericCreateStatic+0x84>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	61fb      	str	r3, [r7, #28]
}
 8002256:	bf00      	nop
 8002258:	e7fe      	b.n	8002258 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800225a:	2350      	movs	r3, #80	; 0x50
 800225c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d00a      	beq.n	800227a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	61bb      	str	r3, [r7, #24]
}
 8002276:	bf00      	nop
 8002278:	e7fe      	b.n	8002278 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800228c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f843 	bl	8002326 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b08a      	sub	sp, #40	; 0x28
 80022ae:	af02      	add	r7, sp, #8
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10a      	bne.n	80022d4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	613b      	str	r3, [r7, #16]
}
 80022d0:	bf00      	nop
 80022d2:	e7fe      	b.n	80022d2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e004      	b.n	80022ea <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3350      	adds	r3, #80	; 0x50
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 f8c4 	bl	800447c <pvPortMalloc>
 80022f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00f      	beq.n	800231c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	3350      	adds	r3, #80	; 0x50
 8002300:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800230a:	79fa      	ldrb	r2, [r7, #7]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f805 	bl	8002326 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800231c:	69bb      	ldr	r3, [r7, #24]
	}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e002      	b.n	8002348 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002354:	2101      	movs	r1, #1
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	f7ff fec8 	bl	80020ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <xQueueGenericSend+0x32>
	__asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800239a:	bf00      	nop
 800239c:	e7fe      	b.n	800239c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <xQueueGenericSend+0x40>
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <xQueueGenericSend+0x44>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <xQueueGenericSend+0x46>
 80023b0:	2300      	movs	r3, #0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <xQueueGenericSend+0x60>
	__asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023c8:	bf00      	nop
 80023ca:	e7fe      	b.n	80023ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d103      	bne.n	80023da <xQueueGenericSend+0x6e>
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <xQueueGenericSend+0x72>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <xQueueGenericSend+0x74>
 80023de:	2300      	movs	r3, #0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericSend+0x8e>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	623b      	str	r3, [r7, #32]
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023fa:	f001 fa5f 	bl	80038bc <xTaskGetSchedulerState>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <xQueueGenericSend+0x9e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <xQueueGenericSend+0xa2>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <xQueueGenericSend+0xa4>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xQueueGenericSend+0xbe>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	61fb      	str	r3, [r7, #28]
}
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800242a:	f001 ff27 	bl	800427c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <xQueueGenericSend+0xd4>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d129      	bne.n	8002494 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002446:	f000 fa87 	bl	8002958 <prvCopyDataToQueue>
 800244a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	3324      	adds	r3, #36	; 0x24
 8002458:	4618      	mov	r0, r3
 800245a:	f001 f869 	bl	8003530 <xTaskRemoveFromEventList>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002464:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <xQueueGenericSend+0x1f8>)
 8002466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	e00a      	b.n	800248c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800247c:	4b39      	ldr	r3, [pc, #228]	; (8002564 <xQueueGenericSend+0x1f8>)
 800247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800248c:	f001 ff26 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8002490:	2301      	movs	r3, #1
 8002492:	e063      	b.n	800255c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800249a:	f001 ff1f 	bl	80042dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	e05c      	b.n	800255c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f8a3 	bl	80035f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024b6:	f001 ff11 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024ba:	f000 fe0d 	bl	80030d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024be:	f001 fedd 	bl	800427c <vPortEnterCritical>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ce:	d103      	bne.n	80024d8 <xQueueGenericSend+0x16c>
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e4:	d103      	bne.n	80024ee <xQueueGenericSend+0x182>
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ee:	f001 fef5 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024f2:	1d3a      	adds	r2, r7, #4
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 f892 	bl	8003624 <xTaskCheckForTimeOut>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d124      	bne.n	8002550 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002508:	f000 fb1e 	bl	8002b48 <prvIsQueueFull>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d018      	beq.n	8002544 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	3310      	adds	r3, #16
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f000 ffb8 	bl	8003490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002522:	f000 faa9 	bl	8002a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002526:	f000 fde5 	bl	80030f4 <xTaskResumeAll>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f af7c 	bne.w	800242a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <xQueueGenericSend+0x1f8>)
 8002534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	e772      	b.n	800242a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002546:	f000 fa97 	bl	8002a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800254a:	f000 fdd3 	bl	80030f4 <xTaskResumeAll>
 800254e:	e76c      	b.n	800242a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002552:	f000 fa91 	bl	8002a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002556:	f000 fdcd 	bl	80030f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800255a:	2300      	movs	r3, #0
		}
	}
}
 800255c:	4618      	mov	r0, r3
 800255e:	3738      	adds	r7, #56	; 0x38
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <xQueueGenericSendFromISR+0x3c>
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <xQueueGenericSendFromISR+0x40>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <xQueueGenericSendFromISR+0x42>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	623b      	str	r3, [r7, #32]
}
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d103      	bne.n	80025d2 <xQueueGenericSendFromISR+0x6a>
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <xQueueGenericSendFromISR+0x6e>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericSendFromISR+0x70>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	61fb      	str	r3, [r7, #28]
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025f2:	f001 ff05 	bl	8004400 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80025f6:	f3ef 8211 	mrs	r2, BASEPRI
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	61ba      	str	r2, [r7, #24]
 800260c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800260e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <xQueueGenericSendFromISR+0xbc>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d12c      	bne.n	800267e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800262a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002634:	f000 f990 	bl	8002958 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002638:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002640:	d112      	bne.n	8002668 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	3324      	adds	r3, #36	; 0x24
 800264e:	4618      	mov	r0, r3
 8002650:	f000 ff6e 	bl	8003530 <xTaskRemoveFromEventList>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002668:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800266c:	3301      	adds	r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	b25a      	sxtb	r2, r3
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002678:	2301      	movs	r3, #1
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800267c:	e001      	b.n	8002682 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800268c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002690:	4618      	mov	r0, r3
 8002692:	3738      	adds	r7, #56	; 0x38
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <xQueueReceive+0x30>
	__asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	623b      	str	r3, [r7, #32]
}
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <xQueueReceive+0x3e>
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueReceive+0x42>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueReceive+0x44>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueReceive+0x5e>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61fb      	str	r3, [r7, #28]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026f6:	f001 f8e1 	bl	80038bc <xTaskGetSchedulerState>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <xQueueReceive+0x6e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <xQueueReceive+0x72>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <xQueueReceive+0x74>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueReceive+0x8e>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002726:	f001 fda9 	bl	800427c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01f      	beq.n	8002776 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273a:	f000 f977 	bl	8002a2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00f      	beq.n	800276e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	3310      	adds	r3, #16
 8002752:	4618      	mov	r0, r3
 8002754:	f000 feec 	bl	8003530 <xTaskRemoveFromEventList>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <xQueueReceive+0x1bc>)
 8002760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800276e:	f001 fdb5 	bl	80042dc <vPortExitCritical>
				return pdPASS;
 8002772:	2301      	movs	r3, #1
 8002774:	e069      	b.n	800284a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800277c:	f001 fdae 	bl	80042dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002780:	2300      	movs	r3, #0
 8002782:	e062      	b.n	800284a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f000 ff32 	bl	80035f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002798:	f001 fda0 	bl	80042dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800279c:	f000 fc9c 	bl	80030d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027a0:	f001 fd6c 	bl	800427c <vPortEnterCritical>
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b0:	d103      	bne.n	80027ba <xQueueReceive+0x122>
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c6:	d103      	bne.n	80027d0 <xQueueReceive+0x138>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d0:	f001 fd84 	bl	80042dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d4:	1d3a      	adds	r2, r7, #4
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 ff21 	bl	8003624 <xTaskCheckForTimeOut>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d123      	bne.n	8002830 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f997 	bl	8002b1c <prvIsQueueEmpty>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	3324      	adds	r3, #36	; 0x24
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fe47 	bl	8003490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002804:	f000 f938 	bl	8002a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002808:	f000 fc74 	bl	80030f4 <xTaskResumeAll>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d189      	bne.n	8002726 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <xQueueReceive+0x1bc>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	e780      	b.n	8002726 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002826:	f000 f927 	bl	8002a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282a:	f000 fc63 	bl	80030f4 <xTaskResumeAll>
 800282e:	e77a      	b.n	8002726 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f921 	bl	8002a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002836:	f000 fc5d 	bl	80030f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800283a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283c:	f000 f96e 	bl	8002b1c <prvIsQueueEmpty>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f43f af6f 	beq.w	8002726 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800284a:	4618      	mov	r0, r3
 800284c:	3730      	adds	r7, #48	; 0x30
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	623b      	str	r3, [r7, #32]
}
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <xQueueReceiveFromISR+0x3a>
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <xQueueReceiveFromISR+0x3e>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueReceiveFromISR+0x40>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	61fb      	str	r3, [r7, #28]
}
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028b2:	f001 fda5 	bl	8004400 <vPortValidateInterruptPriority>
	__asm volatile
 80028b6:	f3ef 8211 	mrs	r2, BASEPRI
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	61ba      	str	r2, [r7, #24]
 80028cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80028ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d02f      	beq.n	800293e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ec:	f000 f89e 	bl	8002a2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80028f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002900:	d112      	bne.n	8002928 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	3310      	adds	r3, #16
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fe0e 	bl	8003530 <xTaskRemoveFromEventList>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292c:	3301      	adds	r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002938:	2301      	movs	r3, #1
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	e001      	b.n	8002942 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f383 8811 	msr	BASEPRI, r3
}
 800294c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002950:	4618      	mov	r0, r3
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d14d      	bne.n	8002a1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 ffb8 	bl	80038f8 <xTaskPriorityDisinherit>
 8002988:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	e043      	b.n	8002a1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d119      	bne.n	80029cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6898      	ldr	r0, [r3, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	461a      	mov	r2, r3
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	f001 ff68 	bl	8004878 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	441a      	add	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d32b      	bcc.n	8002a1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	e026      	b.n	8002a1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68d8      	ldr	r0, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	461a      	mov	r2, r3
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	f001 ff4e 	bl	8004878 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	425b      	negs	r3, r3
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	425b      	negs	r3, r3
 8002a02:	441a      	add	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d105      	bne.n	8002a1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a22:	697b      	ldr	r3, [r7, #20]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	441a      	add	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d303      	bcc.n	8002a60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68d9      	ldr	r1, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f001 ff04 	bl	8004878 <memcpy>
	}
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a80:	f001 fbfc 	bl	800427c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a8c:	e011      	b.n	8002ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d012      	beq.n	8002abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fd48 	bl	8003530 <xTaskRemoveFromEventList>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002aa6:	f000 fe1f 	bl	80036e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	dce9      	bgt.n	8002a8e <prvUnlockQueue+0x16>
 8002aba:	e000      	b.n	8002abe <prvUnlockQueue+0x46>
					break;
 8002abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ac6:	f001 fc09 	bl	80042dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002aca:	f001 fbd7 	bl	800427c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ad6:	e011      	b.n	8002afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3310      	adds	r3, #16
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fd23 	bl	8003530 <xTaskRemoveFromEventList>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002af0:	f000 fdfa 	bl	80036e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002af4:	7bbb      	ldrb	r3, [r7, #14]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	dce9      	bgt.n	8002ad8 <prvUnlockQueue+0x60>
 8002b04:	e000      	b.n	8002b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b10:	f001 fbe4 	bl	80042dc <vPortExitCritical>
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b24:	f001 fbaa 	bl	800427c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e001      	b.n	8002b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b3a:	f001 fbcf 	bl	80042dc <vPortExitCritical>

	return xReturn;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b50:	f001 fb94 	bl	800427c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d102      	bne.n	8002b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e001      	b.n	8002b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b6a:	f001 fbb7 	bl	80042dc <vPortExitCritical>

	return xReturn;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e014      	b.n	8002bb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <vQueueAddToRegistry+0x4c>)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b94:	490b      	ldr	r1, [pc, #44]	; (8002bc4 <vQueueAddToRegistry+0x4c>)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <vQueueAddToRegistry+0x4c>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002baa:	e006      	b.n	8002bba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	d9e7      	bls.n	8002b88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20001ac8 	.word	0x20001ac8

08002bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bd8:	f001 fb50 	bl	800427c <vPortEnterCritical>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be8:	d103      	bne.n	8002bf2 <vQueueWaitForMessageRestricted+0x2a>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfe:	d103      	bne.n	8002c08 <vQueueWaitForMessageRestricted+0x40>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c08:	f001 fb68 	bl	80042dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3324      	adds	r3, #36	; 0x24
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fc5b 	bl	80034d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff28 	bl	8002a78 <prvUnlockQueue>
	}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	623b      	str	r3, [r7, #32]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61fb      	str	r3, [r7, #28]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c76:	23bc      	movs	r3, #188	; 0xbc
 8002c78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2bbc      	cmp	r3, #188	; 0xbc
 8002c7e:	d00a      	beq.n	8002c96 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61bb      	str	r3, [r7, #24]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01e      	beq.n	8002cda <xTaskCreateStatic+0xaa>
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01b      	beq.n	8002cda <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9303      	str	r3, [sp, #12]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	9302      	str	r3, [sp, #8]
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f851 	bl	8002d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cd4:	f000 f8ec 	bl	8002eb0 <prvAddNewTaskToReadyList>
 8002cd8:	e001      	b.n	8002cde <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cde:	697b      	ldr	r3, [r7, #20]
	}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af04      	add	r7, sp, #16
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 fbbd 	bl	800447c <pvPortMalloc>
 8002d02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00e      	beq.n	8002d28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d0a:	20bc      	movs	r0, #188	; 0xbc
 8002d0c:	f001 fbb6 	bl	800447c <pvPortMalloc>
 8002d10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1e:	e005      	b.n	8002d2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d20:	6978      	ldr	r0, [r7, #20]
 8002d22:	f001 fc6f 	bl	8004604 <vPortFree>
 8002d26:	e001      	b.n	8002d2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d017      	beq.n	8002d62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f80f 	bl	8002d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d56:	69f8      	ldr	r0, [r7, #28]
 8002d58:	f000 f8aa 	bl	8002eb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e002      	b.n	8002d68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d68:	69bb      	ldr	r3, [r7, #24]
	}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	21a5      	movs	r1, #165	; 0xa5
 8002d8e:	f001 fd81 	bl	8004894 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f023 0307 	bic.w	r3, r3, #7
 8002daa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	617b      	str	r3, [r7, #20]
}
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e012      	b.n	8002df8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	7819      	ldrb	r1, [r3, #0]
 8002dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	3334      	adds	r3, #52	; 0x34
 8002de2:	460a      	mov	r2, r1
 8002de4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d9e9      	bls.n	8002dd2 <prvInitialiseNewTask+0x5e>
 8002dfe:	e000      	b.n	8002e02 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002e00:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	2b37      	cmp	r3, #55	; 0x37
 8002e0e:	d901      	bls.n	8002e14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e10:	2337      	movs	r3, #55	; 0x37
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	2200      	movs	r2, #0
 8002e24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f8cd 	bl	8001fca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	3318      	adds	r3, #24
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f8c8 	bl	8001fca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	3354      	adds	r3, #84	; 0x54
 8002e64:	2260      	movs	r2, #96	; 0x60
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fd13 	bl	8004894 <memset>
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <prvInitialiseNewTask+0x130>)
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <prvInitialiseNewTask+0x134>)
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <prvInitialiseNewTask+0x138>)
 8002e7e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	68f9      	ldr	r1, [r7, #12]
 8002e84:	69b8      	ldr	r0, [r7, #24]
 8002e86:	f001 f90b 	bl	80040a0 <pxPortInitialiseStack>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	08004c08 	.word	0x08004c08
 8002ea8:	08004c28 	.word	0x08004c28
 8002eac:	08004be8 	.word	0x08004be8

08002eb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002eb8:	f001 f9e0 	bl	800427c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <prvAddNewTaskToReadyList+0xc4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <prvAddNewTaskToReadyList+0xc4>)
 8002ec4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ece:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <prvAddNewTaskToReadyList+0xc4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d110      	bne.n	8002efe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002edc:	f000 fc28 	bl	8003730 <prvInitialiseTaskLists>
 8002ee0:	e00d      	b.n	8002efe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <prvAddNewTaskToReadyList+0xcc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d802      	bhi.n	8002efe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <prvAddNewTaskToReadyList+0xd0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <prvAddNewTaskToReadyList+0xd0>)
 8002f06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <prvAddNewTaskToReadyList+0xd0>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <prvAddNewTaskToReadyList+0xd4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d903      	bls.n	8002f24 <prvAddNewTaskToReadyList+0x74>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <prvAddNewTaskToReadyList+0xd4>)
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <prvAddNewTaskToReadyList+0xd8>)
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7ff f851 	bl	8001fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f40:	f001 f9cc 	bl	80042dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <prvAddNewTaskToReadyList+0xcc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d207      	bcs.n	8002f6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <prvAddNewTaskToReadyList+0xdc>)
 8002f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000ce0 	.word	0x20000ce0
 8002f78:	2000080c 	.word	0x2000080c
 8002f7c:	20000cec 	.word	0x20000cec
 8002f80:	20000cfc 	.word	0x20000cfc
 8002f84:	20000ce8 	.word	0x20000ce8
 8002f88:	20000810 	.word	0x20000810
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <vTaskDelay+0x60>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <vTaskDelay+0x30>
	__asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	60bb      	str	r3, [r7, #8]
}
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fc0:	f000 f88a 	bl	80030d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fd04 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fcc:	f000 f892 	bl	80030f4 <xTaskResumeAll>
 8002fd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <vTaskDelay+0x64>)
 8002fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000d08 	.word	0x20000d08
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003006:	463a      	mov	r2, r7
 8003008:	1d39      	adds	r1, r7, #4
 800300a:	f107 0308 	add.w	r3, r7, #8
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe ff8a 	bl	8001f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	9202      	str	r2, [sp, #8]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	460a      	mov	r2, r1
 8003026:	4924      	ldr	r1, [pc, #144]	; (80030b8 <vTaskStartScheduler+0xc0>)
 8003028:	4824      	ldr	r0, [pc, #144]	; (80030bc <vTaskStartScheduler+0xc4>)
 800302a:	f7ff fe01 	bl	8002c30 <xTaskCreateStatic>
 800302e:	4603      	mov	r3, r0
 8003030:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <vTaskStartScheduler+0xc8>)
 8003032:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <vTaskStartScheduler+0xc8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800303c:	2301      	movs	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e001      	b.n	8003046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d102      	bne.n	8003052 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800304c:	f000 fd16 	bl	8003a7c <xTimerCreateTimerTask>
 8003050:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11b      	bne.n	8003090 <vTaskStartScheduler+0x98>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	613b      	str	r3, [r7, #16]
}
 800306a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <vTaskStartScheduler+0xcc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3354      	adds	r3, #84	; 0x54
 8003072:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <vTaskStartScheduler+0xd0>)
 8003074:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <vTaskStartScheduler+0xd4>)
 8003078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800307c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <vTaskStartScheduler+0xd8>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <vTaskStartScheduler+0xdc>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800308a:	f001 f885 	bl	8004198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800308e:	e00e      	b.n	80030ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003096:	d10a      	bne.n	80030ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60fb      	str	r3, [r7, #12]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vTaskStartScheduler+0xb4>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	08004af8 	.word	0x08004af8
 80030bc:	08003701 	.word	0x08003701
 80030c0:	20000d04 	.word	0x20000d04
 80030c4:	2000080c 	.word	0x2000080c
 80030c8:	20000010 	.word	0x20000010
 80030cc:	20000d00 	.word	0x20000d00
 80030d0:	20000cec 	.word	0x20000cec
 80030d4:	20000ce4 	.word	0x20000ce4

080030d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <vTaskSuspendAll+0x18>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <vTaskSuspendAll+0x18>)
 80030e4:	6013      	str	r3, [r2, #0]
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000d08 	.word	0x20000d08

080030f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003102:	4b42      	ldr	r3, [pc, #264]	; (800320c <xTaskResumeAll+0x118>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <xTaskResumeAll+0x2c>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	603b      	str	r3, [r7, #0]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003120:	f001 f8ac 	bl	800427c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003124:	4b39      	ldr	r3, [pc, #228]	; (800320c <xTaskResumeAll+0x118>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	4a38      	ldr	r2, [pc, #224]	; (800320c <xTaskResumeAll+0x118>)
 800312c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <xTaskResumeAll+0x118>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d162      	bne.n	80031fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <xTaskResumeAll+0x11c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d05e      	beq.n	80031fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800313e:	e02f      	b.n	80031a0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003140:	4b34      	ldr	r3, [pc, #208]	; (8003214 <xTaskResumeAll+0x120>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3318      	adds	r3, #24
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe ffa3 	bl	8002098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3304      	adds	r3, #4
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe ff9e 	bl	8002098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <xTaskResumeAll+0x124>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d903      	bls.n	8003170 <xTaskResumeAll+0x7c>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <xTaskResumeAll+0x124>)
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <xTaskResumeAll+0x128>)
 800317e:	441a      	add	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f7fe ff2b 	bl	8001fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <xTaskResumeAll+0x12c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <xTaskResumeAll+0x130>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a0:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <xTaskResumeAll+0x120>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1cb      	bne.n	8003140 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031ae:	f000 fb61 	bl	8003874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <xTaskResumeAll+0x134>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031be:	f000 f845 	bl	800324c <xTaskIncrementTick>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <xTaskResumeAll+0x130>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f1      	bne.n	80031be <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <xTaskResumeAll+0x134>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <xTaskResumeAll+0x130>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <xTaskResumeAll+0x138>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031fc:	f001 f86e 	bl	80042dc <vPortExitCritical>

	return xAlreadyYielded;
 8003200:	68bb      	ldr	r3, [r7, #8]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000d08 	.word	0x20000d08
 8003210:	20000ce0 	.word	0x20000ce0
 8003214:	20000ca0 	.word	0x20000ca0
 8003218:	20000ce8 	.word	0x20000ce8
 800321c:	20000810 	.word	0x20000810
 8003220:	2000080c 	.word	0x2000080c
 8003224:	20000cf4 	.word	0x20000cf4
 8003228:	20000cf0 	.word	0x20000cf0
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <xTaskGetTickCount+0x18>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800323c:	687b      	ldr	r3, [r7, #4]
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000ce4 	.word	0x20000ce4

0800324c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <xTaskIncrementTick+0x150>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 808e 	bne.w	800337c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003260:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <xTaskIncrementTick+0x154>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003268:	4a4d      	ldr	r2, [pc, #308]	; (80033a0 <xTaskIncrementTick+0x154>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d120      	bne.n	80032b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003274:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <xTaskIncrementTick+0x158>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <xTaskIncrementTick+0x48>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	603b      	str	r3, [r7, #0]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xTaskIncrementTick+0x46>
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <xTaskIncrementTick+0x158>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <xTaskIncrementTick+0x15c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a41      	ldr	r2, [pc, #260]	; (80033a4 <xTaskIncrementTick+0x158>)
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4a41      	ldr	r2, [pc, #260]	; (80033a8 <xTaskIncrementTick+0x15c>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b40      	ldr	r3, [pc, #256]	; (80033ac <xTaskIncrementTick+0x160>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a3f      	ldr	r2, [pc, #252]	; (80033ac <xTaskIncrementTick+0x160>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	f000 fadf 	bl	8003874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032b6:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <xTaskIncrementTick+0x164>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d34e      	bcc.n	800335e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <xTaskIncrementTick+0x158>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <xTaskIncrementTick+0x82>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xTaskIncrementTick+0x84>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <xTaskIncrementTick+0x164>)
 80032d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032da:	601a      	str	r2, [r3, #0]
					break;
 80032dc:	e03f      	b.n	800335e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <xTaskIncrementTick+0x158>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d203      	bcs.n	80032fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032f6:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <xTaskIncrementTick+0x164>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6013      	str	r3, [r2, #0]
						break;
 80032fc:	e02f      	b.n	800335e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3304      	adds	r3, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fec8 	bl	8002098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3318      	adds	r3, #24
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe febf 	bl	8002098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <xTaskIncrementTick+0x168>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d903      	bls.n	800332e <xTaskIncrementTick+0xe2>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <xTaskIncrementTick+0x168>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <xTaskIncrementTick+0x16c>)
 800333c:	441a      	add	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f7fe fe4c 	bl	8001fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <xTaskIncrementTick+0x170>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d3b3      	bcc.n	80032c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800335c:	e7b0      	b.n	80032c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <xTaskIncrementTick+0x170>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	4914      	ldr	r1, [pc, #80]	; (80033b8 <xTaskIncrementTick+0x16c>)
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d907      	bls.n	8003386 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e004      	b.n	8003386 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <xTaskIncrementTick+0x174>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <xTaskIncrementTick+0x174>)
 8003384:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <xTaskIncrementTick+0x178>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800338e:	2301      	movs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000d08 	.word	0x20000d08
 80033a0:	20000ce4 	.word	0x20000ce4
 80033a4:	20000c98 	.word	0x20000c98
 80033a8:	20000c9c 	.word	0x20000c9c
 80033ac:	20000cf8 	.word	0x20000cf8
 80033b0:	20000d00 	.word	0x20000d00
 80033b4:	20000ce8 	.word	0x20000ce8
 80033b8:	20000810 	.word	0x20000810
 80033bc:	2000080c 	.word	0x2000080c
 80033c0:	20000cf0 	.word	0x20000cf0
 80033c4:	20000cf4 	.word	0x20000cf4

080033c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <vTaskSwitchContext+0xb0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <vTaskSwitchContext+0xb4>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033dc:	e046      	b.n	800346c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <vTaskSwitchContext+0xb4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033e4:	4b26      	ldr	r3, [pc, #152]	; (8003480 <vTaskSwitchContext+0xb8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e010      	b.n	800340e <vTaskSwitchContext+0x46>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <vTaskSwitchContext+0x40>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	607b      	str	r3, [r7, #4]
}
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <vTaskSwitchContext+0x3e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3b01      	subs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	491d      	ldr	r1, [pc, #116]	; (8003484 <vTaskSwitchContext+0xbc>)
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0e4      	beq.n	80033ec <vTaskSwitchContext+0x24>
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <vTaskSwitchContext+0xbc>)
 800342e:	4413      	add	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3308      	adds	r3, #8
 8003444:	429a      	cmp	r2, r3
 8003446:	d104      	bne.n	8003452 <vTaskSwitchContext+0x8a>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <vTaskSwitchContext+0xc0>)
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4a08      	ldr	r2, [pc, #32]	; (8003480 <vTaskSwitchContext+0xb8>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <vTaskSwitchContext+0xc0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3354      	adds	r3, #84	; 0x54
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vTaskSwitchContext+0xc4>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000d08 	.word	0x20000d08
 800347c:	20000cf4 	.word	0x20000cf4
 8003480:	20000ce8 	.word	0x20000ce8
 8003484:	20000810 	.word	0x20000810
 8003488:	2000080c 	.word	0x2000080c
 800348c:	20000010 	.word	0x20000010

08003490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	60fb      	str	r3, [r7, #12]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <vTaskPlaceOnEventList+0x44>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3318      	adds	r3, #24
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe fdb2 	bl	8002028 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034c4:	2101      	movs	r1, #1
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f000 fa84 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000080c 	.word	0x2000080c

080034d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	617b      	str	r3, [r7, #20]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <vTaskPlaceOnEventListRestricted+0x54>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3318      	adds	r3, #24
 8003506:	4619      	mov	r1, r3
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7fe fd6a 	bl	8001fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003518:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68b8      	ldr	r0, [r7, #8]
 800351e:	f000 fa59 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
	}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	2000080c 	.word	0x2000080c

08003530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	60fb      	str	r3, [r7, #12]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	3318      	adds	r3, #24
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe fd99 	bl	8002098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <xTaskRemoveFromEventList+0xb0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d11d      	bne.n	80035aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3304      	adds	r3, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fd90 	bl	8002098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <xTaskRemoveFromEventList+0xb4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d903      	bls.n	800358c <xTaskRemoveFromEventList+0x5c>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <xTaskRemoveFromEventList+0xb4>)
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <xTaskRemoveFromEventList+0xb8>)
 800359a:	441a      	add	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f7fe fd1d 	bl	8001fe2 <vListInsertEnd>
 80035a8:	e005      	b.n	80035b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3318      	adds	r3, #24
 80035ae:	4619      	mov	r1, r3
 80035b0:	480e      	ldr	r0, [pc, #56]	; (80035ec <xTaskRemoveFromEventList+0xbc>)
 80035b2:	f7fe fd16 	bl	8001fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <xTaskRemoveFromEventList+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d905      	bls.n	80035d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <xTaskRemoveFromEventList+0xc4>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e001      	b.n	80035d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80035d4:	697b      	ldr	r3, [r7, #20]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000d08 	.word	0x20000d08
 80035e4:	20000ce8 	.word	0x20000ce8
 80035e8:	20000810 	.word	0x20000810
 80035ec:	20000ca0 	.word	0x20000ca0
 80035f0:	2000080c 	.word	0x2000080c
 80035f4:	20000cf4 	.word	0x20000cf4

080035f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <vTaskInternalSetTimeOutState+0x24>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <vTaskInternalSetTimeOutState+0x28>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	605a      	str	r2, [r3, #4]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000cf8 	.word	0x20000cf8
 8003620:	20000ce4 	.word	0x20000ce4

08003624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	613b      	str	r3, [r7, #16]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
}
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003666:	f000 fe09 	bl	800427c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <xTaskCheckForTimeOut+0xbc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003682:	d102      	bne.n	800368a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e023      	b.n	80036d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <xTaskCheckForTimeOut+0xc0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d007      	beq.n	80036a6 <xTaskCheckForTimeOut+0x82>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e015      	b.n	80036d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d20b      	bcs.n	80036c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad2      	subs	r2, r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff9b 	bl	80035f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e004      	b.n	80036d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036d2:	f000 fe03 	bl	80042dc <vPortExitCritical>

	return xReturn;
 80036d6:	69fb      	ldr	r3, [r7, #28]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000ce4 	.word	0x20000ce4
 80036e4:	20000cf8 	.word	0x20000cf8

080036e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <vTaskMissedYield+0x14>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000cf4 	.word	0x20000cf4

08003700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003708:	f000 f852 	bl	80037b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <prvIdleTask+0x28>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d9f9      	bls.n	8003708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <prvIdleTask+0x2c>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003724:	e7f0      	b.n	8003708 <prvIdleTask+0x8>
 8003726:	bf00      	nop
 8003728:	20000810 	.word	0x20000810
 800372c:	e000ed04 	.word	0xe000ed04

08003730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	e00c      	b.n	8003756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4a12      	ldr	r2, [pc, #72]	; (8003790 <prvInitialiseTaskLists+0x60>)
 8003748:	4413      	add	r3, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fc1e 	bl	8001f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b37      	cmp	r3, #55	; 0x37
 800375a:	d9ef      	bls.n	800373c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800375c:	480d      	ldr	r0, [pc, #52]	; (8003794 <prvInitialiseTaskLists+0x64>)
 800375e:	f7fe fc15 	bl	8001f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003762:	480d      	ldr	r0, [pc, #52]	; (8003798 <prvInitialiseTaskLists+0x68>)
 8003764:	f7fe fc12 	bl	8001f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <prvInitialiseTaskLists+0x6c>)
 800376a:	f7fe fc0f 	bl	8001f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800376e:	480c      	ldr	r0, [pc, #48]	; (80037a0 <prvInitialiseTaskLists+0x70>)
 8003770:	f7fe fc0c 	bl	8001f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003774:	480b      	ldr	r0, [pc, #44]	; (80037a4 <prvInitialiseTaskLists+0x74>)
 8003776:	f7fe fc09 	bl	8001f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <prvInitialiseTaskLists+0x78>)
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <prvInitialiseTaskLists+0x64>)
 800377e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <prvInitialiseTaskLists+0x7c>)
 8003782:	4a05      	ldr	r2, [pc, #20]	; (8003798 <prvInitialiseTaskLists+0x68>)
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000810 	.word	0x20000810
 8003794:	20000c70 	.word	0x20000c70
 8003798:	20000c84 	.word	0x20000c84
 800379c:	20000ca0 	.word	0x20000ca0
 80037a0:	20000cb4 	.word	0x20000cb4
 80037a4:	20000ccc 	.word	0x20000ccc
 80037a8:	20000c98 	.word	0x20000c98
 80037ac:	20000c9c 	.word	0x20000c9c

080037b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b6:	e019      	b.n	80037ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037b8:	f000 fd60 	bl	800427c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <prvCheckTasksWaitingTermination+0x50>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fc65 	bl	8002098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <prvCheckTasksWaitingTermination+0x54>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <prvCheckTasksWaitingTermination+0x54>)
 80037d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <prvCheckTasksWaitingTermination+0x58>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3b01      	subs	r3, #1
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <prvCheckTasksWaitingTermination+0x58>)
 80037e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037e2:	f000 fd7b 	bl	80042dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f810 	bl	800380c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <prvCheckTasksWaitingTermination+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e1      	bne.n	80037b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000cb4 	.word	0x20000cb4
 8003804:	20000ce0 	.word	0x20000ce0
 8003808:	20000cc8 	.word	0x20000cc8

0800380c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3354      	adds	r3, #84	; 0x54
 8003818:	4618      	mov	r0, r3
 800381a:	f001 f851 	bl	80048c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003824:	2b00      	cmp	r3, #0
 8003826:	d108      	bne.n	800383a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fee9 	bl	8004604 <vPortFree>
				vPortFree( pxTCB );
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fee6 	bl	8004604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003838:	e018      	b.n	800386c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003840:	2b01      	cmp	r3, #1
 8003842:	d103      	bne.n	800384c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fedd 	bl	8004604 <vPortFree>
	}
 800384a:	e00f      	b.n	800386c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003852:	2b02      	cmp	r3, #2
 8003854:	d00a      	beq.n	800386c <prvDeleteTCB+0x60>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	60fb      	str	r3, [r7, #12]
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <prvDeleteTCB+0x5e>
	}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <prvResetNextTaskUnblockTime+0x40>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <prvResetNextTaskUnblockTime+0x14>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <prvResetNextTaskUnblockTime+0x16>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <prvResetNextTaskUnblockTime+0x44>)
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003894:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003896:	e008      	b.n	80038aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <prvResetNextTaskUnblockTime+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <prvResetNextTaskUnblockTime+0x44>)
 80038a8:	6013      	str	r3, [r2, #0]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000c98 	.word	0x20000c98
 80038b8:	20000d00 	.word	0x20000d00

080038bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <xTaskGetSchedulerState+0x34>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ca:	2301      	movs	r3, #1
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	e008      	b.n	80038e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <xTaskGetSchedulerState+0x38>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038d8:	2302      	movs	r3, #2
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	e001      	b.n	80038e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038e2:	687b      	ldr	r3, [r7, #4]
	}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000cec 	.word	0x20000cec
 80038f4:	20000d08 	.word	0x20000d08

080038f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d056      	beq.n	80039bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800390e:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <xTaskPriorityDisinherit+0xd0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	429a      	cmp	r2, r3
 8003916:	d00a      	beq.n	800392e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60fb      	str	r3, [r7, #12]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60bb      	str	r3, [r7, #8]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	429a      	cmp	r2, r3
 8003960:	d02c      	beq.n	80039bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	d128      	bne.n	80039bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3304      	adds	r3, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fb92 	bl	8002098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <xTaskPriorityDisinherit+0xd4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d903      	bls.n	800399c <xTaskPriorityDisinherit+0xa4>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <xTaskPriorityDisinherit+0xd4>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <xTaskPriorityDisinherit+0xd8>)
 80039aa:	441a      	add	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f7fe fb15 	bl	8001fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039bc:	697b      	ldr	r3, [r7, #20]
	}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000080c 	.word	0x2000080c
 80039cc:	20000ce8 	.word	0x20000ce8
 80039d0:	20000810 	.word	0x20000810

080039d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <prvAddCurrentTaskToDelayedList+0x90>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x94>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fb54 	bl	8002098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f6:	d10a      	bne.n	8003a0e <prvAddCurrentTaskToDelayedList+0x3a>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fe:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4819      	ldr	r0, [pc, #100]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x98>)
 8003a08:	f7fe faeb 	bl	8001fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a0c:	e026      	b.n	8003a5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d209      	bcs.n	8003a3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7fe faf8 	bl	8002028 <vListInsert>
}
 8003a38:	e010      	b.n	8003a5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f7fe faee 	bl	8002028 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d202      	bcs.n	8003a5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000ce4 	.word	0x20000ce4
 8003a68:	2000080c 	.word	0x2000080c
 8003a6c:	20000ccc 	.word	0x20000ccc
 8003a70:	20000c9c 	.word	0x20000c9c
 8003a74:	20000c98 	.word	0x20000c98
 8003a78:	20000d00 	.word	0x20000d00

08003a7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a86:	f000 facb 	bl	8004020 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <xTimerCreateTimerTask+0x80>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d021      	beq.n	8003ad6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a9a:	1d3a      	adds	r2, r7, #4
 8003a9c:	f107 0108 	add.w	r1, r7, #8
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fa57 	bl	8001f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	9202      	str	r2, [sp, #8]
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	460a      	mov	r2, r1
 8003abc:	4910      	ldr	r1, [pc, #64]	; (8003b00 <xTimerCreateTimerTask+0x84>)
 8003abe:	4811      	ldr	r0, [pc, #68]	; (8003b04 <xTimerCreateTimerTask+0x88>)
 8003ac0:	f7ff f8b6 	bl	8002c30 <xTaskCreateStatic>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <xTimerCreateTimerTask+0x8c>)
 8003ac8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <xTimerCreateTimerTask+0x8c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	613b      	str	r3, [r7, #16]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003af2:	697b      	ldr	r3, [r7, #20]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000d3c 	.word	0x20000d3c
 8003b00:	08004b00 	.word	0x08004b00
 8003b04:	08003c29 	.word	0x08003c29
 8003b08:	20000d40 	.word	0x20000d40

08003b0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02a      	beq.n	8003b98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	dc18      	bgt.n	8003b86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b54:	f7ff feb2 	bl	80038bc <xTaskGetSchedulerState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d109      	bne.n	8003b72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	f107 0110 	add.w	r1, r7, #16
 8003b66:	2300      	movs	r3, #0
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	f7fe fbff 	bl	800236c <xQueueGenericSend>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b70:	e012      	b.n	8003b98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f107 0110 	add.w	r1, r7, #16
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f7fe fbf5 	bl	800236c <xQueueGenericSend>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24
 8003b84:	e008      	b.n	8003b98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <xTimerGenericCommand+0x98>)
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f107 0110 	add.w	r1, r7, #16
 8003b8e:	2300      	movs	r3, #0
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	f7fe fce9 	bl	8002568 <xQueueGenericSendFromISR>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000d3c 	.word	0x20000d3c

08003ba8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <prvProcessExpiredTimer+0x7c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fa69 	bl	8002098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d122      	bne.n	8003c14 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	18d1      	adds	r1, r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f000 f8c8 	bl	8003d70 <prvInsertTimerInActiveList>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2300      	movs	r3, #0
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff ff8b 	bl	8003b0c <xTimerGenericCommand>
 8003bf6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60fb      	str	r3, [r7, #12]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	4798      	blx	r3
}
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000d34 	.word	0x20000d34

08003c28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f857 	bl	8003ce8 <prvGetNextExpireTime>
 8003c3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f803 	bl	8003c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c46:	f000 f8d5 	bl	8003df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c4a:	e7f1      	b.n	8003c30 <prvTimerTask+0x8>

08003c4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c56:	f7ff fa3f 	bl	80030d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f866 	bl	8003d30 <prvSampleTimeNow>
 8003c64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d130      	bne.n	8003cce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <prvProcessTimerOrBlockTask+0x3c>
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d806      	bhi.n	8003c88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c7a:	f7ff fa3b 	bl	80030f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff91 	bl	8003ba8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c86:	e024      	b.n	8003cd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d008      	beq.n	8003ca0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <prvProcessTimerOrBlockTask+0x90>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <prvProcessTimerOrBlockTask+0x94>)
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fe ff8b 	bl	8002bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cb2:	f7ff fa1f 	bl	80030f4 <xTaskResumeAll>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <prvProcessTimerOrBlockTask+0x98>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	f3bf 8f6f 	isb	sy
}
 8003ccc:	e001      	b.n	8003cd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cce:	f7ff fa11 	bl	80030f4 <xTaskResumeAll>
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000d38 	.word	0x20000d38
 8003ce0:	20000d3c 	.word	0x20000d3c
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <prvGetNextExpireTime+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <prvGetNextExpireTime+0x44>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e001      	b.n	8003d1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000d34 	.word	0x20000d34

08003d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d38:	f7ff fa7a 	bl	8003230 <xTaskGetTickCount>
 8003d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <prvSampleTimeNow+0x3c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d205      	bcs.n	8003d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d48:	f000 f908 	bl	8003f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d5a:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <prvSampleTimeNow+0x3c>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d60:	68fb      	ldr	r3, [r7, #12]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000d44 	.word	0x20000d44

08003d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d812      	bhi.n	8003dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e01b      	b.n	8003de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <prvInsertTimerInActiveList+0x7c>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe f937 	bl	8002028 <vListInsert>
 8003dba:	e012      	b.n	8003de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d206      	bcs.n	8003dd2 <prvInsertTimerInActiveList+0x62>
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e007      	b.n	8003de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <prvInsertTimerInActiveList+0x80>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fe f923 	bl	8002028 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003de2:	697b      	ldr	r3, [r7, #20]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000d38 	.word	0x20000d38
 8003df0:	20000d34 	.word	0x20000d34

08003df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08e      	sub	sp, #56	; 0x38
 8003df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dfa:	e09d      	b.n	8003f38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da18      	bge.n	8003e34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	3304      	adds	r3, #4
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	61fb      	str	r3, [r7, #28]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2a:	6850      	ldr	r0, [r2, #4]
 8003e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db7d      	blt.n	8003f36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe f924 	bl	8002098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e50:	463b      	mov	r3, r7
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff6c 	bl	8003d30 <prvSampleTimeNow>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d86b      	bhi.n	8003f38 <prvProcessReceivedCommands+0x144>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <prvProcessReceivedCommands+0x74>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e91 	.word	0x08003e91
 8003e74:	08003f39 	.word	0x08003f39
 8003e78:	08003eed 	.word	0x08003eed
 8003e7c:	08003f25 	.word	0x08003f25
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e91 	.word	0x08003e91
 8003e88:	08003f39 	.word	0x08003f39
 8003e8c:	08003eed 	.word	0x08003eed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	18d1      	adds	r1, r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9e:	f7ff ff67 	bl	8003d70 <prvInsertTimerInActiveList>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d047      	beq.n	8003f38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d13f      	bne.n	8003f38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eca:	f7ff fe1f 	bl	8003b0c <xTimerGenericCommand>
 8003ece:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d130      	bne.n	8003f38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	61bb      	str	r3, [r7, #24]
}
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	617b      	str	r3, [r7, #20]
}
 8003f0c:	bf00      	nop
 8003f0e:	e7fe      	b.n	8003f0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	18d1      	adds	r1, r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1e:	f7ff ff27 	bl	8003d70 <prvInsertTimerInActiveList>
					break;
 8003f22:	e009      	b.n	8003f38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f30:	f000 fb68 	bl	8004604 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f34:	e000      	b.n	8003f38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f38:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <prvProcessReceivedCommands+0x164>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	1d39      	adds	r1, r7, #4
 8003f3e:	2200      	movs	r2, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe fba9 	bl	8002698 <xQueueReceive>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f47f af57 	bne.w	8003dfc <prvProcessReceivedCommands+0x8>
	}
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	3730      	adds	r7, #48	; 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000d3c 	.word	0x20000d3c

08003f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f62:	e045      	b.n	8003ff0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f64:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <prvSwitchTimerLists+0xbc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f6e:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <prvSwitchTimerLists+0xbc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe f88b 	bl	8002098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d12e      	bne.n	8003ff0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d90e      	bls.n	8003fc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <prvSwitchTimerLists+0xbc>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f7fe f834 	bl	8002028 <vListInsert>
 8003fc0:	e016      	b.n	8003ff0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	2100      	movs	r1, #0
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff fd9d 	bl	8003b0c <xTimerGenericCommand>
 8003fd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	603b      	str	r3, [r7, #0]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <prvSwitchTimerLists+0xbc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1b4      	bne.n	8003f64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <prvSwitchTimerLists+0xbc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <prvSwitchTimerLists+0xc0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <prvSwitchTimerLists+0xbc>)
 8004006:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <prvSwitchTimerLists+0xc0>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000d34 	.word	0x20000d34
 800401c:	20000d38 	.word	0x20000d38

08004020 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004026:	f000 f929 	bl	800427c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <prvCheckForValidListAndQueue+0x60>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d120      	bne.n	8004074 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004032:	4814      	ldr	r0, [pc, #80]	; (8004084 <prvCheckForValidListAndQueue+0x64>)
 8004034:	f7fd ffaa 	bl	8001f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004038:	4813      	ldr	r0, [pc, #76]	; (8004088 <prvCheckForValidListAndQueue+0x68>)
 800403a:	f7fd ffa7 	bl	8001f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <prvCheckForValidListAndQueue+0x6c>)
 8004040:	4a10      	ldr	r2, [pc, #64]	; (8004084 <prvCheckForValidListAndQueue+0x64>)
 8004042:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <prvCheckForValidListAndQueue+0x70>)
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <prvCheckForValidListAndQueue+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800404a:	2300      	movs	r3, #0
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <prvCheckForValidListAndQueue+0x74>)
 8004050:	4a11      	ldr	r2, [pc, #68]	; (8004098 <prvCheckForValidListAndQueue+0x78>)
 8004052:	2110      	movs	r1, #16
 8004054:	200a      	movs	r0, #10
 8004056:	f7fe f8b1 	bl	80021bc <xQueueGenericCreateStatic>
 800405a:	4603      	mov	r3, r0
 800405c:	4a08      	ldr	r2, [pc, #32]	; (8004080 <prvCheckForValidListAndQueue+0x60>)
 800405e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <prvCheckForValidListAndQueue+0x60>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <prvCheckForValidListAndQueue+0x60>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	490b      	ldr	r1, [pc, #44]	; (800409c <prvCheckForValidListAndQueue+0x7c>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fd82 	bl	8002b78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004074:	f000 f932 	bl	80042dc <vPortExitCritical>
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000d3c 	.word	0x20000d3c
 8004084:	20000d0c 	.word	0x20000d0c
 8004088:	20000d20 	.word	0x20000d20
 800408c:	20000d34 	.word	0x20000d34
 8004090:	20000d38 	.word	0x20000d38
 8004094:	20000de8 	.word	0x20000de8
 8004098:	20000d48 	.word	0x20000d48
 800409c:	08004b08 	.word	0x08004b08

080040a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b04      	subs	r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b04      	subs	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <pxPortInitialiseStack+0x54>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b14      	subs	r3, #20
 80040da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b20      	subs	r3, #32
 80040e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040e8:	68fb      	ldr	r3, [r7, #12]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	080040f9 	.word	0x080040f9

080040f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <prvTaskExitError+0x54>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800410a:	d00a      	beq.n	8004122 <prvTaskExitError+0x2a>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <prvTaskExitError+0x28>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004136:	bf00      	nop
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0fc      	beq.n	8004138 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	f04e 0e0d 	orr.w	lr, lr, #13
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst2>:
 8004170:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004178:	4806      	ldr	r0, [pc, #24]	; (8004194 <prvPortStartFirstTask+0x1c>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	b662      	cpsie	i
 8004184:	b661      	cpsie	f
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	df00      	svc	0
 8004190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004192:	bf00      	nop
 8004194:	e000ed08 	.word	0xe000ed08

08004198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419e:	4b32      	ldr	r3, [pc, #200]	; (8004268 <xPortStartScheduler+0xd0>)
 80041a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b2a      	ldr	r3, [pc, #168]	; (800426c <xPortStartScheduler+0xd4>)
 80041c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <xPortStartScheduler+0xd8>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041cc:	e009      	b.n	80041e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <xPortStartScheduler+0xd8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a26      	ldr	r2, [pc, #152]	; (8004270 <xPortStartScheduler+0xd8>)
 80041d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d0ef      	beq.n	80041ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <xPortStartScheduler+0xd8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00a      	beq.n	8004210 <xPortStartScheduler+0x78>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004210:	4b17      	ldr	r3, [pc, #92]	; (8004270 <xPortStartScheduler+0xd8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <xPortStartScheduler+0xd8>)
 8004218:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <xPortStartScheduler+0xd8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004222:	4a13      	ldr	r2, [pc, #76]	; (8004270 <xPortStartScheduler+0xd8>)
 8004224:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <xPortStartScheduler+0xdc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a10      	ldr	r2, [pc, #64]	; (8004274 <xPortStartScheduler+0xdc>)
 8004234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <xPortStartScheduler+0xdc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <xPortStartScheduler+0xdc>)
 8004240:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004244:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004246:	f000 f8b9 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <xPortStartScheduler+0xe0>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004250:	f7ff ff92 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004254:	f7ff f8b8 	bl	80033c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004258:	f7ff ff4e 	bl	80040f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20000e38 	.word	0x20000e38
 8004270:	20000e3c 	.word	0x20000e3c
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	2000000c 	.word	0x2000000c

0800427c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <vPortEnterCritical+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <vPortEnterCritical+0x58>)
 800429e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <vPortEnterCritical+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10f      	bne.n	80042c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <vPortEnterCritical+0x5c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	603b      	str	r3, [r7, #0]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <vPortEnterCritical+0x4a>
	}
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <vPortExitCritical+0x4c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <vPortExitCritical+0x24>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <vPortExitCritical+0x4c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3b01      	subs	r3, #1
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <vPortExitCritical+0x4c>)
 8004308:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <vPortExitCritical+0x4c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <vPortExitCritical+0x42>
 8004312:	2300      	movs	r3, #0
 8004314:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f383 8811 	msr	BASEPRI, r3
}
 800431c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	2000000c 	.word	0x2000000c
 800432c:	00000000 	.word	0x00000000

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004340:	6010      	str	r0, [r2, #0]
 8004342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004346:	f04f 0050 	mov.w	r0, #80	; 0x50
 800434a:	f380 8811 	msr	BASEPRI, r0
 800434e:	f7ff f83b 	bl	80033c8 <vTaskSwitchContext>
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004366:	f380 8809 	msr	PSP, r0
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	4770      	bx	lr

08004370 <pxCurrentTCBConst>:
 8004370:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7fe ff5b 	bl	800324c <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <SysTick_Handler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a08      	ldr	r2, [pc, #32]	; (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b03      	ldr	r3, [pc, #12]	; (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	e000e010 	.word	0xe000e010
 80043f0:	e000e018 	.word	0xe000e018
 80043f4:	20000000 	.word	0x20000000
 80043f8:	10624dd3 	.word	0x10624dd3
 80043fc:	e000e014 	.word	0xe000e014

08004400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004406:	f3ef 8305 	mrs	r3, IPSR
 800440a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b0f      	cmp	r3, #15
 8004410:	d914      	bls.n	800443c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004412:	4a16      	ldr	r2, [pc, #88]	; (800446c <vPortValidateInterruptPriority+0x6c>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <vPortValidateInterruptPriority+0x70>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	7afa      	ldrb	r2, [r7, #11]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20a      	bcs.n	800443c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	607b      	str	r3, [r7, #4]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <vPortValidateInterruptPriority+0x74>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <vPortValidateInterruptPriority+0x78>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d90a      	bls.n	8004462 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	603b      	str	r3, [r7, #0]
}
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <vPortValidateInterruptPriority+0x60>
	}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	e000e3f0 	.word	0xe000e3f0
 8004470:	20000e38 	.word	0x20000e38
 8004474:	e000ed0c 	.word	0xe000ed0c
 8004478:	20000e3c 	.word	0x20000e3c

0800447c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004488:	f7fe fe26 	bl	80030d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800448c:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <pvPortMalloc+0x174>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004494:	f000 f910 	bl	80046b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004498:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <pvPortMalloc+0x178>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 808e 	bne.w	80045c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01d      	beq.n	80044e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044ac:	2208      	movs	r2, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d014      	beq.n	80044e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	3308      	adds	r3, #8
 80044c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <pvPortMalloc+0x6c>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	617b      	str	r3, [r7, #20]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d069      	beq.n	80045c2 <pvPortMalloc+0x146>
 80044ee:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <pvPortMalloc+0x17c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d864      	bhi.n	80045c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044f8:	4b40      	ldr	r3, [pc, #256]	; (80045fc <pvPortMalloc+0x180>)
 80044fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044fc:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <pvPortMalloc+0x180>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004502:	e004      	b.n	800450e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d903      	bls.n	8004520 <pvPortMalloc+0xa4>
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f1      	bne.n	8004504 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004520:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <pvPortMalloc+0x174>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004526:	429a      	cmp	r2, r3
 8004528:	d04b      	beq.n	80045c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2208      	movs	r2, #8
 8004530:	4413      	add	r3, r2
 8004532:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad2      	subs	r2, r2, r3
 8004544:	2308      	movs	r3, #8
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	429a      	cmp	r2, r3
 800454a:	d91f      	bls.n	800458c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <pvPortMalloc+0xf8>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	613b      	str	r3, [r7, #16]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004586:	69b8      	ldr	r0, [r7, #24]
 8004588:	f000 f8f8 	bl	800477c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <pvPortMalloc+0x17c>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <pvPortMalloc+0x17c>)
 8004598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <pvPortMalloc+0x17c>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <pvPortMalloc+0x184>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d203      	bcs.n	80045ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <pvPortMalloc+0x17c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <pvPortMalloc+0x184>)
 80045ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <pvPortMalloc+0x178>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045c2:	f7fe fd97 	bl	80030f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <pvPortMalloc+0x16a>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <pvPortMalloc+0x168>
	return pvReturn;
 80045e6:	69fb      	ldr	r3, [r7, #28]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3728      	adds	r7, #40	; 0x28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20001a48 	.word	0x20001a48
 80045f4:	20001a54 	.word	0x20001a54
 80045f8:	20001a4c 	.word	0x20001a4c
 80045fc:	20001a40 	.word	0x20001a40
 8004600:	20001a50 	.word	0x20001a50

08004604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d048      	beq.n	80046a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004616:	2308      	movs	r3, #8
 8004618:	425b      	negs	r3, r3
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <vPortFree+0xac>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <vPortFree+0x44>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60fb      	str	r3, [r7, #12]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <vPortFree+0x62>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60bb      	str	r3, [r7, #8]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <vPortFree+0xac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d019      	beq.n	80046a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d115      	bne.n	80046a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortFree+0xac>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	43db      	mvns	r3, r3
 8004686:	401a      	ands	r2, r3
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800468c:	f7fe fd24 	bl	80030d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <vPortFree+0xb0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4413      	add	r3, r2
 800469a:	4a06      	ldr	r2, [pc, #24]	; (80046b4 <vPortFree+0xb0>)
 800469c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800469e:	6938      	ldr	r0, [r7, #16]
 80046a0:	f000 f86c 	bl	800477c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046a4:	f7fe fd26 	bl	80030f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20001a54 	.word	0x20001a54
 80046b4:	20001a4c 	.word	0x20001a4c

080046b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <prvHeapInit+0xac>)
 80046c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3307      	adds	r3, #7
 80046d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <prvHeapInit+0xac>)
 80046e8:	4413      	add	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <prvHeapInit+0xb0>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <prvHeapInit+0xb0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4413      	add	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004704:	2208      	movs	r2, #8
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a15      	ldr	r2, [pc, #84]	; (800476c <prvHeapInit+0xb4>)
 8004718:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800471a:	4b14      	ldr	r3, [pc, #80]	; (800476c <prvHeapInit+0xb4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <prvHeapInit+0xb4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <prvHeapInit+0xb4>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <prvHeapInit+0xb8>)
 8004746:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a09      	ldr	r2, [pc, #36]	; (8004774 <prvHeapInit+0xbc>)
 800474e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <prvHeapInit+0xc0>)
 8004752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004756:	601a      	str	r2, [r3, #0]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000e40 	.word	0x20000e40
 8004768:	20001a40 	.word	0x20001a40
 800476c:	20001a48 	.word	0x20001a48
 8004770:	20001a50 	.word	0x20001a50
 8004774:	20001a4c 	.word	0x20001a4c
 8004778:	20001a54 	.word	0x20001a54

0800477c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <prvInsertBlockIntoFreeList+0xa8>)
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e002      	b.n	8004790 <prvInsertBlockIntoFreeList+0x14>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d8f7      	bhi.n	800478a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4413      	add	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d108      	bne.n	80047be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	441a      	add	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d118      	bne.n	8004804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <prvInsertBlockIntoFreeList+0xac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d00d      	beq.n	80047fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e008      	b.n	800480c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <prvInsertBlockIntoFreeList+0xac>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e003      	b.n	800480c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d002      	beq.n	800481a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	20001a40 	.word	0x20001a40
 8004828:	20001a48 	.word	0x20001a48

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	2600      	movs	r6, #0
 8004830:	4d0c      	ldr	r5, [pc, #48]	; (8004864 <__libc_init_array+0x38>)
 8004832:	4c0d      	ldr	r4, [pc, #52]	; (8004868 <__libc_init_array+0x3c>)
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	f000 f908 	bl	8004a50 <_init>
 8004840:	2600      	movs	r6, #0
 8004842:	4d0a      	ldr	r5, [pc, #40]	; (800486c <__libc_init_array+0x40>)
 8004844:	4c0a      	ldr	r4, [pc, #40]	; (8004870 <__libc_init_array+0x44>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	f855 3b04 	ldr.w	r3, [r5], #4
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	f855 3b04 	ldr.w	r3, [r5], #4
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	08004c48 	.word	0x08004c48
 8004868:	08004c48 	.word	0x08004c48
 800486c:	08004c48 	.word	0x08004c48
 8004870:	08004c4c 	.word	0x08004c4c

08004874 <__retarget_lock_acquire_recursive>:
 8004874:	4770      	bx	lr

08004876 <__retarget_lock_release_recursive>:
 8004876:	4770      	bx	lr

08004878 <memcpy>:
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004880:	d100      	bne.n	8004884 <memcpy+0xc>
 8004882:	4770      	bx	lr
 8004884:	b510      	push	{r4, lr}
 8004886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800488a:	4291      	cmp	r1, r2
 800488c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004890:	d1f9      	bne.n	8004886 <memcpy+0xe>
 8004892:	bd10      	pop	{r4, pc}

08004894 <memset>:
 8004894:	4603      	mov	r3, r0
 8004896:	4402      	add	r2, r0
 8004898:	4293      	cmp	r3, r2
 800489a:	d100      	bne.n	800489e <memset+0xa>
 800489c:	4770      	bx	lr
 800489e:	f803 1b01 	strb.w	r1, [r3], #1
 80048a2:	e7f9      	b.n	8004898 <memset+0x4>

080048a4 <cleanup_glue>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	460c      	mov	r4, r1
 80048a8:	6809      	ldr	r1, [r1, #0]
 80048aa:	4605      	mov	r5, r0
 80048ac:	b109      	cbz	r1, 80048b2 <cleanup_glue+0xe>
 80048ae:	f7ff fff9 	bl	80048a4 <cleanup_glue>
 80048b2:	4621      	mov	r1, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ba:	f000 b87d 	b.w	80049b8 <_free_r>
	...

080048c0 <_reclaim_reent>:
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <_reclaim_reent+0xb4>)
 80048c2:	b570      	push	{r4, r5, r6, lr}
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4604      	mov	r4, r0
 80048c8:	4283      	cmp	r3, r0
 80048ca:	d051      	beq.n	8004970 <_reclaim_reent+0xb0>
 80048cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048ce:	b143      	cbz	r3, 80048e2 <_reclaim_reent+0x22>
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d14a      	bne.n	800496c <_reclaim_reent+0xac>
 80048d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	b111      	cbz	r1, 80048e2 <_reclaim_reent+0x22>
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 f86b 	bl	80049b8 <_free_r>
 80048e2:	6961      	ldr	r1, [r4, #20]
 80048e4:	b111      	cbz	r1, 80048ec <_reclaim_reent+0x2c>
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f866 	bl	80049b8 <_free_r>
 80048ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048ee:	b111      	cbz	r1, 80048f6 <_reclaim_reent+0x36>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 f861 	bl	80049b8 <_free_r>
 80048f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048f8:	b111      	cbz	r1, 8004900 <_reclaim_reent+0x40>
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 f85c 	bl	80049b8 <_free_r>
 8004900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004902:	b111      	cbz	r1, 800490a <_reclaim_reent+0x4a>
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f857 	bl	80049b8 <_free_r>
 800490a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800490c:	b111      	cbz	r1, 8004914 <_reclaim_reent+0x54>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f852 	bl	80049b8 <_free_r>
 8004914:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004916:	b111      	cbz	r1, 800491e <_reclaim_reent+0x5e>
 8004918:	4620      	mov	r0, r4
 800491a:	f000 f84d 	bl	80049b8 <_free_r>
 800491e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004920:	b111      	cbz	r1, 8004928 <_reclaim_reent+0x68>
 8004922:	4620      	mov	r0, r4
 8004924:	f000 f848 	bl	80049b8 <_free_r>
 8004928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492a:	b111      	cbz	r1, 8004932 <_reclaim_reent+0x72>
 800492c:	4620      	mov	r0, r4
 800492e:	f000 f843 	bl	80049b8 <_free_r>
 8004932:	69a3      	ldr	r3, [r4, #24]
 8004934:	b1e3      	cbz	r3, 8004970 <_reclaim_reent+0xb0>
 8004936:	4620      	mov	r0, r4
 8004938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800493a:	4798      	blx	r3
 800493c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800493e:	b1b9      	cbz	r1, 8004970 <_reclaim_reent+0xb0>
 8004940:	4620      	mov	r0, r4
 8004942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004946:	f7ff bfad 	b.w	80048a4 <cleanup_glue>
 800494a:	5949      	ldr	r1, [r1, r5]
 800494c:	b941      	cbnz	r1, 8004960 <_reclaim_reent+0xa0>
 800494e:	3504      	adds	r5, #4
 8004950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004952:	2d80      	cmp	r5, #128	; 0x80
 8004954:	68d9      	ldr	r1, [r3, #12]
 8004956:	d1f8      	bne.n	800494a <_reclaim_reent+0x8a>
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f82d 	bl	80049b8 <_free_r>
 800495e:	e7ba      	b.n	80048d6 <_reclaim_reent+0x16>
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	4620      	mov	r0, r4
 8004964:	f000 f828 	bl	80049b8 <_free_r>
 8004968:	4631      	mov	r1, r6
 800496a:	e7ef      	b.n	800494c <_reclaim_reent+0x8c>
 800496c:	2500      	movs	r5, #0
 800496e:	e7ef      	b.n	8004950 <_reclaim_reent+0x90>
 8004970:	bd70      	pop	{r4, r5, r6, pc}
 8004972:	bf00      	nop
 8004974:	20000010 	.word	0x20000010

08004978 <strncpy>:
 8004978:	4603      	mov	r3, r0
 800497a:	b510      	push	{r4, lr}
 800497c:	3901      	subs	r1, #1
 800497e:	b132      	cbz	r2, 800498e <strncpy+0x16>
 8004980:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004984:	3a01      	subs	r2, #1
 8004986:	f803 4b01 	strb.w	r4, [r3], #1
 800498a:	2c00      	cmp	r4, #0
 800498c:	d1f7      	bne.n	800497e <strncpy+0x6>
 800498e:	2100      	movs	r1, #0
 8004990:	441a      	add	r2, r3
 8004992:	4293      	cmp	r3, r2
 8004994:	d100      	bne.n	8004998 <strncpy+0x20>
 8004996:	bd10      	pop	{r4, pc}
 8004998:	f803 1b01 	strb.w	r1, [r3], #1
 800499c:	e7f9      	b.n	8004992 <strncpy+0x1a>
	...

080049a0 <__malloc_lock>:
 80049a0:	4801      	ldr	r0, [pc, #4]	; (80049a8 <__malloc_lock+0x8>)
 80049a2:	f7ff bf67 	b.w	8004874 <__retarget_lock_acquire_recursive>
 80049a6:	bf00      	nop
 80049a8:	20001b0c 	.word	0x20001b0c

080049ac <__malloc_unlock>:
 80049ac:	4801      	ldr	r0, [pc, #4]	; (80049b4 <__malloc_unlock+0x8>)
 80049ae:	f7ff bf62 	b.w	8004876 <__retarget_lock_release_recursive>
 80049b2:	bf00      	nop
 80049b4:	20001b0c 	.word	0x20001b0c

080049b8 <_free_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4605      	mov	r5, r0
 80049bc:	2900      	cmp	r1, #0
 80049be:	d043      	beq.n	8004a48 <_free_r+0x90>
 80049c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c4:	1f0c      	subs	r4, r1, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bfb8      	it	lt
 80049ca:	18e4      	addlt	r4, r4, r3
 80049cc:	f7ff ffe8 	bl	80049a0 <__malloc_lock>
 80049d0:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <_free_r+0x94>)
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	4610      	mov	r0, r2
 80049d6:	b933      	cbnz	r3, 80049e6 <_free_r+0x2e>
 80049d8:	6063      	str	r3, [r4, #4]
 80049da:	6014      	str	r4, [r2, #0]
 80049dc:	4628      	mov	r0, r5
 80049de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049e2:	f7ff bfe3 	b.w	80049ac <__malloc_unlock>
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	d90a      	bls.n	8004a00 <_free_r+0x48>
 80049ea:	6821      	ldr	r1, [r4, #0]
 80049ec:	1862      	adds	r2, r4, r1
 80049ee:	4293      	cmp	r3, r2
 80049f0:	bf01      	itttt	eq
 80049f2:	681a      	ldreq	r2, [r3, #0]
 80049f4:	685b      	ldreq	r3, [r3, #4]
 80049f6:	1852      	addeq	r2, r2, r1
 80049f8:	6022      	streq	r2, [r4, #0]
 80049fa:	6063      	str	r3, [r4, #4]
 80049fc:	6004      	str	r4, [r0, #0]
 80049fe:	e7ed      	b.n	80049dc <_free_r+0x24>
 8004a00:	461a      	mov	r2, r3
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	b10b      	cbz	r3, 8004a0a <_free_r+0x52>
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	d9fa      	bls.n	8004a00 <_free_r+0x48>
 8004a0a:	6811      	ldr	r1, [r2, #0]
 8004a0c:	1850      	adds	r0, r2, r1
 8004a0e:	42a0      	cmp	r0, r4
 8004a10:	d10b      	bne.n	8004a2a <_free_r+0x72>
 8004a12:	6820      	ldr	r0, [r4, #0]
 8004a14:	4401      	add	r1, r0
 8004a16:	1850      	adds	r0, r2, r1
 8004a18:	4283      	cmp	r3, r0
 8004a1a:	6011      	str	r1, [r2, #0]
 8004a1c:	d1de      	bne.n	80049dc <_free_r+0x24>
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4401      	add	r1, r0
 8004a24:	6011      	str	r1, [r2, #0]
 8004a26:	6053      	str	r3, [r2, #4]
 8004a28:	e7d8      	b.n	80049dc <_free_r+0x24>
 8004a2a:	d902      	bls.n	8004a32 <_free_r+0x7a>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	e7d4      	b.n	80049dc <_free_r+0x24>
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	1821      	adds	r1, r4, r0
 8004a36:	428b      	cmp	r3, r1
 8004a38:	bf01      	itttt	eq
 8004a3a:	6819      	ldreq	r1, [r3, #0]
 8004a3c:	685b      	ldreq	r3, [r3, #4]
 8004a3e:	1809      	addeq	r1, r1, r0
 8004a40:	6021      	streq	r1, [r4, #0]
 8004a42:	6063      	str	r3, [r4, #4]
 8004a44:	6054      	str	r4, [r2, #4]
 8004a46:	e7c9      	b.n	80049dc <_free_r+0x24>
 8004a48:	bd38      	pop	{r3, r4, r5, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20001a58 	.word	0x20001a58

08004a50 <_init>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

08004a5c <_fini>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr
