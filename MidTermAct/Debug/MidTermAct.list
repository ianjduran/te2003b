
MidTermAct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080020ac  080020ac  000120ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002154  08002154  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002154  08002154  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800215c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080021cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080021cc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002faf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fbb  00000000  00000000  00023048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00024008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b8  00000000  00000000  00024458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c32  00000000  00000000  00024810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049db  00000000  00000000  0003a442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da25  00000000  00000000  0003ee1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000133c  00000000  00000000  000bc894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002094 	.word	0x08002094

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002094 	.word	0x08002094

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <USER_TIM2_Delay>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};


// Timer delay
void USER_TIM2_Delay(uint16_t x, uint16_t y){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	460a      	mov	r2, r1
 8000166:	80fb      	strh	r3, [r7, #6]
 8000168:	4613      	mov	r3, r2
 800016a:	80bb      	strh	r3, [r7, #4]
	TIM2->SMCR &= ~TIM_SMCR_ECE		// External clock 2 mode disabled
 800016c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800017a:	f023 0307 	bic.w	r3, r3, #7
 800017e:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;	// slave mode disabled / internal clock

	// Timer 2 control register 1
	TIM2->CR1 &= ~TIM_CR1_CMS 		//
 8000180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800018a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800018e:	6013      	str	r3, [r2, #0]
			  &	 ~TIM_CR1_DIR
			  &	 ~TIM_CR1_URS
			  &	 ~TIM_CR1_UDIS
			  &	 ~TIM_CR1_CEN;
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800019a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800019e:	6013      	str	r3, [r2, #0]

	TIM2->PSC = x;
 80001a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001a4:	88fb      	ldrh	r3, [r7, #6]
 80001a6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = y;
 80001a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ac:	88bb      	ldrh	r3, [r7, #4]
 80001ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80001b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001b4:	695b      	ldr	r3, [r3, #20]
 80001b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ba:	f043 0301 	orr.w	r3, r3, #1
 80001be:	6153      	str	r3, [r2, #20]
	TIM2->SR  &= ~TIM_SR_UIF;
 80001c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ca:	f023 0301 	bic.w	r3, r3, #1
 80001ce:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 80001d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]
	while((TIM2->SR & TIM_SR_UIF) == 0){
 80001e0:	bf00      	nop
 80001e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f8      	beq.n	80001e2 <USER_TIM2_Delay+0x86>

	}

	TIM2->CR1 &= ~TIM_CR1_CEN;
 80001f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001fa:	f023 0301 	bic.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
	...

0800020c <LCD_Init>:

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	char const *p;

	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN; //		I/O port B clock enabled
 8000212:	4b59      	ldr	r3, [pc, #356]	; (8000378 <LCD_Init+0x16c>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	4a58      	ldr	r2, [pc, #352]	; (8000378 <LCD_Init+0x16c>)
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	6193      	str	r3, [r2, #24]

	// Configuracion de todos los pines hacia el LCD
	/* As general purpose output push-pull, 10 MHz speed
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	*/
	GPIOB->CRH	&= ~GPIO_CRH_CNF12 & ~GPIO_CRH_MODE12_1;
 800021e:	4b57      	ldr	r3, [pc, #348]	; (800037c <LCD_Init+0x170>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4a56      	ldr	r2, [pc, #344]	; (800037c <LCD_Init+0x170>)
 8000224:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000228:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE12_0;
 800022a:	4b54      	ldr	r3, [pc, #336]	; (800037c <LCD_Init+0x170>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a53      	ldr	r2, [pc, #332]	; (800037c <LCD_Init+0x170>)
 8000230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000234:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000236:	4b51      	ldr	r3, [pc, #324]	; (800037c <LCD_Init+0x170>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a50      	ldr	r2, [pc, #320]	; (800037c <LCD_Init+0x170>)
 800023c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000240:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE13_0;
 8000242:	4b4e      	ldr	r3, [pc, #312]	; (800037c <LCD_Init+0x170>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a4d      	ldr	r2, [pc, #308]	; (800037c <LCD_Init+0x170>)
 8000248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF14 & ~GPIO_CRH_MODE14_1;
 800024e:	4b4b      	ldr	r3, [pc, #300]	; (800037c <LCD_Init+0x170>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	4a4a      	ldr	r2, [pc, #296]	; (800037c <LCD_Init+0x170>)
 8000254:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000258:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE14_0;
 800025a:	4b48      	ldr	r3, [pc, #288]	; (800037c <LCD_Init+0x170>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	4a47      	ldr	r2, [pc, #284]	; (800037c <LCD_Init+0x170>)
 8000260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000264:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000266:	4b45      	ldr	r3, [pc, #276]	; (800037c <LCD_Init+0x170>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a44      	ldr	r2, [pc, #272]	; (800037c <LCD_Init+0x170>)
 800026c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000270:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000272:	4b42      	ldr	r3, [pc, #264]	; (800037c <LCD_Init+0x170>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	4a41      	ldr	r2, [pc, #260]	; (800037c <LCD_Init+0x170>)
 8000278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF10 & ~GPIO_CRH_MODE10_1;
 800027e:	4b3f      	ldr	r3, [pc, #252]	; (800037c <LCD_Init+0x170>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a3e      	ldr	r2, [pc, #248]	; (800037c <LCD_Init+0x170>)
 8000284:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000288:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE10_0;
 800028a:	4b3c      	ldr	r3, [pc, #240]	; (800037c <LCD_Init+0x170>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a3b      	ldr	r2, [pc, #236]	; (800037c <LCD_Init+0x170>)
 8000290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000294:	6053      	str	r3, [r2, #4]

	GPIOB->CRL	&= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8000296:	4b39      	ldr	r3, [pc, #228]	; (800037c <LCD_Init+0x170>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a38      	ldr	r2, [pc, #224]	; (800037c <LCD_Init+0x170>)
 800029c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80002a0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE1_0;
 80002a2:	4b36      	ldr	r3, [pc, #216]	; (800037c <LCD_Init+0x170>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a35      	ldr	r2, [pc, #212]	; (800037c <LCD_Init+0x170>)
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	6013      	str	r3, [r2, #0]

	GPIOB->CRL	&= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 80002ae:	4b33      	ldr	r3, [pc, #204]	; (800037c <LCD_Init+0x170>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a32      	ldr	r2, [pc, #200]	; (800037c <LCD_Init+0x170>)
 80002b4:	f023 030e 	bic.w	r3, r3, #14
 80002b8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE0_0;
 80002ba:	4b30      	ldr	r3, [pc, #192]	; (800037c <LCD_Init+0x170>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a2f      	ldr	r2, [pc, #188]	; (800037c <LCD_Init+0x170>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]

	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <LCD_Init+0x170>)
 80002c8:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <LCD_Init+0x174>)
 80002ca:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	USER_TIM2_Delay(30, 36000); //		delay of 15ms
 80002cc:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80002d0:	201e      	movs	r0, #30
 80002d2:	f7ff ff43 	bl	800015c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002d6:	4b29      	ldr	r3, [pc, #164]	; (800037c <LCD_Init+0x170>)
 80002d8:	4a29      	ldr	r2, [pc, #164]	; (8000380 <LCD_Init+0x174>)
 80002da:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80002dc:	f000 f954 	bl	8000588 <LCD_Pulse_EN>
	USER_TIM2_Delay(4, 59039);//		delay of 4.1ms
 80002e0:	f24e 619f 	movw	r1, #59039	; 0xe69f
 80002e4:	2004      	movs	r0, #4
 80002e6:	f7ff ff39 	bl	800015c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002ea:	4b24      	ldr	r3, [pc, #144]	; (800037c <LCD_Init+0x170>)
 80002ec:	4a24      	ldr	r2, [pc, #144]	; (8000380 <LCD_Init+0x174>)
 80002ee:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80002f0:	f000 f94a 	bl	8000588 <LCD_Pulse_EN>
	USER_TIM2_Delay(0, 7199);//     delay of 100us
 80002f4:	f641 411f 	movw	r1, #7199	; 0x1c1f
 80002f8:	2000      	movs	r0, #0
 80002fa:	f7ff ff2f 	bl	800015c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <LCD_Init+0x170>)
 8000300:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <LCD_Init+0x174>)
 8000302:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000304:	f000 f940 	bl	8000588 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que el LCD este operativo
 8000308:	bf00      	nop
 800030a:	f000 f8f7 	bl	80004fc <LCD_Busy>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1fa      	bne.n	800030a <LCD_Init+0xfe>
	GPIOB->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <LCD_Init+0x170>)
 8000316:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <LCD_Init+0x178>)
 8000318:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800031a:	f000 f935 	bl	8000588 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que se complete
 800031e:	bf00      	nop
 8000320:	f000 f8ec 	bl	80004fc <LCD_Busy>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1fa      	bne.n	8000320 <LCD_Init+0x114>
	LCD_Write_Cmd( 0x28U );//					establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 800032a:	2028      	movs	r0, #40	; 0x28
 800032c:	f000 f894 	bl	8000458 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//					enciende el LCD sin cursor
 8000330:	200c      	movs	r0, #12
 8000332:	f000 f891 	bl	8000458 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//					inicializa cursor
 8000336:	2006      	movs	r0, #6
 8000338:	f000 f88e 	bl	8000458 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 800033c:	2040      	movs	r0, #64	; 0x40
 800033e:	f000 f88b 	bl	8000458 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <LCD_Init+0x17c>)
 8000344:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	e00a      	b.n	8000362 <LCD_Init+0x156>
		LCD_Put_Char( *p );
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f895 	bl	8000480 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	2b3f      	cmp	r3, #63	; 0x3f
 8000366:	d9f1      	bls.n	800034c <LCD_Init+0x140>

	LCD_Write_Cmd( 0x80 );
 8000368:	2080      	movs	r0, #128	; 0x80
 800036a:	f000 f875 	bl	8000458 <LCD_Write_Cmd>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	c0003000 	.word	0xc0003000
 8000384:	d0002000 	.word	0xd0002000
 8000388:	080020d0 	.word	0x080020d0

0800038c <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//						Bit[0]
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d004      	beq.n	80003aa <LCD_Out_Data4+0x1e>
		GPIOB->BSRR	=	1U << LCD_D4_PIN_HIGH;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <LCD_Out_Data4+0x84>)
 80003a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	e003      	b.n	80003b2 <LCD_Out_Data4+0x26>
	else
		GPIOB->BSRR	=	1U << LCD_D4_PIN_LOW;
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <LCD_Out_Data4+0x84>)
 80003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//						Bit[1]
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0302 	and.w	r3, r3, #2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d004      	beq.n	80003c6 <LCD_Out_Data4+0x3a>
		GPIOB->BSRR	=	1U << LCD_D5_PIN_HIGH;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <LCD_Out_Data4+0x84>)
 80003be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	e003      	b.n	80003ce <LCD_Out_Data4+0x42>
	else
		GPIOB->BSRR	=	1U << LCD_D5_PIN_LOW;
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <LCD_Out_Data4+0x84>)
 80003c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003cc:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//						Bit[2]
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d004      	beq.n	80003e2 <LCD_Out_Data4+0x56>
		GPIOB->BSRR	=	1U << LCD_D6_PIN_HIGH;
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <LCD_Out_Data4+0x84>)
 80003da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <LCD_Out_Data4+0x5e>
	else
		GPIOB->BSRR	=	1U << LCD_D6_PIN_LOW;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <LCD_Out_Data4+0x84>)
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//						Bit[3]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d004      	beq.n	80003fe <LCD_Out_Data4+0x72>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_HIGH;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LCD_Out_Data4+0x84>)
 80003f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003fa:	611a      	str	r2, [r3, #16]
	else
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 80003fc:	e003      	b.n	8000406 <LCD_Out_Data4+0x7a>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <LCD_Out_Data4+0x84>)
 8000400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000404:	611a      	str	r2, [r3, #16]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40010c00 	.word	0x40010c00

08000414 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ffb1 	bl	800038c <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800042a:	f000 f8ad 	bl	8000588 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	f003 030f 	and.w	r3, r3, #15
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffa8 	bl	800038c <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800043c:	f000 f8a4 	bl	8000588 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000440:	bf00      	nop
 8000442:	f000 f85b 	bl	80004fc <LCD_Busy>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1fa      	bne.n	8000442 <LCD_Write_Byte+0x2e>
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	=	1U << LCD_RS_PIN_LOW;//					RS=0 (seleccion de comando)
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <LCD_Write_Cmd+0x24>)
 8000464:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000468:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ffd1 	bl	8000414 <LCD_Write_Byte>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010c00 	.word	0x40010c00

08000480 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	= 1U << LCD_RS_PIN_HIGH;//				RS=1 (seleccion de caracteres)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <LCD_Put_Char+0x20>)
 800048c:	2201      	movs	r2, #1
 800048e:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte(c);
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffbe 	bl	8000414 <LCD_Write_Byte>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	460a      	mov	r2, r1
 80004ae:	71fb      	strb	r3, [r7, #7]
 80004b0:	4613      	mov	r3, r2
 80004b2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <LCD_Set_Cursor+0x1c>
		column--;
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	3b01      	subs	r3, #1
 80004be:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <LCD_Set_Cursor+0x28>
		line--;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	461a      	mov	r2, r3
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	4413      	add	r3, r2
 80004dc:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3b80      	subs	r3, #128	; 0x80
 80004e8:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffb3 	bl	8000458 <LCD_Write_Cmd>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* Configuracion de PB15_D7 as input floating
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */
	GPIOB->CRH &= ~GPIO_CRH_CNF15_1 & ~GPIO_CRH_MODE15;
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <LCD_Busy+0x80>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <LCD_Busy+0x80>)
 8000506:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 800050a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_0;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <LCD_Busy+0x80>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a1a      	ldr	r2, [pc, #104]	; (800057c <LCD_Busy+0x80>)
 8000512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000516:	6053      	str	r3, [r2, #4]
	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_RS_PIN_LOW
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <LCD_Busy+0x80>)
 800051a:	4a19      	ldr	r2, [pc, #100]	; (8000580 <LCD_Busy+0x84>)
 800051c:	611a      	str	r2, [r3, #16]
				|	1U << LCD_RW_PIN_HIGH
				|	1U << LCD_EN_PIN_HIGH;

	USER_TIM2_Delay(0, 7199);//      delay of 100us
 800051e:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff fe1a 	bl	800015c <USER_TIM2_Delay>
	if( ( GPIOB->IDR & 0x00008000U ) ){//					if PB15_D7 is set, then
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <LCD_Busy+0x80>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000530:	2b00      	cmp	r3, #0
 8000532:	d010      	beq.n	8000556 <LCD_Busy+0x5a>
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <LCD_Busy+0x80>)
 8000536:	4a13      	ldr	r2, [pc, #76]	; (8000584 <LCD_Busy+0x88>)
 8000538:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <LCD_Busy+0x80>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <LCD_Busy+0x80>)
 8000540:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000544:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <LCD_Busy+0x80>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <LCD_Busy+0x80>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 1;
 8000552:	2301      	movs	r3, #1
 8000554:	e00f      	b.n	8000576 <LCD_Busy+0x7a>
	} else {
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <LCD_Busy+0x80>)
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <LCD_Busy+0x88>)
 800055a:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <LCD_Busy+0x80>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <LCD_Busy+0x80>)
 8000562:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000566:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LCD_Busy+0x80>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <LCD_Busy+0x80>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 0;
 8000574:	2300      	movs	r3, #0
	}
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010c00 	.word	0x40010c00
 8000580:	00010402 	.word	0x00010402
 8000584:	04020000 	.word	0x04020000

08000588 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	1U << LCD_EN_PIN_HIGH;//				habilita pin EN ON
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <LCD_Pulse_EN+0x24>)
 800058e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000592:	611a      	str	r2, [r3, #16]
	USER_TIM2_Delay(0, 7599);//      delay of 50us
 8000594:	f641 51af 	movw	r1, #7599	; 0x1daf
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff fddf 	bl	800015c <USER_TIM2_Delay>
	GPIOB->BSRR	=	1U << LCD_EN_PIN_LOW;//					habilita pin EN OFF
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <LCD_Pulse_EN+0x24>)
 80005a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005a4:	611a      	str	r2, [r3, #16]

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010c00 	.word	0x40010c00

080005b0 <pollButton>:
uint8_t USER_USART1_Receive(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t pollButton(uint8_t row, uint8_t col){
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	460a      	mov	r2, r1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	71bb      	strb	r3, [r7, #6]
	//Set all row pins to 1, except polling row
	for(int i = 4; i < 8; i++){
 80005c0:	2304      	movs	r3, #4
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e00c      	b.n	80005e0 <pollButton+0x30>
		GPIOA->ODR |= 1 << i;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <pollButton+0x6c>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	2101      	movs	r1, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	fa01 f202 	lsl.w	r2, r1, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a11      	ldr	r2, [pc, #68]	; (800061c <pollButton+0x6c>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
	for(int i = 4; i < 8; i++){
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	ddef      	ble.n	80005c6 <pollButton+0x16>
	}
	GPIOA->ODR &= ~(1 << row);
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <pollButton+0x6c>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <pollButton+0x6c>)
 80005f8:	400b      	ands	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]

	//Read col
	//return 0;
	return GPIOA->IDR & (1 << col);
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <pollButton+0x6c>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4013      	ands	r3, r2
 800060e:	b2db      	uxtb	r3, r3
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40010800 	.word	0x40010800

08000620 <config_pin>:

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
 800062c:	4613      	mov	r3, r2
 800062e:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <config_pin+0x20>
		//Input
		modeBits = 0b00;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 800063a:	2301      	movs	r3, #1
 800063c:	73bb      	strb	r3, [r7, #14]
 800063e:	e014      	b.n	800066a <config_pin+0x4a>
	} else if(mode == 1){
 8000640:	78bb      	ldrb	r3, [r7, #2]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d104      	bne.n	8000650 <config_pin+0x30>
		//Output
		modeBits = 0b01;
 8000646:	2301      	movs	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 800064a:	2300      	movs	r3, #0
 800064c:	73bb      	strb	r3, [r7, #14]
 800064e:	e00c      	b.n	800066a <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 8000654:	2302      	movs	r3, #2
 8000656:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	78fa      	ldrb	r2, [r7, #3]
 800065e:	2101      	movs	r1, #1
 8000660:	fa01 f202 	lsl.w	r2, r1, r2
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 030c 	and.w	r3, r3, #12
 8000674:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	f003 0303 	and.w	r3, r3, #3
 800067e:	b25a      	sxtb	r2, r3
 8000680:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000684:	4313      	orrs	r3, r2
 8000686:	b25b      	sxtb	r3, r3
 8000688:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	2b07      	cmp	r3, #7
 800068e:	d81a      	bhi.n	80006c6 <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	78fa      	ldrb	r2, [r7, #3]
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	210f      	movs	r1, #15
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	43d2      	mvns	r2, r2
 80006a0:	401a      	ands	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	78fa      	ldrb	r2, [r7, #3]
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	210f      	movs	r1, #15
 80006b0:	4091      	lsls	r1, r2
 80006b2:	7b78      	ldrb	r0, [r7, #13]
 80006b4:	78fa      	ldrb	r2, [r7, #3]
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	fa00 f202 	lsl.w	r2, r0, r2
 80006bc:	400a      	ands	r2, r1
 80006be:	431a      	orrs	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 80006c4:	e01c      	b.n	8000700 <config_pin+0xe0>
		pin -= 8;
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	3b08      	subs	r3, #8
 80006ca:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	78fa      	ldrb	r2, [r7, #3]
 80006d2:	0092      	lsls	r2, r2, #2
 80006d4:	210f      	movs	r1, #15
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	43d2      	mvns	r2, r2
 80006dc:	401a      	ands	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	78fa      	ldrb	r2, [r7, #3]
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	210f      	movs	r1, #15
 80006ec:	4091      	lsls	r1, r2
 80006ee:	7b78      	ldrb	r0, [r7, #13]
 80006f0:	78fa      	ldrb	r2, [r7, #3]
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	fa00 f202 	lsl.w	r2, r0, r2
 80006f8:	400a      	ands	r2, r1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	605a      	str	r2, [r3, #4]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
	...

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b0cd      	sub	sp, #308	; 0x134
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 fad1 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f8e3 	bl	80008e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPAEN;
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <main+0x1c4>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a6c      	ldr	r2, [pc, #432]	; (80008d0 <main+0x1c4>)
 8000720:	f043 0314 	orr.w	r3, r3, #20
 8000724:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f921 	bl	800096c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  USER_RCC_Init();
 800072a:	f000 f941 	bl	80009b0 <USER_RCC_Init>
  USER_GPIO_Init();
 800072e:	f000 f94f 	bl	80009d0 <USER_GPIO_Init>
  USER_USART1_Init();
 8000732:	f000 f9a5 	bl	8000a80 <USER_USART1_Init>

  uint8_t keypad_chars[] = {'1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9', 'C', '\r', '0', '\n', 'D'};
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <main+0x1c8>)
 8000738:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800073c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800073e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t msg_buffer[256];

  uint8_t lastChar = 0xff;
 8000742:	23ff      	movs	r3, #255	; 0xff
 8000744:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  unsigned int charCounter = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  uint8_t currentLine = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  uint8_t currentRow = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  LCD_Init();
 800075a:	f7ff fd57 	bl	800020c <LCD_Init>
  LCD_Cursor_ON();
 800075e:	200e      	movs	r0, #14
 8000760:	f7ff fe7a 	bl	8000458 <LCD_Write_Cmd>
  LCD_Clear();
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fe77 	bl	8000458 <LCD_Write_Cmd>
  LCD_Set_Cursor(currentLine, currentRow);
 800076a:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 800076e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fe95 	bl	80004a4 <LCD_Set_Cursor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t selectedChar = 0xff;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125

	  for(int i = 0; i < 4; i++){
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000786:	e034      	b.n	80007f2 <main+0xe6>
 		  for(int j = 0; j < 4; j++){
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800078e:	e027      	b.n	80007e0 <main+0xd4>
			  int out = pollButton(j + 4, i);
 8000790:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000794:	b2db      	uxtb	r3, r3
 8000796:	3304      	adds	r3, #4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff04 	bl	80005b0 <pollButton>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			  int index = i * 4 + j;
 80007ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80007b8:	4413      	add	r3, r2
 80007ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

			  if(out == 0){
 80007be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d107      	bne.n	80007d6 <main+0xca>
				  selectedChar = keypad_chars[index];
 80007c6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80007ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 		  for(int j = 0; j < 4; j++){
 80007d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007da:	3301      	adds	r3, #1
 80007dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80007e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	ddd3      	ble.n	8000790 <main+0x84>
	  for(int i = 0; i < 4; i++){
 80007e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007ec:	3301      	adds	r3, #1
 80007ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80007f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	ddc6      	ble.n	8000788 <main+0x7c>
			  }
		  }
	  }

	  if(lastChar == selectedChar) charCounter++;
 80007fa:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80007fe:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000802:	429a      	cmp	r2, r3
 8000804:	d105      	bne.n	8000812 <main+0x106>
 8000806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800080a:	3301      	adds	r3, #1
 800080c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000810:	e002      	b.n	8000818 <main+0x10c>
	  else charCounter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	  if(selectedChar != 0xff && charCounter == 1500){
 8000818:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 800081c:	2bff      	cmp	r3, #255	; 0xff
 800081e:	d018      	beq.n	8000852 <main+0x146>
 8000820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000824:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000828:	4293      	cmp	r3, r2
 800082a:	d112      	bne.n	8000852 <main+0x146>
		  snprintf(msg_buffer, sizeof(msg_buffer), "%c", selectedChar);
 800082c:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000830:	4638      	mov	r0, r7
 8000832:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <main+0x1cc>)
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	f000 ff9e 	bl	8001778 <sniprintf>
		  USER_USART1_Transmit(msg_buffer, strlen(msg_buffer));
 800083c:	463b      	mov	r3, r7
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fc84 	bl	800014c <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	463b      	mov	r3, r7
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f939 	bl	8000ac4 <USER_USART1_Transmit>


	  }

	  lastChar = selectedChar;
 8000852:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000856:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

	  //Check if char available
	  if((USART1->SR & USART_SR_RXNE) != 0){
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <main+0x1d0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	2b00      	cmp	r3, #0
 8000864:	d089      	beq.n	800077a <main+0x6e>
		  uint8_t inputChar = USER_USART1_Receive();
 8000866:	f000 f953 	bl	8000b10 <USER_USART1_Receive>
 800086a:	4603      	mov	r3, r0
 800086c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		  //Handle writing character to lcd
		  //Handle special chars
		  if(inputChar == '\n'){
 8000870:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000874:	2b0a      	cmp	r3, #10
 8000876:	d10b      	bne.n	8000890 <main+0x184>
			  if(currentLine == 0) currentLine = 1;
 8000878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <main+0x17c>
 8000880:	2301      	movs	r3, #1
 8000882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8000886:	e778      	b.n	800077a <main+0x6e>
			  else currentLine = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 800088e:	e774      	b.n	800077a <main+0x6e>
		  } else if(inputChar == '\r'){
 8000890:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000894:	2b0d      	cmp	r3, #13
 8000896:	d10d      	bne.n	80008b4 <main+0x1a8>
			  currentRow++;
 8000898:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800089c:	3301      	adds	r3, #1
 800089e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			  if(currentRow >= 16) currentRow = 0; //Wrap around
 80008a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	f67f af67 	bls.w	800077a <main+0x6e>
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80008b2:	e762      	b.n	800077a <main+0x6e>
		  } else {
			  LCD_Set_Cursor(currentLine, currentRow);
 80008b4:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 80008b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fdf0 	bl	80004a4 <LCD_Set_Cursor>
			  LCD_Put_Char(inputChar);
 80008c4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fdd9 	bl	8000480 <LCD_Put_Char>
  {
 80008ce:	e754      	b.n	800077a <main+0x6e>
 80008d0:	40021000 	.word	0x40021000
 80008d4:	080020b0 	.word	0x080020b0
 80008d8:	080020ac 	.word	0x080020ac
 80008dc:	40013800 	.word	0x40013800

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b090      	sub	sp, #64	; 0x40
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	2228      	movs	r2, #40	; 0x28
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 ff3a 	bl	8001768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000914:	2302      	movs	r3, #2
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800091e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fb0b 	bl	8000f44 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000934:	f000 f8fe 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fd78 	bl	8001448 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800095e:	f000 f8e9 	bl	8000b34 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3740      	adds	r7, #64	; 0x40
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_GPIO_Init+0x40>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <MX_GPIO_Init+0x40>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_GPIO_Init+0x40>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_GPIO_Init+0x40>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <MX_GPIO_Init+0x40>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <MX_GPIO_Init+0x40>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000

080009b0 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */

void USER_RCC_Init(void){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <USER_RCC_Init+0x1c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <USER_RCC_Init+0x1c>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	f043 0315 	orr.w	r3, r3, #21
 80009c2:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN
						|   RCC_APB1ENR_TIM2EN;
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009da:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80009de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009e6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80009ea:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80009f6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <USER_GPIO_Init+0xa8>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <USER_GPIO_Init+0xac>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <USER_GPIO_Init+0xac>)
 8000a12:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000a16:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <USER_GPIO_Init+0xac>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <USER_GPIO_Init+0xac>)
 8000a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a22:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000a24:	2202      	movs	r2, #2
 8000a26:	2100      	movs	r1, #0
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a2a:	f7ff fdf9 	bl	8000620 <config_pin>
	config_pin(GPIOA, 1, 2);
 8000a2e:	2202      	movs	r2, #2
 8000a30:	2101      	movs	r1, #1
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a34:	f7ff fdf4 	bl	8000620 <config_pin>
	config_pin(GPIOA, 2, 2);
 8000a38:	2202      	movs	r2, #2
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a3e:	f7ff fdef 	bl	8000620 <config_pin>
	config_pin(GPIOA, 3, 2);
 8000a42:	2202      	movs	r2, #2
 8000a44:	2103      	movs	r1, #3
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a48:	f7ff fdea 	bl	8000620 <config_pin>
	config_pin(GPIOA, 4, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a52:	f7ff fde5 	bl	8000620 <config_pin>
	config_pin(GPIOA, 5, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2105      	movs	r1, #5
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a5c:	f7ff fde0 	bl	8000620 <config_pin>
	config_pin(GPIOA, 6, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2106      	movs	r1, #6
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a66:	f7ff fddb 	bl	8000620 <config_pin>
	config_pin(GPIOA, 7, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USER_GPIO_Init+0xa8>)
 8000a70:	f7ff fdd6 	bl	8000620 <config_pin>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	40011000 	.word	0x40011000

08000a80 <USER_USART1_Init>:

void USER_USART1_Init(void) {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000a86:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000a8a:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000a92:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 8000a96:	f023 0313 	bic.w	r3, r3, #19
 8000a9a:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000aa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa6:	f043 030c 	orr.w	r3, r3, #12
 8000aaa:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <USER_USART1_Init+0x40>)
 8000ab2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab6:	6113      	str	r3, [r2, #16]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <USER_USART1_Transmit>:

void USER_USART1_Transmit(uint8_t *pData, uint16_t size){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	807b      	strh	r3, [r7, #2]
	for(int i=0; i< size; i++){
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e00f      	b.n	8000af6 <USER_USART1_Transmit+0x32>
		while( (USART1->SR & USART_SR_TXE)==0 ){
 8000ad6:	bf00      	nop
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <USER_USART1_Transmit+0x48>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f9      	beq.n	8000ad8 <USER_USART1_Transmit+0x14>

		}
		USART1->DR = *pData++;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <USER_USART1_Transmit+0x48>)
 8000aee:	605a      	str	r2, [r3, #4]
	for(int i=0; i< size; i++){
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	dbeb      	blt.n	8000ad6 <USER_USART1_Transmit+0x12>
	}
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40013800 	.word	0x40013800

08000b10 <USER_USART1_Receive>:

uint8_t USER_USART1_Receive(void){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	while( (USART1->SR & USART_SR_RXNE)==0 ){
 8000b14:	bf00      	nop
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <USER_USART1_Receive+0x20>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f9      	beq.n	8000b16 <USER_USART1_Receive+0x6>

	}
	return USART1->DR;
 8000b22:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <USER_USART1_Receive+0x20>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	b2db      	uxtb	r3, r3

}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40013800 	.word	0x40013800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x5c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_MspInit+0x60>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_MspInit+0x60>)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 f8ab 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f000 fd76 	bl	8001714 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20005000 	.word	0x20005000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	2000008c 	.word	0x2000008c
 8000c5c:	200000a8 	.word	0x200000a8

08000c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c92:	f7ff ffe5 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f000 fd43 	bl	8001720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fd37 	bl	800070c <main>
  bx lr
 8000c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca8:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 8000cac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb0:	200000a4 	.word	0x200000a4

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x28>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f907 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff ff34 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f911 	bl	8000f2a <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d20:	f000 f8e7 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000090 	.word	0x20000090

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000090 	.word	0x20000090

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ebc:	f7ff ff90 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff49 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff5e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffb0 	bl	8000e98 <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e272      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8087 	beq.w	8001072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f64:	4b92      	ldr	r3, [pc, #584]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d00c      	beq.n	8000f8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f70:	4b8f      	ldr	r3, [pc, #572]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d112      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5e>
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d10b      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8a:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d06c      	beq.n	8001070 <HAL_RCC_OscConfig+0x12c>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d168      	bne.n	8001070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e24c      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x76>
 8000fac:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a7f      	ldr	r2, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e02e      	b.n	8001018 <HAL_RCC_OscConfig+0xd4>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x98>
 8000fc2:	4b7b      	ldr	r3, [pc, #492]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a7a      	ldr	r2, [pc, #488]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b78      	ldr	r3, [pc, #480]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a77      	ldr	r2, [pc, #476]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e01d      	b.n	8001018 <HAL_RCC_OscConfig+0xd4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0xbc>
 8000fe6:	4b72      	ldr	r3, [pc, #456]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a71      	ldr	r2, [pc, #452]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6e      	ldr	r2, [pc, #440]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00b      	b.n	8001018 <HAL_RCC_OscConfig+0xd4>
 8001000:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a6a      	ldr	r2, [pc, #424]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a67      	ldr	r2, [pc, #412]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fea2 	bl	8000d68 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fe9e 	bl	8000d68 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e200      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0xe4>
 8001046:	e014      	b.n	8001072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fe8e 	bl	8000d68 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fe8a 	bl	8000d68 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1ec      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x10c>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d063      	beq.n	8001146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800107e:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800108a:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b08      	cmp	r3, #8
 8001094:	d11c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x18c>
 8001096:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d116      	bne.n	80010d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x176>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e1c0      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4939      	ldr	r1, [pc, #228]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	e03a      	b.n	8001146 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_RCC_OscConfig+0x270>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fe43 	bl	8000d68 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fe3f 	bl	8000d68 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1a1      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4927      	ldr	r1, [pc, #156]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_RCC_OscConfig+0x270>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fe22 	bl	8000d68 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fe1e 	bl	8000d68 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e180      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03a      	beq.n	80011c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d019      	beq.n	800118e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_RCC_OscConfig+0x274>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001160:	f7ff fe02 	bl	8000d68 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fdfe 	bl	8000d68 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e160      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f000 faa6 	bl	80016d8 <RCC_Delay>
 800118c:	e01c      	b.n	80011c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_RCC_OscConfig+0x274>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fde8 	bl	8000d68 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119a:	e00f      	b.n	80011bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fde4 	bl	8000d68 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d908      	bls.n	80011bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e146      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	42420000 	.word	0x42420000
 80011b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	4b92      	ldr	r3, [pc, #584]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e9      	bne.n	800119c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a6 	beq.w	8001322 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b88      	ldr	r3, [pc, #544]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a87      	ldr	r2, [pc, #540]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b85      	ldr	r3, [pc, #532]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fe:	2301      	movs	r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b82      	ldr	r3, [pc, #520]	; (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d118      	bne.n	8001240 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120e:	4b7f      	ldr	r3, [pc, #508]	; (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a7e      	ldr	r2, [pc, #504]	; (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121a:	f7ff fda5 	bl	8000d68 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001222:	f7ff fda1 	bl	8000d68 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b64      	cmp	r3, #100	; 0x64
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e103      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	4b75      	ldr	r3, [pc, #468]	; (800140c <HAL_RCC_OscConfig+0x4c8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x312>
 8001248:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6213      	str	r3, [r2, #32]
 8001254:	e02d      	b.n	80012b2 <HAL_RCC_OscConfig+0x36e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x334>
 800125e:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a69      	ldr	r2, [pc, #420]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a66      	ldr	r2, [pc, #408]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	e01c      	b.n	80012b2 <HAL_RCC_OscConfig+0x36e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d10c      	bne.n	800129a <HAL_RCC_OscConfig+0x356>
 8001280:	4b61      	ldr	r3, [pc, #388]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a60      	ldr	r2, [pc, #384]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6213      	str	r3, [r2, #32]
 800128c:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a5d      	ldr	r2, [pc, #372]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	e00b      	b.n	80012b2 <HAL_RCC_OscConfig+0x36e>
 800129a:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a5a      	ldr	r2, [pc, #360]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6213      	str	r3, [r2, #32]
 80012a6:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d015      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fd55 	bl	8000d68 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f7ff fd51 	bl	8000d68 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e0b1      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ee      	beq.n	80012c2 <HAL_RCC_OscConfig+0x37e>
 80012e4:	e014      	b.n	8001310 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fd3f 	bl	8000d68 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fd3b 	bl	8000d68 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e09b      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001304:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1ee      	bne.n	80012ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d105      	bne.n	8001322 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a3b      	ldr	r2, [pc, #236]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8087 	beq.w	800143a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	d061      	beq.n	80013fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d146      	bne.n	80013ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_RCC_OscConfig+0x4cc>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fd0f 	bl	8000d68 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fd0b 	bl	8000d68 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e06d      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d108      	bne.n	8001388 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4921      	ldr	r1, [pc, #132]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a19      	ldr	r1, [r3, #32]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	430b      	orrs	r3, r1
 800139a:	491b      	ldr	r1, [pc, #108]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x4cc>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fcdf 	bl	8000d68 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fcdb 	bl	8000d68 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e03d      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x46a>
 80013cc:	e035      	b.n	800143a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x4cc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fcc8 	bl	8000d68 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fcc4 	bl	8000d68 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e026      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x498>
 80013fa:	e01e      	b.n	800143a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e019      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x500>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	429a      	cmp	r2, r3
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	429a      	cmp	r2, r3
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0d0      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d910      	bls.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b67      	ldr	r3, [pc, #412]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	4965      	ldr	r1, [pc, #404]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0b8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	494d      	ldr	r1, [pc, #308]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d040      	beq.n	8001568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d115      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e073      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06b      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f023 0203 	bic.w	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4936      	ldr	r1, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001538:	f7ff fc16 	bl	8000d68 <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	e00a      	b.n	8001556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001540:	f7ff fc12 	bl	8000d68 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e053      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 020c 	and.w	r2, r3, #12
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	429a      	cmp	r2, r3
 8001566:	d1eb      	bne.n	8001540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d210      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4922      	ldr	r1, [pc, #136]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e032      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d6:	f000 f821 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	490a      	ldr	r1, [pc, #40]	; (8001610 <HAL_RCC_ClockConfig+0x1c8>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1cc>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb74 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	08002110 	.word	0x08002110
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b490      	push	{r4, r7}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001622:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001624:	1d3c      	adds	r4, r7, #4
 8001626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800162c:	f240 2301 	movw	r3, #513	; 0x201
 8001630:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b04      	cmp	r3, #4
 8001654:	d002      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x40>
 8001656:	2b08      	cmp	r3, #8
 8001658:	d003      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x46>
 800165a:	e02b      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800165e:	623b      	str	r3, [r7, #32]
      break;
 8001660:	e02b      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	0c9b      	lsrs	r3, r3, #18
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3328      	adds	r3, #40	; 0x28
 800166c:	443b      	add	r3, r7
 800166e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001672:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0c5b      	lsrs	r3, r3, #17
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	3328      	adds	r3, #40	; 0x28
 800168a:	443b      	add	r3, r7
 800168c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001690:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	e004      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	623b      	str	r3, [r7, #32]
      break;
 80016b2:	e002      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016b6:	623b      	str	r3, [r7, #32]
      break;
 80016b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ba:	6a3b      	ldr	r3, [r7, #32]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc90      	pop	{r4, r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	080020c0 	.word	0x080020c0
 80016cc:	40021000 	.word	0x40021000
 80016d0:	007a1200 	.word	0x007a1200
 80016d4:	003d0900 	.word	0x003d0900

080016d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <RCC_Delay+0x34>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <RCC_Delay+0x38>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0a5b      	lsrs	r3, r3, #9
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f4:	bf00      	nop
  }
  while (Delay --);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1e5a      	subs	r2, r3, #1
 80016fa:	60fa      	str	r2, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <RCC_Delay+0x1c>
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000000 	.word	0x20000000
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <__errno>:
 8001714:	4b01      	ldr	r3, [pc, #4]	; (800171c <__errno+0x8>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000000c 	.word	0x2000000c

08001720 <__libc_init_array>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	2600      	movs	r6, #0
 8001724:	4d0c      	ldr	r5, [pc, #48]	; (8001758 <__libc_init_array+0x38>)
 8001726:	4c0d      	ldr	r4, [pc, #52]	; (800175c <__libc_init_array+0x3c>)
 8001728:	1b64      	subs	r4, r4, r5
 800172a:	10a4      	asrs	r4, r4, #2
 800172c:	42a6      	cmp	r6, r4
 800172e:	d109      	bne.n	8001744 <__libc_init_array+0x24>
 8001730:	f000 fcb0 	bl	8002094 <_init>
 8001734:	2600      	movs	r6, #0
 8001736:	4d0a      	ldr	r5, [pc, #40]	; (8001760 <__libc_init_array+0x40>)
 8001738:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <__libc_init_array+0x44>)
 800173a:	1b64      	subs	r4, r4, r5
 800173c:	10a4      	asrs	r4, r4, #2
 800173e:	42a6      	cmp	r6, r4
 8001740:	d105      	bne.n	800174e <__libc_init_array+0x2e>
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	f855 3b04 	ldr.w	r3, [r5], #4
 8001748:	4798      	blx	r3
 800174a:	3601      	adds	r6, #1
 800174c:	e7ee      	b.n	800172c <__libc_init_array+0xc>
 800174e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001752:	4798      	blx	r3
 8001754:	3601      	adds	r6, #1
 8001756:	e7f2      	b.n	800173e <__libc_init_array+0x1e>
 8001758:	08002154 	.word	0x08002154
 800175c:	08002154 	.word	0x08002154
 8001760:	08002154 	.word	0x08002154
 8001764:	08002158 	.word	0x08002158

08001768 <memset>:
 8001768:	4603      	mov	r3, r0
 800176a:	4402      	add	r2, r0
 800176c:	4293      	cmp	r3, r2
 800176e:	d100      	bne.n	8001772 <memset+0xa>
 8001770:	4770      	bx	lr
 8001772:	f803 1b01 	strb.w	r1, [r3], #1
 8001776:	e7f9      	b.n	800176c <memset+0x4>

08001778 <sniprintf>:
 8001778:	b40c      	push	{r2, r3}
 800177a:	b530      	push	{r4, r5, lr}
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <sniprintf+0x64>)
 800177e:	1e0c      	subs	r4, r1, #0
 8001780:	681d      	ldr	r5, [r3, #0]
 8001782:	b09d      	sub	sp, #116	; 0x74
 8001784:	da08      	bge.n	8001798 <sniprintf+0x20>
 8001786:	238b      	movs	r3, #139	; 0x8b
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178c:	602b      	str	r3, [r5, #0]
 800178e:	b01d      	add	sp, #116	; 0x74
 8001790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001794:	b002      	add	sp, #8
 8001796:	4770      	bx	lr
 8001798:	f44f 7302 	mov.w	r3, #520	; 0x208
 800179c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80017a0:	bf0c      	ite	eq
 80017a2:	4623      	moveq	r3, r4
 80017a4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80017a8:	9304      	str	r3, [sp, #16]
 80017aa:	9307      	str	r3, [sp, #28]
 80017ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b0:	9002      	str	r0, [sp, #8]
 80017b2:	9006      	str	r0, [sp, #24]
 80017b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80017b8:	4628      	mov	r0, r5
 80017ba:	ab21      	add	r3, sp, #132	; 0x84
 80017bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80017be:	a902      	add	r1, sp, #8
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f000 f869 	bl	8001898 <_svfiprintf_r>
 80017c6:	1c43      	adds	r3, r0, #1
 80017c8:	bfbc      	itt	lt
 80017ca:	238b      	movlt	r3, #139	; 0x8b
 80017cc:	602b      	strlt	r3, [r5, #0]
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d0dd      	beq.n	800178e <sniprintf+0x16>
 80017d2:	2200      	movs	r2, #0
 80017d4:	9b02      	ldr	r3, [sp, #8]
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e7d9      	b.n	800178e <sniprintf+0x16>
 80017da:	bf00      	nop
 80017dc:	2000000c 	.word	0x2000000c

080017e0 <__ssputs_r>:
 80017e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017e4:	688e      	ldr	r6, [r1, #8]
 80017e6:	4682      	mov	sl, r0
 80017e8:	429e      	cmp	r6, r3
 80017ea:	460c      	mov	r4, r1
 80017ec:	4690      	mov	r8, r2
 80017ee:	461f      	mov	r7, r3
 80017f0:	d838      	bhi.n	8001864 <__ssputs_r+0x84>
 80017f2:	898a      	ldrh	r2, [r1, #12]
 80017f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017f8:	d032      	beq.n	8001860 <__ssputs_r+0x80>
 80017fa:	6825      	ldr	r5, [r4, #0]
 80017fc:	6909      	ldr	r1, [r1, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	eba5 0901 	sub.w	r9, r5, r1
 8001804:	6965      	ldr	r5, [r4, #20]
 8001806:	444b      	add	r3, r9
 8001808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800180c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001810:	106d      	asrs	r5, r5, #1
 8001812:	429d      	cmp	r5, r3
 8001814:	bf38      	it	cc
 8001816:	461d      	movcc	r5, r3
 8001818:	0553      	lsls	r3, r2, #21
 800181a:	d531      	bpl.n	8001880 <__ssputs_r+0xa0>
 800181c:	4629      	mov	r1, r5
 800181e:	f000 fb6f 	bl	8001f00 <_malloc_r>
 8001822:	4606      	mov	r6, r0
 8001824:	b950      	cbnz	r0, 800183c <__ssputs_r+0x5c>
 8001826:	230c      	movs	r3, #12
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182c:	f8ca 3000 	str.w	r3, [sl]
 8001830:	89a3      	ldrh	r3, [r4, #12]
 8001832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001836:	81a3      	strh	r3, [r4, #12]
 8001838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800183c:	464a      	mov	r2, r9
 800183e:	6921      	ldr	r1, [r4, #16]
 8001840:	f000 face 	bl	8001de0 <memcpy>
 8001844:	89a3      	ldrh	r3, [r4, #12]
 8001846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184e:	81a3      	strh	r3, [r4, #12]
 8001850:	6126      	str	r6, [r4, #16]
 8001852:	444e      	add	r6, r9
 8001854:	6026      	str	r6, [r4, #0]
 8001856:	463e      	mov	r6, r7
 8001858:	6165      	str	r5, [r4, #20]
 800185a:	eba5 0509 	sub.w	r5, r5, r9
 800185e:	60a5      	str	r5, [r4, #8]
 8001860:	42be      	cmp	r6, r7
 8001862:	d900      	bls.n	8001866 <__ssputs_r+0x86>
 8001864:	463e      	mov	r6, r7
 8001866:	4632      	mov	r2, r6
 8001868:	4641      	mov	r1, r8
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	f000 fac6 	bl	8001dfc <memmove>
 8001870:	68a3      	ldr	r3, [r4, #8]
 8001872:	2000      	movs	r0, #0
 8001874:	1b9b      	subs	r3, r3, r6
 8001876:	60a3      	str	r3, [r4, #8]
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	4433      	add	r3, r6
 800187c:	6023      	str	r3, [r4, #0]
 800187e:	e7db      	b.n	8001838 <__ssputs_r+0x58>
 8001880:	462a      	mov	r2, r5
 8001882:	f000 fbb1 	bl	8001fe8 <_realloc_r>
 8001886:	4606      	mov	r6, r0
 8001888:	2800      	cmp	r0, #0
 800188a:	d1e1      	bne.n	8001850 <__ssputs_r+0x70>
 800188c:	4650      	mov	r0, sl
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	f000 face 	bl	8001e30 <_free_r>
 8001894:	e7c7      	b.n	8001826 <__ssputs_r+0x46>
	...

08001898 <_svfiprintf_r>:
 8001898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189c:	4698      	mov	r8, r3
 800189e:	898b      	ldrh	r3, [r1, #12]
 80018a0:	4607      	mov	r7, r0
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	460d      	mov	r5, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	b09d      	sub	sp, #116	; 0x74
 80018aa:	d50e      	bpl.n	80018ca <_svfiprintf_r+0x32>
 80018ac:	690b      	ldr	r3, [r1, #16]
 80018ae:	b963      	cbnz	r3, 80018ca <_svfiprintf_r+0x32>
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	f000 fb25 	bl	8001f00 <_malloc_r>
 80018b6:	6028      	str	r0, [r5, #0]
 80018b8:	6128      	str	r0, [r5, #16]
 80018ba:	b920      	cbnz	r0, 80018c6 <_svfiprintf_r+0x2e>
 80018bc:	230c      	movs	r3, #12
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	e0d1      	b.n	8001a6a <_svfiprintf_r+0x1d2>
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	616b      	str	r3, [r5, #20]
 80018ca:	2300      	movs	r3, #0
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
 80018ce:	2320      	movs	r3, #32
 80018d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018d4:	2330      	movs	r3, #48	; 0x30
 80018d6:	f04f 0901 	mov.w	r9, #1
 80018da:	f8cd 800c 	str.w	r8, [sp, #12]
 80018de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001a84 <_svfiprintf_r+0x1ec>
 80018e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018e6:	4623      	mov	r3, r4
 80018e8:	469a      	mov	sl, r3
 80018ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ee:	b10a      	cbz	r2, 80018f4 <_svfiprintf_r+0x5c>
 80018f0:	2a25      	cmp	r2, #37	; 0x25
 80018f2:	d1f9      	bne.n	80018e8 <_svfiprintf_r+0x50>
 80018f4:	ebba 0b04 	subs.w	fp, sl, r4
 80018f8:	d00b      	beq.n	8001912 <_svfiprintf_r+0x7a>
 80018fa:	465b      	mov	r3, fp
 80018fc:	4622      	mov	r2, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	4638      	mov	r0, r7
 8001902:	f7ff ff6d 	bl	80017e0 <__ssputs_r>
 8001906:	3001      	adds	r0, #1
 8001908:	f000 80aa 	beq.w	8001a60 <_svfiprintf_r+0x1c8>
 800190c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800190e:	445a      	add	r2, fp
 8001910:	9209      	str	r2, [sp, #36]	; 0x24
 8001912:	f89a 3000 	ldrb.w	r3, [sl]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a2 	beq.w	8001a60 <_svfiprintf_r+0x1c8>
 800191c:	2300      	movs	r3, #0
 800191e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001926:	f10a 0a01 	add.w	sl, sl, #1
 800192a:	9304      	str	r3, [sp, #16]
 800192c:	9307      	str	r3, [sp, #28]
 800192e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001932:	931a      	str	r3, [sp, #104]	; 0x68
 8001934:	4654      	mov	r4, sl
 8001936:	2205      	movs	r2, #5
 8001938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800193c:	4851      	ldr	r0, [pc, #324]	; (8001a84 <_svfiprintf_r+0x1ec>)
 800193e:	f000 fa41 	bl	8001dc4 <memchr>
 8001942:	9a04      	ldr	r2, [sp, #16]
 8001944:	b9d8      	cbnz	r0, 800197e <_svfiprintf_r+0xe6>
 8001946:	06d0      	lsls	r0, r2, #27
 8001948:	bf44      	itt	mi
 800194a:	2320      	movmi	r3, #32
 800194c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001950:	0711      	lsls	r1, r2, #28
 8001952:	bf44      	itt	mi
 8001954:	232b      	movmi	r3, #43	; 0x2b
 8001956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800195a:	f89a 3000 	ldrb.w	r3, [sl]
 800195e:	2b2a      	cmp	r3, #42	; 0x2a
 8001960:	d015      	beq.n	800198e <_svfiprintf_r+0xf6>
 8001962:	4654      	mov	r4, sl
 8001964:	2000      	movs	r0, #0
 8001966:	f04f 0c0a 	mov.w	ip, #10
 800196a:	9a07      	ldr	r2, [sp, #28]
 800196c:	4621      	mov	r1, r4
 800196e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001972:	3b30      	subs	r3, #48	; 0x30
 8001974:	2b09      	cmp	r3, #9
 8001976:	d94e      	bls.n	8001a16 <_svfiprintf_r+0x17e>
 8001978:	b1b0      	cbz	r0, 80019a8 <_svfiprintf_r+0x110>
 800197a:	9207      	str	r2, [sp, #28]
 800197c:	e014      	b.n	80019a8 <_svfiprintf_r+0x110>
 800197e:	eba0 0308 	sub.w	r3, r0, r8
 8001982:	fa09 f303 	lsl.w	r3, r9, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	46a2      	mov	sl, r4
 800198a:	9304      	str	r3, [sp, #16]
 800198c:	e7d2      	b.n	8001934 <_svfiprintf_r+0x9c>
 800198e:	9b03      	ldr	r3, [sp, #12]
 8001990:	1d19      	adds	r1, r3, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	9103      	str	r1, [sp, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bfbb      	ittet	lt
 800199a:	425b      	neglt	r3, r3
 800199c:	f042 0202 	orrlt.w	r2, r2, #2
 80019a0:	9307      	strge	r3, [sp, #28]
 80019a2:	9307      	strlt	r3, [sp, #28]
 80019a4:	bfb8      	it	lt
 80019a6:	9204      	strlt	r2, [sp, #16]
 80019a8:	7823      	ldrb	r3, [r4, #0]
 80019aa:	2b2e      	cmp	r3, #46	; 0x2e
 80019ac:	d10c      	bne.n	80019c8 <_svfiprintf_r+0x130>
 80019ae:	7863      	ldrb	r3, [r4, #1]
 80019b0:	2b2a      	cmp	r3, #42	; 0x2a
 80019b2:	d135      	bne.n	8001a20 <_svfiprintf_r+0x188>
 80019b4:	9b03      	ldr	r3, [sp, #12]
 80019b6:	3402      	adds	r4, #2
 80019b8:	1d1a      	adds	r2, r3, #4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	9203      	str	r2, [sp, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfb8      	it	lt
 80019c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80019c6:	9305      	str	r3, [sp, #20]
 80019c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001a88 <_svfiprintf_r+0x1f0>
 80019cc:	2203      	movs	r2, #3
 80019ce:	4650      	mov	r0, sl
 80019d0:	7821      	ldrb	r1, [r4, #0]
 80019d2:	f000 f9f7 	bl	8001dc4 <memchr>
 80019d6:	b140      	cbz	r0, 80019ea <_svfiprintf_r+0x152>
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	eba0 000a 	sub.w	r0, r0, sl
 80019de:	fa03 f000 	lsl.w	r0, r3, r0
 80019e2:	9b04      	ldr	r3, [sp, #16]
 80019e4:	3401      	adds	r4, #1
 80019e6:	4303      	orrs	r3, r0
 80019e8:	9304      	str	r3, [sp, #16]
 80019ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ee:	2206      	movs	r2, #6
 80019f0:	4826      	ldr	r0, [pc, #152]	; (8001a8c <_svfiprintf_r+0x1f4>)
 80019f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019f6:	f000 f9e5 	bl	8001dc4 <memchr>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d038      	beq.n	8001a70 <_svfiprintf_r+0x1d8>
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <_svfiprintf_r+0x1f8>)
 8001a00:	bb1b      	cbnz	r3, 8001a4a <_svfiprintf_r+0x1b2>
 8001a02:	9b03      	ldr	r3, [sp, #12]
 8001a04:	3307      	adds	r3, #7
 8001a06:	f023 0307 	bic.w	r3, r3, #7
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	9303      	str	r3, [sp, #12]
 8001a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a10:	4433      	add	r3, r6
 8001a12:	9309      	str	r3, [sp, #36]	; 0x24
 8001a14:	e767      	b.n	80018e6 <_svfiprintf_r+0x4e>
 8001a16:	460c      	mov	r4, r1
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a1e:	e7a5      	b.n	800196c <_svfiprintf_r+0xd4>
 8001a20:	2300      	movs	r3, #0
 8001a22:	f04f 0c0a 	mov.w	ip, #10
 8001a26:	4619      	mov	r1, r3
 8001a28:	3401      	adds	r4, #1
 8001a2a:	9305      	str	r3, [sp, #20]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a32:	3a30      	subs	r2, #48	; 0x30
 8001a34:	2a09      	cmp	r2, #9
 8001a36:	d903      	bls.n	8001a40 <_svfiprintf_r+0x1a8>
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0c5      	beq.n	80019c8 <_svfiprintf_r+0x130>
 8001a3c:	9105      	str	r1, [sp, #20]
 8001a3e:	e7c3      	b.n	80019c8 <_svfiprintf_r+0x130>
 8001a40:	4604      	mov	r4, r0
 8001a42:	2301      	movs	r3, #1
 8001a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a48:	e7f0      	b.n	8001a2c <_svfiprintf_r+0x194>
 8001a4a:	ab03      	add	r3, sp, #12
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	462a      	mov	r2, r5
 8001a50:	4638      	mov	r0, r7
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_svfiprintf_r+0x1fc>)
 8001a54:	a904      	add	r1, sp, #16
 8001a56:	f3af 8000 	nop.w
 8001a5a:	1c42      	adds	r2, r0, #1
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	d1d6      	bne.n	8001a0e <_svfiprintf_r+0x176>
 8001a60:	89ab      	ldrh	r3, [r5, #12]
 8001a62:	065b      	lsls	r3, r3, #25
 8001a64:	f53f af2c 	bmi.w	80018c0 <_svfiprintf_r+0x28>
 8001a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a6a:	b01d      	add	sp, #116	; 0x74
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	ab03      	add	r3, sp, #12
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	462a      	mov	r2, r5
 8001a76:	4638      	mov	r0, r7
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <_svfiprintf_r+0x1fc>)
 8001a7a:	a904      	add	r1, sp, #16
 8001a7c:	f000 f87c 	bl	8001b78 <_printf_i>
 8001a80:	e7eb      	b.n	8001a5a <_svfiprintf_r+0x1c2>
 8001a82:	bf00      	nop
 8001a84:	08002120 	.word	0x08002120
 8001a88:	08002126 	.word	0x08002126
 8001a8c:	0800212a 	.word	0x0800212a
 8001a90:	00000000 	.word	0x00000000
 8001a94:	080017e1 	.word	0x080017e1

08001a98 <_printf_common>:
 8001a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a9c:	4616      	mov	r6, r2
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	688a      	ldr	r2, [r1, #8]
 8001aa2:	690b      	ldr	r3, [r1, #16]
 8001aa4:	4607      	mov	r7, r0
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	bfb8      	it	lt
 8001aaa:	4613      	movlt	r3, r2
 8001aac:	6033      	str	r3, [r6, #0]
 8001aae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ab8:	b10a      	cbz	r2, 8001abe <_printf_common+0x26>
 8001aba:	3301      	adds	r3, #1
 8001abc:	6033      	str	r3, [r6, #0]
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	0699      	lsls	r1, r3, #26
 8001ac2:	bf42      	ittt	mi
 8001ac4:	6833      	ldrmi	r3, [r6, #0]
 8001ac6:	3302      	addmi	r3, #2
 8001ac8:	6033      	strmi	r3, [r6, #0]
 8001aca:	6825      	ldr	r5, [r4, #0]
 8001acc:	f015 0506 	ands.w	r5, r5, #6
 8001ad0:	d106      	bne.n	8001ae0 <_printf_common+0x48>
 8001ad2:	f104 0a19 	add.w	sl, r4, #25
 8001ad6:	68e3      	ldr	r3, [r4, #12]
 8001ad8:	6832      	ldr	r2, [r6, #0]
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	42ab      	cmp	r3, r5
 8001ade:	dc28      	bgt.n	8001b32 <_printf_common+0x9a>
 8001ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ae4:	1e13      	subs	r3, r2, #0
 8001ae6:	6822      	ldr	r2, [r4, #0]
 8001ae8:	bf18      	it	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	0692      	lsls	r2, r2, #26
 8001aee:	d42d      	bmi.n	8001b4c <_printf_common+0xb4>
 8001af0:	4649      	mov	r1, r9
 8001af2:	4638      	mov	r0, r7
 8001af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001af8:	47c0      	blx	r8
 8001afa:	3001      	adds	r0, #1
 8001afc:	d020      	beq.n	8001b40 <_printf_common+0xa8>
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	68e5      	ldr	r5, [r4, #12]
 8001b02:	f003 0306 	and.w	r3, r3, #6
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf18      	it	ne
 8001b0a:	2500      	movne	r5, #0
 8001b0c:	6832      	ldr	r2, [r6, #0]
 8001b0e:	f04f 0600 	mov.w	r6, #0
 8001b12:	68a3      	ldr	r3, [r4, #8]
 8001b14:	bf08      	it	eq
 8001b16:	1aad      	subeq	r5, r5, r2
 8001b18:	6922      	ldr	r2, [r4, #16]
 8001b1a:	bf08      	it	eq
 8001b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bfc4      	itt	gt
 8001b24:	1a9b      	subgt	r3, r3, r2
 8001b26:	18ed      	addgt	r5, r5, r3
 8001b28:	341a      	adds	r4, #26
 8001b2a:	42b5      	cmp	r5, r6
 8001b2c:	d11a      	bne.n	8001b64 <_printf_common+0xcc>
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e008      	b.n	8001b44 <_printf_common+0xac>
 8001b32:	2301      	movs	r3, #1
 8001b34:	4652      	mov	r2, sl
 8001b36:	4649      	mov	r1, r9
 8001b38:	4638      	mov	r0, r7
 8001b3a:	47c0      	blx	r8
 8001b3c:	3001      	adds	r0, #1
 8001b3e:	d103      	bne.n	8001b48 <_printf_common+0xb0>
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b48:	3501      	adds	r5, #1
 8001b4a:	e7c4      	b.n	8001ad6 <_printf_common+0x3e>
 8001b4c:	2030      	movs	r0, #48	; 0x30
 8001b4e:	18e1      	adds	r1, r4, r3
 8001b50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b5a:	4422      	add	r2, r4
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b62:	e7c5      	b.n	8001af0 <_printf_common+0x58>
 8001b64:	2301      	movs	r3, #1
 8001b66:	4622      	mov	r2, r4
 8001b68:	4649      	mov	r1, r9
 8001b6a:	4638      	mov	r0, r7
 8001b6c:	47c0      	blx	r8
 8001b6e:	3001      	adds	r0, #1
 8001b70:	d0e6      	beq.n	8001b40 <_printf_common+0xa8>
 8001b72:	3601      	adds	r6, #1
 8001b74:	e7d9      	b.n	8001b2a <_printf_common+0x92>
	...

08001b78 <_printf_i>:
 8001b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b7c:	7e0f      	ldrb	r7, [r1, #24]
 8001b7e:	4691      	mov	r9, r2
 8001b80:	2f78      	cmp	r7, #120	; 0x78
 8001b82:	4680      	mov	r8, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	469a      	mov	sl, r3
 8001b88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b8e:	d807      	bhi.n	8001ba0 <_printf_i+0x28>
 8001b90:	2f62      	cmp	r7, #98	; 0x62
 8001b92:	d80a      	bhi.n	8001baa <_printf_i+0x32>
 8001b94:	2f00      	cmp	r7, #0
 8001b96:	f000 80d9 	beq.w	8001d4c <_printf_i+0x1d4>
 8001b9a:	2f58      	cmp	r7, #88	; 0x58
 8001b9c:	f000 80a4 	beq.w	8001ce8 <_printf_i+0x170>
 8001ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ba8:	e03a      	b.n	8001c20 <_printf_i+0xa8>
 8001baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bae:	2b15      	cmp	r3, #21
 8001bb0:	d8f6      	bhi.n	8001ba0 <_printf_i+0x28>
 8001bb2:	a101      	add	r1, pc, #4	; (adr r1, 8001bb8 <_printf_i+0x40>)
 8001bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001bb8:	08001c11 	.word	0x08001c11
 8001bbc:	08001c25 	.word	0x08001c25
 8001bc0:	08001ba1 	.word	0x08001ba1
 8001bc4:	08001ba1 	.word	0x08001ba1
 8001bc8:	08001ba1 	.word	0x08001ba1
 8001bcc:	08001ba1 	.word	0x08001ba1
 8001bd0:	08001c25 	.word	0x08001c25
 8001bd4:	08001ba1 	.word	0x08001ba1
 8001bd8:	08001ba1 	.word	0x08001ba1
 8001bdc:	08001ba1 	.word	0x08001ba1
 8001be0:	08001ba1 	.word	0x08001ba1
 8001be4:	08001d33 	.word	0x08001d33
 8001be8:	08001c55 	.word	0x08001c55
 8001bec:	08001d15 	.word	0x08001d15
 8001bf0:	08001ba1 	.word	0x08001ba1
 8001bf4:	08001ba1 	.word	0x08001ba1
 8001bf8:	08001d55 	.word	0x08001d55
 8001bfc:	08001ba1 	.word	0x08001ba1
 8001c00:	08001c55 	.word	0x08001c55
 8001c04:	08001ba1 	.word	0x08001ba1
 8001c08:	08001ba1 	.word	0x08001ba1
 8001c0c:	08001d1d 	.word	0x08001d1d
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	1d1a      	adds	r2, r3, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	602a      	str	r2, [r5, #0]
 8001c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0a4      	b.n	8001d6e <_printf_i+0x1f6>
 8001c24:	6820      	ldr	r0, [r4, #0]
 8001c26:	6829      	ldr	r1, [r5, #0]
 8001c28:	0606      	lsls	r6, r0, #24
 8001c2a:	f101 0304 	add.w	r3, r1, #4
 8001c2e:	d50a      	bpl.n	8001c46 <_printf_i+0xce>
 8001c30:	680e      	ldr	r6, [r1, #0]
 8001c32:	602b      	str	r3, [r5, #0]
 8001c34:	2e00      	cmp	r6, #0
 8001c36:	da03      	bge.n	8001c40 <_printf_i+0xc8>
 8001c38:	232d      	movs	r3, #45	; 0x2d
 8001c3a:	4276      	negs	r6, r6
 8001c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c40:	230a      	movs	r3, #10
 8001c42:	485e      	ldr	r0, [pc, #376]	; (8001dbc <_printf_i+0x244>)
 8001c44:	e019      	b.n	8001c7a <_printf_i+0x102>
 8001c46:	680e      	ldr	r6, [r1, #0]
 8001c48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	bf18      	it	ne
 8001c50:	b236      	sxthne	r6, r6
 8001c52:	e7ef      	b.n	8001c34 <_printf_i+0xbc>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	1d19      	adds	r1, r3, #4
 8001c5a:	6029      	str	r1, [r5, #0]
 8001c5c:	0601      	lsls	r1, r0, #24
 8001c5e:	d501      	bpl.n	8001c64 <_printf_i+0xec>
 8001c60:	681e      	ldr	r6, [r3, #0]
 8001c62:	e002      	b.n	8001c6a <_printf_i+0xf2>
 8001c64:	0646      	lsls	r6, r0, #25
 8001c66:	d5fb      	bpl.n	8001c60 <_printf_i+0xe8>
 8001c68:	881e      	ldrh	r6, [r3, #0]
 8001c6a:	2f6f      	cmp	r7, #111	; 0x6f
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2308      	moveq	r3, #8
 8001c70:	230a      	movne	r3, #10
 8001c72:	4852      	ldr	r0, [pc, #328]	; (8001dbc <_printf_i+0x244>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c7a:	6865      	ldr	r5, [r4, #4]
 8001c7c:	2d00      	cmp	r5, #0
 8001c7e:	bfa8      	it	ge
 8001c80:	6821      	ldrge	r1, [r4, #0]
 8001c82:	60a5      	str	r5, [r4, #8]
 8001c84:	bfa4      	itt	ge
 8001c86:	f021 0104 	bicge.w	r1, r1, #4
 8001c8a:	6021      	strge	r1, [r4, #0]
 8001c8c:	b90e      	cbnz	r6, 8001c92 <_printf_i+0x11a>
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d04d      	beq.n	8001d2e <_printf_i+0x1b6>
 8001c92:	4615      	mov	r5, r2
 8001c94:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c98:	fb03 6711 	mls	r7, r3, r1, r6
 8001c9c:	5dc7      	ldrb	r7, [r0, r7]
 8001c9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ca2:	4637      	mov	r7, r6
 8001ca4:	42bb      	cmp	r3, r7
 8001ca6:	460e      	mov	r6, r1
 8001ca8:	d9f4      	bls.n	8001c94 <_printf_i+0x11c>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d10b      	bne.n	8001cc6 <_printf_i+0x14e>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	07de      	lsls	r6, r3, #31
 8001cb2:	d508      	bpl.n	8001cc6 <_printf_i+0x14e>
 8001cb4:	6923      	ldr	r3, [r4, #16]
 8001cb6:	6861      	ldr	r1, [r4, #4]
 8001cb8:	4299      	cmp	r1, r3
 8001cba:	bfde      	ittt	le
 8001cbc:	2330      	movle	r3, #48	; 0x30
 8001cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001cc6:	1b52      	subs	r2, r2, r5
 8001cc8:	6122      	str	r2, [r4, #16]
 8001cca:	464b      	mov	r3, r9
 8001ccc:	4621      	mov	r1, r4
 8001cce:	4640      	mov	r0, r8
 8001cd0:	f8cd a000 	str.w	sl, [sp]
 8001cd4:	aa03      	add	r2, sp, #12
 8001cd6:	f7ff fedf 	bl	8001a98 <_printf_common>
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d14c      	bne.n	8001d78 <_printf_i+0x200>
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce2:	b004      	add	sp, #16
 8001ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ce8:	4834      	ldr	r0, [pc, #208]	; (8001dbc <_printf_i+0x244>)
 8001cea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001cee:	6829      	ldr	r1, [r5, #0]
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cf6:	6029      	str	r1, [r5, #0]
 8001cf8:	061d      	lsls	r5, r3, #24
 8001cfa:	d514      	bpl.n	8001d26 <_printf_i+0x1ae>
 8001cfc:	07df      	lsls	r7, r3, #31
 8001cfe:	bf44      	itt	mi
 8001d00:	f043 0320 	orrmi.w	r3, r3, #32
 8001d04:	6023      	strmi	r3, [r4, #0]
 8001d06:	b91e      	cbnz	r6, 8001d10 <_printf_i+0x198>
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f023 0320 	bic.w	r3, r3, #32
 8001d0e:	6023      	str	r3, [r4, #0]
 8001d10:	2310      	movs	r3, #16
 8001d12:	e7af      	b.n	8001c74 <_printf_i+0xfc>
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	f043 0320 	orr.w	r3, r3, #32
 8001d1a:	6023      	str	r3, [r4, #0]
 8001d1c:	2378      	movs	r3, #120	; 0x78
 8001d1e:	4828      	ldr	r0, [pc, #160]	; (8001dc0 <_printf_i+0x248>)
 8001d20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d24:	e7e3      	b.n	8001cee <_printf_i+0x176>
 8001d26:	0659      	lsls	r1, r3, #25
 8001d28:	bf48      	it	mi
 8001d2a:	b2b6      	uxthmi	r6, r6
 8001d2c:	e7e6      	b.n	8001cfc <_printf_i+0x184>
 8001d2e:	4615      	mov	r5, r2
 8001d30:	e7bb      	b.n	8001caa <_printf_i+0x132>
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	6826      	ldr	r6, [r4, #0]
 8001d36:	1d18      	adds	r0, r3, #4
 8001d38:	6961      	ldr	r1, [r4, #20]
 8001d3a:	6028      	str	r0, [r5, #0]
 8001d3c:	0635      	lsls	r5, r6, #24
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	d501      	bpl.n	8001d46 <_printf_i+0x1ce>
 8001d42:	6019      	str	r1, [r3, #0]
 8001d44:	e002      	b.n	8001d4c <_printf_i+0x1d4>
 8001d46:	0670      	lsls	r0, r6, #25
 8001d48:	d5fb      	bpl.n	8001d42 <_printf_i+0x1ca>
 8001d4a:	8019      	strh	r1, [r3, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4615      	mov	r5, r2
 8001d50:	6123      	str	r3, [r4, #16]
 8001d52:	e7ba      	b.n	8001cca <_printf_i+0x152>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	2100      	movs	r1, #0
 8001d58:	1d1a      	adds	r2, r3, #4
 8001d5a:	602a      	str	r2, [r5, #0]
 8001d5c:	681d      	ldr	r5, [r3, #0]
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	4628      	mov	r0, r5
 8001d62:	f000 f82f 	bl	8001dc4 <memchr>
 8001d66:	b108      	cbz	r0, 8001d6c <_printf_i+0x1f4>
 8001d68:	1b40      	subs	r0, r0, r5
 8001d6a:	6060      	str	r0, [r4, #4]
 8001d6c:	6863      	ldr	r3, [r4, #4]
 8001d6e:	6123      	str	r3, [r4, #16]
 8001d70:	2300      	movs	r3, #0
 8001d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d76:	e7a8      	b.n	8001cca <_printf_i+0x152>
 8001d78:	462a      	mov	r2, r5
 8001d7a:	4649      	mov	r1, r9
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	6923      	ldr	r3, [r4, #16]
 8001d80:	47d0      	blx	sl
 8001d82:	3001      	adds	r0, #1
 8001d84:	d0ab      	beq.n	8001cde <_printf_i+0x166>
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	079b      	lsls	r3, r3, #30
 8001d8a:	d413      	bmi.n	8001db4 <_printf_i+0x23c>
 8001d8c:	68e0      	ldr	r0, [r4, #12]
 8001d8e:	9b03      	ldr	r3, [sp, #12]
 8001d90:	4298      	cmp	r0, r3
 8001d92:	bfb8      	it	lt
 8001d94:	4618      	movlt	r0, r3
 8001d96:	e7a4      	b.n	8001ce2 <_printf_i+0x16a>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	4640      	mov	r0, r8
 8001da0:	47d0      	blx	sl
 8001da2:	3001      	adds	r0, #1
 8001da4:	d09b      	beq.n	8001cde <_printf_i+0x166>
 8001da6:	3501      	adds	r5, #1
 8001da8:	68e3      	ldr	r3, [r4, #12]
 8001daa:	9903      	ldr	r1, [sp, #12]
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	42ab      	cmp	r3, r5
 8001db0:	dcf2      	bgt.n	8001d98 <_printf_i+0x220>
 8001db2:	e7eb      	b.n	8001d8c <_printf_i+0x214>
 8001db4:	2500      	movs	r5, #0
 8001db6:	f104 0619 	add.w	r6, r4, #25
 8001dba:	e7f5      	b.n	8001da8 <_printf_i+0x230>
 8001dbc:	08002131 	.word	0x08002131
 8001dc0:	08002142 	.word	0x08002142

08001dc4 <memchr>:
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b510      	push	{r4, lr}
 8001dc8:	b2c9      	uxtb	r1, r1
 8001dca:	4402      	add	r2, r0
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	d101      	bne.n	8001dd6 <memchr+0x12>
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e003      	b.n	8001dde <memchr+0x1a>
 8001dd6:	7804      	ldrb	r4, [r0, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	428c      	cmp	r4, r1
 8001ddc:	d1f6      	bne.n	8001dcc <memchr+0x8>
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <memcpy>:
 8001de0:	440a      	add	r2, r1
 8001de2:	4291      	cmp	r1, r2
 8001de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001de8:	d100      	bne.n	8001dec <memcpy+0xc>
 8001dea:	4770      	bx	lr
 8001dec:	b510      	push	{r4, lr}
 8001dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001df2:	4291      	cmp	r1, r2
 8001df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001df8:	d1f9      	bne.n	8001dee <memcpy+0xe>
 8001dfa:	bd10      	pop	{r4, pc}

08001dfc <memmove>:
 8001dfc:	4288      	cmp	r0, r1
 8001dfe:	b510      	push	{r4, lr}
 8001e00:	eb01 0402 	add.w	r4, r1, r2
 8001e04:	d902      	bls.n	8001e0c <memmove+0x10>
 8001e06:	4284      	cmp	r4, r0
 8001e08:	4623      	mov	r3, r4
 8001e0a:	d807      	bhi.n	8001e1c <memmove+0x20>
 8001e0c:	1e43      	subs	r3, r0, #1
 8001e0e:	42a1      	cmp	r1, r4
 8001e10:	d008      	beq.n	8001e24 <memmove+0x28>
 8001e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e1a:	e7f8      	b.n	8001e0e <memmove+0x12>
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	4402      	add	r2, r0
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d100      	bne.n	8001e26 <memmove+0x2a>
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e2e:	e7f7      	b.n	8001e20 <memmove+0x24>

08001e30 <_free_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4605      	mov	r5, r0
 8001e34:	2900      	cmp	r1, #0
 8001e36:	d040      	beq.n	8001eba <_free_r+0x8a>
 8001e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e3c:	1f0c      	subs	r4, r1, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfb8      	it	lt
 8001e42:	18e4      	addlt	r4, r4, r3
 8001e44:	f000 f910 	bl	8002068 <__malloc_lock>
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <_free_r+0x8c>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	b933      	cbnz	r3, 8001e5c <_free_r+0x2c>
 8001e4e:	6063      	str	r3, [r4, #4]
 8001e50:	6014      	str	r4, [r2, #0]
 8001e52:	4628      	mov	r0, r5
 8001e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e58:	f000 b90c 	b.w	8002074 <__malloc_unlock>
 8001e5c:	42a3      	cmp	r3, r4
 8001e5e:	d908      	bls.n	8001e72 <_free_r+0x42>
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	1821      	adds	r1, r4, r0
 8001e64:	428b      	cmp	r3, r1
 8001e66:	bf01      	itttt	eq
 8001e68:	6819      	ldreq	r1, [r3, #0]
 8001e6a:	685b      	ldreq	r3, [r3, #4]
 8001e6c:	1809      	addeq	r1, r1, r0
 8001e6e:	6021      	streq	r1, [r4, #0]
 8001e70:	e7ed      	b.n	8001e4e <_free_r+0x1e>
 8001e72:	461a      	mov	r2, r3
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	b10b      	cbz	r3, 8001e7c <_free_r+0x4c>
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	d9fa      	bls.n	8001e72 <_free_r+0x42>
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	1850      	adds	r0, r2, r1
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d10b      	bne.n	8001e9c <_free_r+0x6c>
 8001e84:	6820      	ldr	r0, [r4, #0]
 8001e86:	4401      	add	r1, r0
 8001e88:	1850      	adds	r0, r2, r1
 8001e8a:	4283      	cmp	r3, r0
 8001e8c:	6011      	str	r1, [r2, #0]
 8001e8e:	d1e0      	bne.n	8001e52 <_free_r+0x22>
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4401      	add	r1, r0
 8001e96:	6011      	str	r1, [r2, #0]
 8001e98:	6053      	str	r3, [r2, #4]
 8001e9a:	e7da      	b.n	8001e52 <_free_r+0x22>
 8001e9c:	d902      	bls.n	8001ea4 <_free_r+0x74>
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	602b      	str	r3, [r5, #0]
 8001ea2:	e7d6      	b.n	8001e52 <_free_r+0x22>
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	1821      	adds	r1, r4, r0
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	bf01      	itttt	eq
 8001eac:	6819      	ldreq	r1, [r3, #0]
 8001eae:	685b      	ldreq	r3, [r3, #4]
 8001eb0:	1809      	addeq	r1, r1, r0
 8001eb2:	6021      	streq	r1, [r4, #0]
 8001eb4:	6063      	str	r3, [r4, #4]
 8001eb6:	6054      	str	r4, [r2, #4]
 8001eb8:	e7cb      	b.n	8001e52 <_free_r+0x22>
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	20000094 	.word	0x20000094

08001ec0 <sbrk_aligned>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	4e0e      	ldr	r6, [pc, #56]	; (8001efc <sbrk_aligned+0x3c>)
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	6831      	ldr	r1, [r6, #0]
 8001ec8:	4605      	mov	r5, r0
 8001eca:	b911      	cbnz	r1, 8001ed2 <sbrk_aligned+0x12>
 8001ecc:	f000 f8bc 	bl	8002048 <_sbrk_r>
 8001ed0:	6030      	str	r0, [r6, #0]
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f000 f8b7 	bl	8002048 <_sbrk_r>
 8001eda:	1c43      	adds	r3, r0, #1
 8001edc:	d00a      	beq.n	8001ef4 <sbrk_aligned+0x34>
 8001ede:	1cc4      	adds	r4, r0, #3
 8001ee0:	f024 0403 	bic.w	r4, r4, #3
 8001ee4:	42a0      	cmp	r0, r4
 8001ee6:	d007      	beq.n	8001ef8 <sbrk_aligned+0x38>
 8001ee8:	1a21      	subs	r1, r4, r0
 8001eea:	4628      	mov	r0, r5
 8001eec:	f000 f8ac 	bl	8002048 <_sbrk_r>
 8001ef0:	3001      	adds	r0, #1
 8001ef2:	d101      	bne.n	8001ef8 <sbrk_aligned+0x38>
 8001ef4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001ef8:	4620      	mov	r0, r4
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	20000098 	.word	0x20000098

08001f00 <_malloc_r>:
 8001f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f04:	1ccd      	adds	r5, r1, #3
 8001f06:	f025 0503 	bic.w	r5, r5, #3
 8001f0a:	3508      	adds	r5, #8
 8001f0c:	2d0c      	cmp	r5, #12
 8001f0e:	bf38      	it	cc
 8001f10:	250c      	movcc	r5, #12
 8001f12:	2d00      	cmp	r5, #0
 8001f14:	4607      	mov	r7, r0
 8001f16:	db01      	blt.n	8001f1c <_malloc_r+0x1c>
 8001f18:	42a9      	cmp	r1, r5
 8001f1a:	d905      	bls.n	8001f28 <_malloc_r+0x28>
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	2600      	movs	r6, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4630      	mov	r0, r6
 8001f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f28:	4e2e      	ldr	r6, [pc, #184]	; (8001fe4 <_malloc_r+0xe4>)
 8001f2a:	f000 f89d 	bl	8002068 <__malloc_lock>
 8001f2e:	6833      	ldr	r3, [r6, #0]
 8001f30:	461c      	mov	r4, r3
 8001f32:	bb34      	cbnz	r4, 8001f82 <_malloc_r+0x82>
 8001f34:	4629      	mov	r1, r5
 8001f36:	4638      	mov	r0, r7
 8001f38:	f7ff ffc2 	bl	8001ec0 <sbrk_aligned>
 8001f3c:	1c43      	adds	r3, r0, #1
 8001f3e:	4604      	mov	r4, r0
 8001f40:	d14d      	bne.n	8001fde <_malloc_r+0xde>
 8001f42:	6834      	ldr	r4, [r6, #0]
 8001f44:	4626      	mov	r6, r4
 8001f46:	2e00      	cmp	r6, #0
 8001f48:	d140      	bne.n	8001fcc <_malloc_r+0xcc>
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	4631      	mov	r1, r6
 8001f4e:	4638      	mov	r0, r7
 8001f50:	eb04 0803 	add.w	r8, r4, r3
 8001f54:	f000 f878 	bl	8002048 <_sbrk_r>
 8001f58:	4580      	cmp	r8, r0
 8001f5a:	d13a      	bne.n	8001fd2 <_malloc_r+0xd2>
 8001f5c:	6821      	ldr	r1, [r4, #0]
 8001f5e:	3503      	adds	r5, #3
 8001f60:	1a6d      	subs	r5, r5, r1
 8001f62:	f025 0503 	bic.w	r5, r5, #3
 8001f66:	3508      	adds	r5, #8
 8001f68:	2d0c      	cmp	r5, #12
 8001f6a:	bf38      	it	cc
 8001f6c:	250c      	movcc	r5, #12
 8001f6e:	4638      	mov	r0, r7
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7ff ffa5 	bl	8001ec0 <sbrk_aligned>
 8001f76:	3001      	adds	r0, #1
 8001f78:	d02b      	beq.n	8001fd2 <_malloc_r+0xd2>
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	442b      	add	r3, r5
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	e00e      	b.n	8001fa0 <_malloc_r+0xa0>
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	1b52      	subs	r2, r2, r5
 8001f86:	d41e      	bmi.n	8001fc6 <_malloc_r+0xc6>
 8001f88:	2a0b      	cmp	r2, #11
 8001f8a:	d916      	bls.n	8001fba <_malloc_r+0xba>
 8001f8c:	1961      	adds	r1, r4, r5
 8001f8e:	42a3      	cmp	r3, r4
 8001f90:	6025      	str	r5, [r4, #0]
 8001f92:	bf18      	it	ne
 8001f94:	6059      	strne	r1, [r3, #4]
 8001f96:	6863      	ldr	r3, [r4, #4]
 8001f98:	bf08      	it	eq
 8001f9a:	6031      	streq	r1, [r6, #0]
 8001f9c:	5162      	str	r2, [r4, r5]
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	f104 060b 	add.w	r6, r4, #11
 8001fa6:	f000 f865 	bl	8002074 <__malloc_unlock>
 8001faa:	f026 0607 	bic.w	r6, r6, #7
 8001fae:	1d23      	adds	r3, r4, #4
 8001fb0:	1af2      	subs	r2, r6, r3
 8001fb2:	d0b6      	beq.n	8001f22 <_malloc_r+0x22>
 8001fb4:	1b9b      	subs	r3, r3, r6
 8001fb6:	50a3      	str	r3, [r4, r2]
 8001fb8:	e7b3      	b.n	8001f22 <_malloc_r+0x22>
 8001fba:	6862      	ldr	r2, [r4, #4]
 8001fbc:	42a3      	cmp	r3, r4
 8001fbe:	bf0c      	ite	eq
 8001fc0:	6032      	streq	r2, [r6, #0]
 8001fc2:	605a      	strne	r2, [r3, #4]
 8001fc4:	e7ec      	b.n	8001fa0 <_malloc_r+0xa0>
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	6864      	ldr	r4, [r4, #4]
 8001fca:	e7b2      	b.n	8001f32 <_malloc_r+0x32>
 8001fcc:	4634      	mov	r4, r6
 8001fce:	6876      	ldr	r6, [r6, #4]
 8001fd0:	e7b9      	b.n	8001f46 <_malloc_r+0x46>
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	f000 f84c 	bl	8002074 <__malloc_unlock>
 8001fdc:	e7a1      	b.n	8001f22 <_malloc_r+0x22>
 8001fde:	6025      	str	r5, [r4, #0]
 8001fe0:	e7de      	b.n	8001fa0 <_malloc_r+0xa0>
 8001fe2:	bf00      	nop
 8001fe4:	20000094 	.word	0x20000094

08001fe8 <_realloc_r>:
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fec:	4680      	mov	r8, r0
 8001fee:	4614      	mov	r4, r2
 8001ff0:	460e      	mov	r6, r1
 8001ff2:	b921      	cbnz	r1, 8001ffe <_realloc_r+0x16>
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffa:	f7ff bf81 	b.w	8001f00 <_malloc_r>
 8001ffe:	b92a      	cbnz	r2, 800200c <_realloc_r+0x24>
 8002000:	f7ff ff16 	bl	8001e30 <_free_r>
 8002004:	4625      	mov	r5, r4
 8002006:	4628      	mov	r0, r5
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800200c:	f000 f838 	bl	8002080 <_malloc_usable_size_r>
 8002010:	4284      	cmp	r4, r0
 8002012:	4607      	mov	r7, r0
 8002014:	d802      	bhi.n	800201c <_realloc_r+0x34>
 8002016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800201a:	d812      	bhi.n	8002042 <_realloc_r+0x5a>
 800201c:	4621      	mov	r1, r4
 800201e:	4640      	mov	r0, r8
 8002020:	f7ff ff6e 	bl	8001f00 <_malloc_r>
 8002024:	4605      	mov	r5, r0
 8002026:	2800      	cmp	r0, #0
 8002028:	d0ed      	beq.n	8002006 <_realloc_r+0x1e>
 800202a:	42bc      	cmp	r4, r7
 800202c:	4622      	mov	r2, r4
 800202e:	4631      	mov	r1, r6
 8002030:	bf28      	it	cs
 8002032:	463a      	movcs	r2, r7
 8002034:	f7ff fed4 	bl	8001de0 <memcpy>
 8002038:	4631      	mov	r1, r6
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff fef8 	bl	8001e30 <_free_r>
 8002040:	e7e1      	b.n	8002006 <_realloc_r+0x1e>
 8002042:	4635      	mov	r5, r6
 8002044:	e7df      	b.n	8002006 <_realloc_r+0x1e>
	...

08002048 <_sbrk_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	2300      	movs	r3, #0
 800204c:	4d05      	ldr	r5, [pc, #20]	; (8002064 <_sbrk_r+0x1c>)
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	602b      	str	r3, [r5, #0]
 8002054:	f7fe fdce 	bl	8000bf4 <_sbrk>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_sbrk_r+0x1a>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	b103      	cbz	r3, 8002062 <_sbrk_r+0x1a>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	2000009c 	.word	0x2000009c

08002068 <__malloc_lock>:
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <__malloc_lock+0x8>)
 800206a:	f000 b811 	b.w	8002090 <__retarget_lock_acquire_recursive>
 800206e:	bf00      	nop
 8002070:	200000a0 	.word	0x200000a0

08002074 <__malloc_unlock>:
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <__malloc_unlock+0x8>)
 8002076:	f000 b80c 	b.w	8002092 <__retarget_lock_release_recursive>
 800207a:	bf00      	nop
 800207c:	200000a0 	.word	0x200000a0

08002080 <_malloc_usable_size_r>:
 8002080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002084:	1f18      	subs	r0, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	bfbc      	itt	lt
 800208a:	580b      	ldrlt	r3, [r1, r0]
 800208c:	18c0      	addlt	r0, r0, r3
 800208e:	4770      	bx	lr

08002090 <__retarget_lock_acquire_recursive>:
 8002090:	4770      	bx	lr

08002092 <__retarget_lock_release_recursive>:
 8002092:	4770      	bx	lr

08002094 <_init>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	bf00      	nop
 8002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209a:	bc08      	pop	{r3}
 800209c:	469e      	mov	lr, r3
 800209e:	4770      	bx	lr

080020a0 <_fini>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr
