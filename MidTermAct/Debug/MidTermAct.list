
MidTermAct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080020fc  080020fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a4  080021a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021a4  080021a4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a4  080021a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  0800221c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800221c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fc9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fbb  00000000  00000000  00023062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00024020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b8  00000000  00000000  00024470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c32  00000000  00000000  00024828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c8d  00000000  00000000  0003a45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da1c  00000000  00000000  0003f0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bcb03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000133c  00000000  00000000  000bcb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080020e4 	.word	0x080020e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080020e4 	.word	0x080020e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <USER_TIM2_Delay>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};


// Timer delay
void USER_TIM2_Delay(uint16_t x, uint16_t y){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	460a      	mov	r2, r1
 8000166:	80fb      	strh	r3, [r7, #6]
 8000168:	4613      	mov	r3, r2
 800016a:	80bb      	strh	r3, [r7, #4]
	TIM2->SMCR &= ~TIM_SMCR_ECE		// External clock 2 mode disabled
 800016c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800017a:	f023 0307 	bic.w	r3, r3, #7
 800017e:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;	// slave mode disabled / internal clock

	// Timer 2 control register 1
	TIM2->CR1 &= ~TIM_CR1_CMS 		//
 8000180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800018a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800018e:	6013      	str	r3, [r2, #0]
			  &	 ~TIM_CR1_DIR
			  &	 ~TIM_CR1_URS
			  &	 ~TIM_CR1_UDIS
			  &	 ~TIM_CR1_CEN;
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800019a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800019e:	6013      	str	r3, [r2, #0]

	TIM2->PSC = x;
 80001a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001a4:	88fb      	ldrh	r3, [r7, #6]
 80001a6:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->ARR = y;
 80001a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ac:	88bb      	ldrh	r3, [r7, #4]
 80001ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80001b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001b4:	695b      	ldr	r3, [r3, #20]
 80001b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ba:	f043 0301 	orr.w	r3, r3, #1
 80001be:	6153      	str	r3, [r2, #20]
	TIM2->SR  &= ~TIM_SR_UIF;
 80001c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ca:	f023 0301 	bic.w	r3, r3, #1
 80001ce:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 80001d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]
	while((TIM2->SR & TIM_SR_UIF) == 0){
 80001e0:	bf00      	nop
 80001e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f8      	beq.n	80001e2 <USER_TIM2_Delay+0x86>

	}

	TIM2->CR1 &= ~TIM_CR1_CEN;
 80001f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001fa:	f023 0301 	bic.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
	...

0800020c <LCD_Init>:

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	char const *p;

	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN; //		I/O port B clock enabled
 8000212:	4b59      	ldr	r3, [pc, #356]	; (8000378 <LCD_Init+0x16c>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	4a58      	ldr	r2, [pc, #352]	; (8000378 <LCD_Init+0x16c>)
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	6193      	str	r3, [r2, #24]

	// Configuracion de todos los pines hacia el LCD
	/* As general purpose output push-pull, 10 MHz speed
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	*/
	GPIOB->CRH	&= ~GPIO_CRH_CNF12 & ~GPIO_CRH_MODE12_1;
 800021e:	4b57      	ldr	r3, [pc, #348]	; (800037c <LCD_Init+0x170>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4a56      	ldr	r2, [pc, #344]	; (800037c <LCD_Init+0x170>)
 8000224:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000228:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE12_0;
 800022a:	4b54      	ldr	r3, [pc, #336]	; (800037c <LCD_Init+0x170>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a53      	ldr	r2, [pc, #332]	; (800037c <LCD_Init+0x170>)
 8000230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000234:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000236:	4b51      	ldr	r3, [pc, #324]	; (800037c <LCD_Init+0x170>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a50      	ldr	r2, [pc, #320]	; (800037c <LCD_Init+0x170>)
 800023c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000240:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE13_0;
 8000242:	4b4e      	ldr	r3, [pc, #312]	; (800037c <LCD_Init+0x170>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a4d      	ldr	r2, [pc, #308]	; (800037c <LCD_Init+0x170>)
 8000248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF14 & ~GPIO_CRH_MODE14_1;
 800024e:	4b4b      	ldr	r3, [pc, #300]	; (800037c <LCD_Init+0x170>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	4a4a      	ldr	r2, [pc, #296]	; (800037c <LCD_Init+0x170>)
 8000254:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000258:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE14_0;
 800025a:	4b48      	ldr	r3, [pc, #288]	; (800037c <LCD_Init+0x170>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	4a47      	ldr	r2, [pc, #284]	; (800037c <LCD_Init+0x170>)
 8000260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000264:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000266:	4b45      	ldr	r3, [pc, #276]	; (800037c <LCD_Init+0x170>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a44      	ldr	r2, [pc, #272]	; (800037c <LCD_Init+0x170>)
 800026c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000270:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000272:	4b42      	ldr	r3, [pc, #264]	; (800037c <LCD_Init+0x170>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	4a41      	ldr	r2, [pc, #260]	; (800037c <LCD_Init+0x170>)
 8000278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027c:	6053      	str	r3, [r2, #4]

	GPIOB->CRH	&= ~GPIO_CRH_CNF10 & ~GPIO_CRH_MODE10_1;
 800027e:	4b3f      	ldr	r3, [pc, #252]	; (800037c <LCD_Init+0x170>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a3e      	ldr	r2, [pc, #248]	; (800037c <LCD_Init+0x170>)
 8000284:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000288:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|= GPIO_CRH_MODE10_0;
 800028a:	4b3c      	ldr	r3, [pc, #240]	; (800037c <LCD_Init+0x170>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a3b      	ldr	r2, [pc, #236]	; (800037c <LCD_Init+0x170>)
 8000290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000294:	6053      	str	r3, [r2, #4]

	GPIOB->CRL	&= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8000296:	4b39      	ldr	r3, [pc, #228]	; (800037c <LCD_Init+0x170>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a38      	ldr	r2, [pc, #224]	; (800037c <LCD_Init+0x170>)
 800029c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80002a0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE1_0;
 80002a2:	4b36      	ldr	r3, [pc, #216]	; (800037c <LCD_Init+0x170>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a35      	ldr	r2, [pc, #212]	; (800037c <LCD_Init+0x170>)
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	6013      	str	r3, [r2, #0]

	GPIOB->CRL	&= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 80002ae:	4b33      	ldr	r3, [pc, #204]	; (800037c <LCD_Init+0x170>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a32      	ldr	r2, [pc, #200]	; (800037c <LCD_Init+0x170>)
 80002b4:	f023 030e 	bic.w	r3, r3, #14
 80002b8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL	|= GPIO_CRL_MODE0_0;
 80002ba:	4b30      	ldr	r3, [pc, #192]	; (800037c <LCD_Init+0x170>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a2f      	ldr	r2, [pc, #188]	; (800037c <LCD_Init+0x170>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]

	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <LCD_Init+0x170>)
 80002c8:	4a2d      	ldr	r2, [pc, #180]	; (8000380 <LCD_Init+0x174>)
 80002ca:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	USER_TIM2_Delay(30, 36000); //		delay of 15ms
 80002cc:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80002d0:	201e      	movs	r0, #30
 80002d2:	f7ff ff43 	bl	800015c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002d6:	4b29      	ldr	r3, [pc, #164]	; (800037c <LCD_Init+0x170>)
 80002d8:	4a29      	ldr	r2, [pc, #164]	; (8000380 <LCD_Init+0x174>)
 80002da:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80002dc:	f000 f950 	bl	8000580 <LCD_Pulse_EN>
	USER_TIM2_Delay(4, 59039);//		delay of 4.1ms
 80002e0:	f24e 619f 	movw	r1, #59039	; 0xe69f
 80002e4:	2004      	movs	r0, #4
 80002e6:	f7ff ff39 	bl	800015c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002ea:	4b24      	ldr	r3, [pc, #144]	; (800037c <LCD_Init+0x170>)
 80002ec:	4a24      	ldr	r2, [pc, #144]	; (8000380 <LCD_Init+0x174>)
 80002ee:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 80002f0:	f000 f946 	bl	8000580 <LCD_Pulse_EN>
	USER_TIM2_Delay(0, 7199);//     delay of 100us
 80002f4:	f641 411f 	movw	r1, #7199	; 0x1c1f
 80002f8:	2000      	movs	r0, #0
 80002fa:	f7ff ff2f 	bl	800015c <USER_TIM2_Delay>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <LCD_Init+0x170>)
 8000300:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <LCD_Init+0x174>)
 8000302:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000304:	f000 f93c 	bl	8000580 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que el LCD este operativo
 8000308:	bf00      	nop
 800030a:	f000 f8f3 	bl	80004f4 <LCD_Busy>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1fa      	bne.n	800030a <LCD_Init+0xfe>
	GPIOB->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <LCD_Init+0x170>)
 8000316:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <LCD_Init+0x178>)
 8000318:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800031a:	f000 f931 	bl	8000580 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que se complete
 800031e:	bf00      	nop
 8000320:	f000 f8e8 	bl	80004f4 <LCD_Busy>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1fa      	bne.n	8000320 <LCD_Init+0x114>
	LCD_Write_Cmd( 0x28U );//					establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 800032a:	2028      	movs	r0, #40	; 0x28
 800032c:	f000 f894 	bl	8000458 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//					enciende el LCD sin cursor
 8000330:	200c      	movs	r0, #12
 8000332:	f000 f891 	bl	8000458 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//					inicializa cursor
 8000336:	2006      	movs	r0, #6
 8000338:	f000 f88e 	bl	8000458 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 800033c:	2040      	movs	r0, #64	; 0x40
 800033e:	f000 f88b 	bl	8000458 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <LCD_Init+0x17c>)
 8000344:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	e00a      	b.n	8000362 <LCD_Init+0x156>
		LCD_Put_Char( *p );
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f895 	bl	8000480 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	2b3f      	cmp	r3, #63	; 0x3f
 8000366:	d9f1      	bls.n	800034c <LCD_Init+0x140>

	LCD_Write_Cmd( 0x80 );
 8000368:	2080      	movs	r0, #128	; 0x80
 800036a:	f000 f875 	bl	8000458 <LCD_Write_Cmd>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	c0003000 	.word	0xc0003000
 8000384:	d0002000 	.word	0xd0002000
 8000388:	08002120 	.word	0x08002120

0800038c <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//						Bit[0]
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d004      	beq.n	80003aa <LCD_Out_Data4+0x1e>
		GPIOB->BSRR	=	1U << LCD_D4_PIN_HIGH;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <LCD_Out_Data4+0x84>)
 80003a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	e003      	b.n	80003b2 <LCD_Out_Data4+0x26>
	else
		GPIOB->BSRR	=	1U << LCD_D4_PIN_LOW;
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <LCD_Out_Data4+0x84>)
 80003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//						Bit[1]
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0302 	and.w	r3, r3, #2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d004      	beq.n	80003c6 <LCD_Out_Data4+0x3a>
		GPIOB->BSRR	=	1U << LCD_D5_PIN_HIGH;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <LCD_Out_Data4+0x84>)
 80003be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	e003      	b.n	80003ce <LCD_Out_Data4+0x42>
	else
		GPIOB->BSRR	=	1U << LCD_D5_PIN_LOW;
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <LCD_Out_Data4+0x84>)
 80003c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003cc:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//						Bit[2]
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d004      	beq.n	80003e2 <LCD_Out_Data4+0x56>
		GPIOB->BSRR	=	1U << LCD_D6_PIN_HIGH;
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <LCD_Out_Data4+0x84>)
 80003da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	e003      	b.n	80003ea <LCD_Out_Data4+0x5e>
	else
		GPIOB->BSRR	=	1U << LCD_D6_PIN_LOW;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <LCD_Out_Data4+0x84>)
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//						Bit[3]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d004      	beq.n	80003fe <LCD_Out_Data4+0x72>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_HIGH;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LCD_Out_Data4+0x84>)
 80003f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003fa:	611a      	str	r2, [r3, #16]
	else
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 80003fc:	e003      	b.n	8000406 <LCD_Out_Data4+0x7a>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <LCD_Out_Data4+0x84>)
 8000400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000404:	611a      	str	r2, [r3, #16]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40010c00 	.word	0x40010c00

08000414 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ffb1 	bl	800038c <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800042a:	f000 f8a9 	bl	8000580 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	f003 030f 	and.w	r3, r3, #15
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffa8 	bl	800038c <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800043c:	f000 f8a0 	bl	8000580 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000440:	bf00      	nop
 8000442:	f000 f857 	bl	80004f4 <LCD_Busy>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1fa      	bne.n	8000442 <LCD_Write_Byte+0x2e>
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	=	1U << LCD_RS_PIN_LOW;//					RS=0 (seleccion de comando)
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <LCD_Write_Cmd+0x24>)
 8000464:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000468:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ffd1 	bl	8000414 <LCD_Write_Byte>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010c00 	.word	0x40010c00

08000480 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	= 1U << LCD_RS_PIN_HIGH;//				RS=1 (seleccion de caracteres)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <LCD_Put_Char+0x20>)
 800048c:	2201      	movs	r2, #1
 800048e:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte(c);
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ffbe 	bl	8000414 <LCD_Write_Byte>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	460a      	mov	r2, r1
 80004ae:	71fb      	strb	r3, [r7, #7]
 80004b0:	4613      	mov	r3, r2
 80004b2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <LCD_Set_Cursor+0x1c>
		column--;
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	3b01      	subs	r3, #1
 80004be:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <LCD_Set_Cursor+0x28>
		line--;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	71fb      	strb	r3, [r7, #7]
	address = ( line * 0x40 ) + column;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	019b      	lsls	r3, r3, #6
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	4413      	add	r3, r2
 80004d6:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	3b80      	subs	r3, #128	; 0x80
 80004e2:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ffb6 	bl	8000458 <LCD_Write_Cmd>
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* Configuracion de PB15_D7 as input floating
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */
	GPIOB->CRH &= ~GPIO_CRH_CNF15_1 & ~GPIO_CRH_MODE15;
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <LCD_Busy+0x80>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <LCD_Busy+0x80>)
 80004fe:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8000502:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_0;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <LCD_Busy+0x80>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <LCD_Busy+0x80>)
 800050a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800050e:	6053      	str	r3, [r2, #4]
	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_RS_PIN_LOW
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <LCD_Busy+0x80>)
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <LCD_Busy+0x84>)
 8000514:	611a      	str	r2, [r3, #16]
				|	1U << LCD_RW_PIN_HIGH
				|	1U << LCD_EN_PIN_HIGH;

	USER_TIM2_Delay(0, 7199);//      delay of 100us
 8000516:	f641 411f 	movw	r1, #7199	; 0x1c1f
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff fe1e 	bl	800015c <USER_TIM2_Delay>
	if( ( GPIOB->IDR & 0x00008000U ) ){//					if PB15_D7 is set, then
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <LCD_Busy+0x80>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d010      	beq.n	800054e <LCD_Busy+0x5a>
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <LCD_Busy+0x80>)
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <LCD_Busy+0x88>)
 8000530:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <LCD_Busy+0x80>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <LCD_Busy+0x80>)
 8000538:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800053c:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <LCD_Busy+0x80>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <LCD_Busy+0x80>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 1;
 800054a:	2301      	movs	r3, #1
 800054c:	e00f      	b.n	800056e <LCD_Busy+0x7a>
	} else {
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <LCD_Busy+0x80>)
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LCD_Busy+0x88>)
 8000552:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH	&= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <LCD_Busy+0x80>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <LCD_Busy+0x80>)
 800055a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800055e:	6053      	str	r3, [r2, #4]
		GPIOB->CRH	|= GPIO_CRH_MODE15_0;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <LCD_Busy+0x80>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <LCD_Busy+0x80>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 0;
 800056c:	2300      	movs	r3, #0
	}
}
 800056e:	4618      	mov	r0, r3
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010c00 	.word	0x40010c00
 8000578:	00010402 	.word	0x00010402
 800057c:	04020000 	.word	0x04020000

08000580 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	1U << LCD_EN_PIN_HIGH;//				habilita pin EN ON
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <LCD_Pulse_EN+0x24>)
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	611a      	str	r2, [r3, #16]
	USER_TIM2_Delay(0, 7599);//      delay of 50us
 800058c:	f641 51af 	movw	r1, #7599	; 0x1daf
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff fde3 	bl	800015c <USER_TIM2_Delay>
	GPIOB->BSRR	=	1U << LCD_EN_PIN_LOW;//					habilita pin EN OFF
 8000596:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <LCD_Pulse_EN+0x24>)
 8000598:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800059c:	611a      	str	r2, [r3, #16]

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010c00 	.word	0x40010c00

080005a8 <pollButton>:
uint8_t USER_USART1_Receive(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t pollButton(uint8_t row, uint8_t col){
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	460a      	mov	r2, r1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	71bb      	strb	r3, [r7, #6]
	//Set all row pins to 1, except polling row
	for(int i = 4; i < 8; i++){
 80005b8:	2304      	movs	r3, #4
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	e00c      	b.n	80005d8 <pollButton+0x30>
		GPIOA->ODR |= 1 << i;
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <pollButton+0x6c>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	2101      	movs	r1, #1
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a11      	ldr	r2, [pc, #68]	; (8000614 <pollButton+0x6c>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
	for(int i = 4; i < 8; i++){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3301      	adds	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	ddef      	ble.n	80005be <pollButton+0x16>
	}
	GPIOA->ODR &= ~(1 << row);
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <pollButton+0x6c>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	43d2      	mvns	r2, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <pollButton+0x6c>)
 80005f0:	400b      	ands	r3, r1
 80005f2:	60d3      	str	r3, [r2, #12]

	//Read col
	//return 0;
	return GPIOA->IDR & (1 << col);
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <pollButton+0x6c>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4013      	ands	r3, r2
 8000606:	b2db      	uxtb	r3, r3
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40010800 	.word	0x40010800

08000618 <config_pin>:

void config_pin(GPIO_TypeDef *port, uint8_t pin, uint8_t mode){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
 8000624:	4613      	mov	r3, r2
 8000626:	70bb      	strb	r3, [r7, #2]
	uint8_t modeBits, configBits;
	uint8_t finalBits;
	if(mode == 0){
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d104      	bne.n	8000638 <config_pin+0x20>
		//Input
		modeBits = 0b00;
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
		configBits = 0b01;
 8000632:	2301      	movs	r3, #1
 8000634:	73bb      	strb	r3, [r7, #14]
 8000636:	e014      	b.n	8000662 <config_pin+0x4a>
	} else if(mode == 1){
 8000638:	78bb      	ldrb	r3, [r7, #2]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d104      	bne.n	8000648 <config_pin+0x30>
		//Output
		modeBits = 0b01;
 800063e:	2301      	movs	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
		configBits = 0b00;
 8000642:	2300      	movs	r3, #0
 8000644:	73bb      	strb	r3, [r7, #14]
 8000646:	e00c      	b.n	8000662 <config_pin+0x4a>
	} else{
		//Input with pullup
		modeBits = 0b00;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
		configBits = 0b10;
 800064c:	2302      	movs	r3, #2
 800064e:	73bb      	strb	r3, [r7, #14]
		port->ODR |= (0b1) << pin;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	78fa      	ldrb	r2, [r7, #3]
 8000656:	2101      	movs	r1, #1
 8000658:	fa01 f202 	lsl.w	r2, r1, r2
 800065c:	431a      	orrs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60da      	str	r2, [r3, #12]
	}

	finalBits = (0b1100 & (configBits << 2));
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 030c 	and.w	r3, r3, #12
 800066c:	737b      	strb	r3, [r7, #13]
	finalBits |= modeBits & 0b11;
 800066e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000672:	f003 0303 	and.w	r3, r3, #3
 8000676:	b25a      	sxtb	r2, r3
 8000678:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800067c:	4313      	orrs	r3, r2
 800067e:	b25b      	sxtb	r3, r3
 8000680:	737b      	strb	r3, [r7, #13]

	if(mode < 8){
 8000682:	78bb      	ldrb	r3, [r7, #2]
 8000684:	2b07      	cmp	r3, #7
 8000686:	d81a      	bhi.n	80006be <config_pin+0xa6>
		//Low reg
		port->CRL &= ~(0b1111 << pin * 4);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	78fa      	ldrb	r2, [r7, #3]
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	210f      	movs	r1, #15
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	43d2      	mvns	r2, r2
 8000698:	401a      	ands	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
		port->CRL |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	78fa      	ldrb	r2, [r7, #3]
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	210f      	movs	r1, #15
 80006a8:	4091      	lsls	r1, r2
 80006aa:	7b78      	ldrb	r0, [r7, #13]
 80006ac:	78fa      	ldrb	r2, [r7, #3]
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	fa00 f202 	lsl.w	r2, r0, r2
 80006b4:	400a      	ands	r2, r1
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
		//High reg
		pin -= 8;
		port->CRH &= ~(0b1111 << pin * 4);
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
	}
}
 80006bc:	e01c      	b.n	80006f8 <config_pin+0xe0>
		pin -= 8;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	3b08      	subs	r3, #8
 80006c2:	70fb      	strb	r3, [r7, #3]
		port->CRH &= ~(0b1111 << pin * 4);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	78fa      	ldrb	r2, [r7, #3]
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	210f      	movs	r1, #15
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	401a      	ands	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	605a      	str	r2, [r3, #4]
		port->CRH |= (0b1111 << pin * 4) & (finalBits << pin * 4);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	0092      	lsls	r2, r2, #2
 80006e2:	210f      	movs	r1, #15
 80006e4:	4091      	lsls	r1, r2
 80006e6:	7b78      	ldrb	r0, [r7, #13]
 80006e8:	78fa      	ldrb	r2, [r7, #3]
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	fa00 f202 	lsl.w	r2, r0, r2
 80006f0:	400a      	ands	r2, r1
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	605a      	str	r2, [r3, #4]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b0cd      	sub	sp, #308	; 0x134
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f000 fafd 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f909 	bl	8000924 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPAEN;
 8000712:	4b80      	ldr	r3, [pc, #512]	; (8000914 <main+0x210>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a7f      	ldr	r2, [pc, #508]	; (8000914 <main+0x210>)
 8000718:	f043 0314 	orr.w	r3, r3, #20
 800071c:	6193      	str	r3, [r2, #24]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f947 	bl	80009b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  USER_RCC_Init();
 8000722:	f000 f967 	bl	80009f4 <USER_RCC_Init>
  USER_GPIO_Init();
 8000726:	f000 f97b 	bl	8000a20 <USER_GPIO_Init>
  USER_USART1_Init();
 800072a:	f000 f9d1 	bl	8000ad0 <USER_USART1_Init>

  uint8_t keypad_chars[] = {'1', '4', '7', '\r', '2', '5', '8', '0', '3', '6', '9', '\n', 'A', 'B', 'C', 'D'};
 800072e:	4b7a      	ldr	r3, [pc, #488]	; (8000918 <main+0x214>)
 8000730:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t msg_buffer[256];

  uint8_t lastChar = 0xff;
 800073a:	23ff      	movs	r3, #255	; 0xff
 800073c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  unsigned int charCounter = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

  int8_t currentLine = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  int8_t currentRow = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  LCD_Init();
 8000752:	f7ff fd5b 	bl	800020c <LCD_Init>
  LCD_Cursor_ON();
 8000756:	200e      	movs	r0, #14
 8000758:	f7ff fe7e 	bl	8000458 <LCD_Write_Cmd>
  LCD_Clear();
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fe7b 	bl	8000458 <LCD_Write_Cmd>
  LCD_Set_Cursor(currentLine, currentRow);
 8000762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000766:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe99 	bl	80004a4 <LCD_Set_Cursor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t selectedChar = 0xff;
 8000772:	23ff      	movs	r3, #255	; 0xff
 8000774:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125

	  for(int i = 0; i < 4; i++){
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800077e:	e034      	b.n	80007ea <main+0xe6>
 		  for(int j = 0; j < 4; j++){
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000786:	e027      	b.n	80007d8 <main+0xd4>
			  int out = pollButton(j + 4, i);
 8000788:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800078c:	b2db      	uxtb	r3, r3
 800078e:	3304      	adds	r3, #4
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff04 	bl	80005a8 <pollButton>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			  int index = i * 4 + j;
 80007a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80007b0:	4413      	add	r3, r2
 80007b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

			  if(out == 0){
 80007b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <main+0xca>
				  selectedChar = keypad_chars[index];
 80007be:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80007c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 		  for(int j = 0; j < 4; j++){
 80007ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007d2:	3301      	adds	r3, #1
 80007d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80007d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007dc:	2b03      	cmp	r3, #3
 80007de:	ddd3      	ble.n	8000788 <main+0x84>
	  for(int i = 0; i < 4; i++){
 80007e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007e4:	3301      	adds	r3, #1
 80007e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80007ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	ddc6      	ble.n	8000780 <main+0x7c>
				  //selectedChar = index;
			  }
		  }
	  }

	  if(lastChar == selectedChar) charCounter++;
 80007f2:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80007f6:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d105      	bne.n	800080a <main+0x106>
 80007fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000802:	3301      	adds	r3, #1
 8000804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000808:	e002      	b.n	8000810 <main+0x10c>
	  else charCounter = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	  if(selectedChar != 0xff && charCounter == 1500){
 8000810:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000814:	2bff      	cmp	r3, #255	; 0xff
 8000816:	d018      	beq.n	800084a <main+0x146>
 8000818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800081c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000820:	4293      	cmp	r3, r2
 8000822:	d112      	bne.n	800084a <main+0x146>
		  snprintf(msg_buffer, sizeof(msg_buffer), "%c", selectedChar);
 8000824:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8000828:	4638      	mov	r0, r7
 800082a:	4a3c      	ldr	r2, [pc, #240]	; (800091c <main+0x218>)
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	f000 ffca 	bl	80017c8 <sniprintf>
		  USER_USART1_Transmit(msg_buffer, strlen(msg_buffer));
 8000834:	463b      	mov	r3, r7
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fc88 	bl	800014c <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	463b      	mov	r3, r7
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f965 	bl	8000b14 <USER_USART1_Transmit>
	  }

	  lastChar = selectedChar;
 800084a:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 800084e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

	  //Check if char available
	  if((USART1->SR & USART_SR_RXNE) != 0){
 8000852:	4b33      	ldr	r3, [pc, #204]	; (8000920 <main+0x21c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	2b00      	cmp	r3, #0
 800085c:	d089      	beq.n	8000772 <main+0x6e>
		  uint8_t inputChar = USER_USART1_Receive();
 800085e:	f000 f97f 	bl	8000b60 <USER_USART1_Receive>
 8000862:	4603      	mov	r3, r0
 8000864:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		  //Handle writing character to lcd
		  //Handle special chars
		  if(inputChar == '\r'){
 8000868:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800086c:	2b0d      	cmp	r3, #13
 800086e:	d10e      	bne.n	800088e <main+0x18a>
			  if(currentLine == 1) currentLine = 2;
 8000870:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 8000874:	2b01      	cmp	r3, #1
 8000876:	d103      	bne.n	8000880 <main+0x17c>
 8000878:	2302      	movs	r3, #2
 800087a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 800087e:	e002      	b.n	8000886 <main+0x182>
			  else currentLine = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  currentRow = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800088c:	e771      	b.n	8000772 <main+0x6e>

		  } else if(inputChar == 0x7f){
 800088e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000892:	2b7f      	cmp	r3, #127	; 0x7f
 8000894:	d117      	bne.n	80008c6 <main+0x1c2>
			  if(currentRow != 0) {
 8000896:	f997 3126 	ldrsb.w	r3, [r7, #294]	; 0x126
 800089a:	2b00      	cmp	r3, #0
 800089c:	f43f af69 	beq.w	8000772 <main+0x6e>
				  LCD_Set_Cursor(currentLine, currentRow);
 80008a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80008a4:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fdfa 	bl	80004a4 <LCD_Set_Cursor>
				  LCD_Put_Char(' ');
 80008b0:	2020      	movs	r0, #32
 80008b2:	f7ff fde5 	bl	8000480 <LCD_Put_Char>
				  currentRow--;
 80008b6:	f997 3126 	ldrsb.w	r3, [r7, #294]	; 0x126
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80008c4:	e755      	b.n	8000772 <main+0x6e>
			  }
		  } else if(inputChar >= 32 && inputChar <= 126) {
 80008c6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008ca:	2b1f      	cmp	r3, #31
 80008cc:	f67f af51 	bls.w	8000772 <main+0x6e>
 80008d0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008d4:	2b7e      	cmp	r3, #126	; 0x7e
 80008d6:	f63f af4c 	bhi.w	8000772 <main+0x6e>
			  currentRow++;
 80008da:	f997 3126 	ldrsb.w	r3, [r7, #294]	; 0x126
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			  if(currentRow >= 16) currentRow = 0;
 80008e8:	f997 3126 	ldrsb.w	r3, [r7, #294]	; 0x126
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	dd02      	ble.n	80008f6 <main+0x1f2>
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			  LCD_Set_Cursor(currentLine, currentRow);
 80008f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80008fa:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fdcf 	bl	80004a4 <LCD_Set_Cursor>
			  LCD_Put_Char(inputChar);
 8000906:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fdb8 	bl	8000480 <LCD_Put_Char>
  {
 8000910:	e72f      	b.n	8000772 <main+0x6e>
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	08002100 	.word	0x08002100
 800091c:	080020fc 	.word	0x080020fc
 8000920:	40013800 	.word	0x40013800

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b090      	sub	sp, #64	; 0x40
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	2228      	movs	r2, #40	; 0x28
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f000 ff40 	bl	80017b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000962:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fb11 	bl	8000f94 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000978:	f000 f904 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fd7e 	bl	8001498 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009a2:	f000 f8ef 	bl	8000b84 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3740      	adds	r7, #64	; 0x40
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_GPIO_Init+0x40>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <MX_GPIO_Init+0x40>)
 80009bc:	f043 0320 	orr.w	r3, r3, #32
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_GPIO_Init+0x40>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0320 	and.w	r3, r3, #32
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_GPIO_Init+0x40>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <MX_GPIO_Init+0x40>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <MX_GPIO_Init+0x40>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000

080009f4 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */

void USER_RCC_Init(void){
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <USER_RCC_Init+0x28>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <USER_RCC_Init+0x28>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	RCC_APB2ENR_USART1EN
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <USER_RCC_Init+0x28>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <USER_RCC_Init+0x28>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	f043 0314 	orr.w	r3, r3, #20
 8000a12:	6193      	str	r3, [r2, #24]
						|	RCC_APB2ENR_IOPCEN
						|	RCC_APB2ENR_IOPAEN;
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000

08000a20 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	//Configure serial terminal
	GPIOA->CRH	&= ~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a2a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000a2e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a36:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000a3a:	6053      	str	r3, [r2, #4]

	GPIOA->CRH &=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000a46:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=	GPIO_CRH_CNF10_0;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6053      	str	r3, [r2, #4]

	GPIOA->BSRR	=	GPIO_BSRR_BS13;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	611a      	str	r2, [r3, #16]

	GPIOC->CRH	&=	~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <USER_GPIO_Init+0xac>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <USER_GPIO_Init+0xac>)
 8000a62:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000a66:	6053      	str	r3, [r2, #4]
	GPIOC->CRH	|=	GPIO_CRH_MODE13_0;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <USER_GPIO_Init+0xac>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <USER_GPIO_Init+0xac>)
 8000a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a72:	6053      	str	r3, [r2, #4]

	//Configure pins for keypad
	config_pin(GPIOA, 0, 2);
 8000a74:	2202      	movs	r2, #2
 8000a76:	2100      	movs	r1, #0
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a7a:	f7ff fdcd 	bl	8000618 <config_pin>
	config_pin(GPIOA, 1, 2);
 8000a7e:	2202      	movs	r2, #2
 8000a80:	2101      	movs	r1, #1
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a84:	f7ff fdc8 	bl	8000618 <config_pin>
	config_pin(GPIOA, 2, 2);
 8000a88:	2202      	movs	r2, #2
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a8e:	f7ff fdc3 	bl	8000618 <config_pin>
	config_pin(GPIOA, 3, 2);
 8000a92:	2202      	movs	r2, #2
 8000a94:	2103      	movs	r1, #3
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000a98:	f7ff fdbe 	bl	8000618 <config_pin>
	config_pin(GPIOA, 4, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000aa2:	f7ff fdb9 	bl	8000618 <config_pin>
	config_pin(GPIOA, 5, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000aac:	f7ff fdb4 	bl	8000618 <config_pin>
	config_pin(GPIOA, 6, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2106      	movs	r1, #6
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000ab6:	f7ff fdaf 	bl	8000618 <config_pin>
	config_pin(GPIOA, 7, 1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2107      	movs	r1, #7
 8000abe:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <USER_GPIO_Init+0xa8>)
 8000ac0:	f7ff fdaa 	bl	8000618 <config_pin>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	40011000 	.word	0x40011000

08000ad0 <USER_USART1_Init>:

void USER_USART1_Init(void) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	USART1->BRR	=	0x1D4C;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <USER_USART1_Init+0x40>)
 8000ad6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000ada:	609a      	str	r2, [r3, #8]
	USART1->CR1 &=	~USART_CR1_M
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <USER_USART1_Init+0x40>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <USER_USART1_Init+0x40>)
 8000ae2:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 8000ae6:	f023 0313 	bic.w	r3, r3, #19
 8000aea:	60d3      	str	r3, [r2, #12]
				&	~USART_CR1_TCIE
				&	~USART_CR1_RXNEIE
				&	~USART_CR1_IDLEIE
				&	~USART_CR1_RWU
				&	~USART_CR1_SBK;
	USART1->CR1	|=	USART_CR1_UE
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <USER_USART1_Init+0x40>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <USER_USART1_Init+0x40>)
 8000af2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af6:	f043 030c 	orr.w	r3, r3, #12
 8000afa:	60d3      	str	r3, [r2, #12]
				|	USART_CR1_TE
				|	USART_CR1_RE;
	USART1->CR2 &=	~USART_CR2_STOP;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <USER_USART1_Init+0x40>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <USER_USART1_Init+0x40>)
 8000b02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b06:	6113      	str	r3, [r2, #16]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40013800 	.word	0x40013800

08000b14 <USER_USART1_Transmit>:

void USER_USART1_Transmit(uint8_t *pData, uint16_t size){
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
	for(int i=0; i< size; i++){
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e00f      	b.n	8000b46 <USER_USART1_Transmit+0x32>
		while( (USART1->SR & USART_SR_TXE)==0 ){
 8000b26:	bf00      	nop
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <USER_USART1_Transmit+0x48>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f9      	beq.n	8000b28 <USER_USART1_Transmit+0x14>

		}
		USART1->DR = *pData++;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <USER_USART1_Transmit+0x48>)
 8000b3e:	605a      	str	r2, [r3, #4]
	for(int i=0; i< size; i++){
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbeb      	blt.n	8000b26 <USER_USART1_Transmit+0x12>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40013800 	.word	0x40013800

08000b60 <USER_USART1_Receive>:

uint8_t USER_USART1_Receive(void){
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	while( (USART1->SR & USART_SR_RXNE)==0 ){
 8000b64:	bf00      	nop
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <USER_USART1_Receive+0x20>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0320 	and.w	r3, r3, #32
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0f9      	beq.n	8000b66 <USER_USART1_Receive+0x6>

	}
	return USART1->DR;
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <USER_USART1_Receive+0x20>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	b2db      	uxtb	r3, r3

}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40013800 	.word	0x40013800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_MspInit+0x5c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 f8ab 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f000 fd76 	bl	8001764 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20005000 	.word	0x20005000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	2000008c 	.word	0x2000008c
 8000cac:	200000a8 	.word	0x200000a8

08000cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce2:	f7ff ffe5 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f000 fd43 	bl	8001770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fd0b 	bl	8000704 <main>
  bx lr
 8000cee:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf8:	080021ac 	.word	0x080021ac
  ldr r2, =_sbss
 8000cfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d00:	200000a4 	.word	0x200000a4

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x28>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x28>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f907 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff ff34 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f911 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f8e7 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_IncTick+0x1c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x20>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <HAL_IncTick+0x20>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000090 	.word	0x20000090

08000db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <HAL_GetTick+0x10>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000090 	.word	0x20000090

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff49 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e272      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8087 	beq.w	80010c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb4:	4b92      	ldr	r3, [pc, #584]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00c      	beq.n	8000fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc0:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d112      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x5e>
 8000fcc:	4b8c      	ldr	r3, [pc, #560]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fda:	4b89      	ldr	r3, [pc, #548]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d06c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x12c>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d168      	bne.n	80010c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e24c      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x76>
 8000ffc:	4b80      	ldr	r3, [pc, #512]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a7f      	ldr	r2, [pc, #508]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e02e      	b.n	8001068 <HAL_RCC_OscConfig+0xd4>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x98>
 8001012:	4b7b      	ldr	r3, [pc, #492]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7a      	ldr	r2, [pc, #488]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b78      	ldr	r3, [pc, #480]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a77      	ldr	r2, [pc, #476]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e01d      	b.n	8001068 <HAL_RCC_OscConfig+0xd4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0xbc>
 8001036:	4b72      	ldr	r3, [pc, #456]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a71      	ldr	r2, [pc, #452]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b6f      	ldr	r3, [pc, #444]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6e      	ldr	r2, [pc, #440]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0xd4>
 8001050:	4b6b      	ldr	r3, [pc, #428]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a6a      	ldr	r2, [pc, #424]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a67      	ldr	r2, [pc, #412]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fea2 	bl	8000db8 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fe9e 	bl	8000db8 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e200      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b5d      	ldr	r3, [pc, #372]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0xe4>
 8001096:	e014      	b.n	80010c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fe8e 	bl	8000db8 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fe8a 	bl	8000db8 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e1ec      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x10c>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d063      	beq.n	8001196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010da:	4b49      	ldr	r3, [pc, #292]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d11c      	bne.n	8001120 <HAL_RCC_OscConfig+0x18c>
 80010e6:	4b46      	ldr	r3, [pc, #280]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	4b43      	ldr	r3, [pc, #268]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x176>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d001      	beq.n	800110a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e1c0      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4939      	ldr	r1, [pc, #228]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e03a      	b.n	8001196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001128:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_RCC_OscConfig+0x270>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fe43 	bl	8000db8 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fe3f 	bl	8000db8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1a1      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4927      	ldr	r1, [pc, #156]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
 8001168:	e015      	b.n	8001196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_RCC_OscConfig+0x270>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fe22 	bl	8000db8 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff fe1e 	bl	8000db8 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e180      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d03a      	beq.n	8001218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d019      	beq.n	80011de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fe02 	bl	8000db8 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fdfe 	bl	8000db8 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e160      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f000 faa6 	bl	8001728 <RCC_Delay>
 80011dc:	e01c      	b.n	8001218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_RCC_OscConfig+0x274>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fde8 	bl	8000db8 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ea:	e00f      	b.n	800120c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fde4 	bl	8000db8 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d908      	bls.n	800120c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e146      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	42420000 	.word	0x42420000
 8001208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120c:	4b92      	ldr	r3, [pc, #584]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e9      	bne.n	80011ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80a6 	beq.w	8001372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122a:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10d      	bne.n	8001252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a87      	ldr	r2, [pc, #540]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124e:	2301      	movs	r3, #1
 8001250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001252:	4b82      	ldr	r3, [pc, #520]	; (800145c <HAL_RCC_OscConfig+0x4c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d118      	bne.n	8001290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125e:	4b7f      	ldr	r3, [pc, #508]	; (800145c <HAL_RCC_OscConfig+0x4c8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7e      	ldr	r2, [pc, #504]	; (800145c <HAL_RCC_OscConfig+0x4c8>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126a:	f7ff fda5 	bl	8000db8 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001272:	f7ff fda1 	bl	8000db8 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b64      	cmp	r3, #100	; 0x64
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e103      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	4b75      	ldr	r3, [pc, #468]	; (800145c <HAL_RCC_OscConfig+0x4c8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d106      	bne.n	80012a6 <HAL_RCC_OscConfig+0x312>
 8001298:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4a6e      	ldr	r2, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6213      	str	r3, [r2, #32]
 80012a4:	e02d      	b.n	8001302 <HAL_RCC_OscConfig+0x36e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x334>
 80012ae:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a69      	ldr	r2, [pc, #420]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a66      	ldr	r2, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	e01c      	b.n	8001302 <HAL_RCC_OscConfig+0x36e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d10c      	bne.n	80012ea <HAL_RCC_OscConfig+0x356>
 80012d0:	4b61      	ldr	r3, [pc, #388]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4a60      	ldr	r2, [pc, #384]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6213      	str	r3, [r2, #32]
 80012dc:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6213      	str	r3, [r2, #32]
 80012e8:	e00b      	b.n	8001302 <HAL_RCC_OscConfig+0x36e>
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6213      	str	r3, [r2, #32]
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d015      	beq.n	8001336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fd55 	bl	8000db8 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff fd51 	bl	8000db8 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e0b1      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0ee      	beq.n	8001312 <HAL_RCC_OscConfig+0x37e>
 8001334:	e014      	b.n	8001360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fd3f 	bl	8000db8 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff fd3b 	bl	8000db8 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f241 3288 	movw	r2, #5000	; 0x1388
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e09b      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	4b40      	ldr	r3, [pc, #256]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ee      	bne.n	800133e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d061      	beq.n	800144c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d146      	bne.n	800141e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_RCC_OscConfig+0x4cc>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fd0f 	bl	8000db8 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fd0b 	bl	8000db8 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e06d      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d108      	bne.n	80013d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	4921      	ldr	r1, [pc, #132]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a19      	ldr	r1, [r3, #32]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	430b      	orrs	r3, r1
 80013ea:	491b      	ldr	r1, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x4cc>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fcdf 	bl	8000db8 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff fcdb 	bl	8000db8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e03d      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x46a>
 800141c:	e035      	b.n	800148a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_RCC_OscConfig+0x4cc>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fcc8 	bl	8000db8 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fcc4 	bl	8000db8 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e026      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x498>
 800144a:	e01e      	b.n	800148a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e019      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
 8001458:	40021000 	.word	0x40021000
 800145c:	40007000 	.word	0x40007000
 8001460:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x500>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	429a      	cmp	r2, r3
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0d0      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d910      	bls.n	80014dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4965      	ldr	r1, [pc, #404]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d040      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e073      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e06b      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4936      	ldr	r1, [pc, #216]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff fc16 	bl	8000db8 <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff fc12 	bl	8000db8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e053      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d210      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4922      	ldr	r1, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	4313      	orrs	r3, r2
 8001604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f821 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1cc>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1d0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb74 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000
 800165c:	40021000 	.word	0x40021000
 8001660:	08002160 	.word	0x08002160
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b490      	push	{r4, r7}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_RCC_GetSysClockFreq+0xac>)
 8001674:	1d3c      	adds	r4, r7, #4
 8001676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800167c:	f240 2301 	movw	r3, #513	; 0x201
 8001680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x40>
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x46>
 80016aa:	e02b      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ae:	623b      	str	r3, [r7, #32]
      break;
 80016b0:	e02b      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	0c9b      	lsrs	r3, r3, #18
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3328      	adds	r3, #40	; 0x28
 80016bc:	443b      	add	r3, r7
 80016be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d012      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0c5b      	lsrs	r3, r3, #17
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	3328      	adds	r3, #40	; 0x28
 80016da:	443b      	add	r3, r7
 80016dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016e6:	fb03 f202 	mul.w	r2, r3, r2
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e004      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	623b      	str	r3, [r7, #32]
      break;
 8001702:	e002      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001706:	623b      	str	r3, [r7, #32]
      break;
 8001708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170a:	6a3b      	ldr	r3, [r7, #32]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bc90      	pop	{r4, r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	08002110 	.word	0x08002110
 800171c:	40021000 	.word	0x40021000
 8001720:	007a1200 	.word	0x007a1200
 8001724:	003d0900 	.word	0x003d0900

08001728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <RCC_Delay+0x34>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <RCC_Delay+0x38>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0a5b      	lsrs	r3, r3, #9
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001744:	bf00      	nop
  }
  while (Delay --);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	60fa      	str	r2, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <RCC_Delay+0x1c>
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000000 	.word	0x20000000
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <__errno>:
 8001764:	4b01      	ldr	r3, [pc, #4]	; (800176c <__errno+0x8>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000000c 	.word	0x2000000c

08001770 <__libc_init_array>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	2600      	movs	r6, #0
 8001774:	4d0c      	ldr	r5, [pc, #48]	; (80017a8 <__libc_init_array+0x38>)
 8001776:	4c0d      	ldr	r4, [pc, #52]	; (80017ac <__libc_init_array+0x3c>)
 8001778:	1b64      	subs	r4, r4, r5
 800177a:	10a4      	asrs	r4, r4, #2
 800177c:	42a6      	cmp	r6, r4
 800177e:	d109      	bne.n	8001794 <__libc_init_array+0x24>
 8001780:	f000 fcb0 	bl	80020e4 <_init>
 8001784:	2600      	movs	r6, #0
 8001786:	4d0a      	ldr	r5, [pc, #40]	; (80017b0 <__libc_init_array+0x40>)
 8001788:	4c0a      	ldr	r4, [pc, #40]	; (80017b4 <__libc_init_array+0x44>)
 800178a:	1b64      	subs	r4, r4, r5
 800178c:	10a4      	asrs	r4, r4, #2
 800178e:	42a6      	cmp	r6, r4
 8001790:	d105      	bne.n	800179e <__libc_init_array+0x2e>
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	f855 3b04 	ldr.w	r3, [r5], #4
 8001798:	4798      	blx	r3
 800179a:	3601      	adds	r6, #1
 800179c:	e7ee      	b.n	800177c <__libc_init_array+0xc>
 800179e:	f855 3b04 	ldr.w	r3, [r5], #4
 80017a2:	4798      	blx	r3
 80017a4:	3601      	adds	r6, #1
 80017a6:	e7f2      	b.n	800178e <__libc_init_array+0x1e>
 80017a8:	080021a4 	.word	0x080021a4
 80017ac:	080021a4 	.word	0x080021a4
 80017b0:	080021a4 	.word	0x080021a4
 80017b4:	080021a8 	.word	0x080021a8

080017b8 <memset>:
 80017b8:	4603      	mov	r3, r0
 80017ba:	4402      	add	r2, r0
 80017bc:	4293      	cmp	r3, r2
 80017be:	d100      	bne.n	80017c2 <memset+0xa>
 80017c0:	4770      	bx	lr
 80017c2:	f803 1b01 	strb.w	r1, [r3], #1
 80017c6:	e7f9      	b.n	80017bc <memset+0x4>

080017c8 <sniprintf>:
 80017c8:	b40c      	push	{r2, r3}
 80017ca:	b530      	push	{r4, r5, lr}
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <sniprintf+0x64>)
 80017ce:	1e0c      	subs	r4, r1, #0
 80017d0:	681d      	ldr	r5, [r3, #0]
 80017d2:	b09d      	sub	sp, #116	; 0x74
 80017d4:	da08      	bge.n	80017e8 <sniprintf+0x20>
 80017d6:	238b      	movs	r3, #139	; 0x8b
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	602b      	str	r3, [r5, #0]
 80017de:	b01d      	add	sp, #116	; 0x74
 80017e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017e4:	b002      	add	sp, #8
 80017e6:	4770      	bx	lr
 80017e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80017ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80017f0:	bf0c      	ite	eq
 80017f2:	4623      	moveq	r3, r4
 80017f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80017f8:	9304      	str	r3, [sp, #16]
 80017fa:	9307      	str	r3, [sp, #28]
 80017fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001800:	9002      	str	r0, [sp, #8]
 8001802:	9006      	str	r0, [sp, #24]
 8001804:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001808:	4628      	mov	r0, r5
 800180a:	ab21      	add	r3, sp, #132	; 0x84
 800180c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800180e:	a902      	add	r1, sp, #8
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	f000 f869 	bl	80018e8 <_svfiprintf_r>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	bfbc      	itt	lt
 800181a:	238b      	movlt	r3, #139	; 0x8b
 800181c:	602b      	strlt	r3, [r5, #0]
 800181e:	2c00      	cmp	r4, #0
 8001820:	d0dd      	beq.n	80017de <sniprintf+0x16>
 8001822:	2200      	movs	r2, #0
 8001824:	9b02      	ldr	r3, [sp, #8]
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e7d9      	b.n	80017de <sniprintf+0x16>
 800182a:	bf00      	nop
 800182c:	2000000c 	.word	0x2000000c

08001830 <__ssputs_r>:
 8001830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001834:	688e      	ldr	r6, [r1, #8]
 8001836:	4682      	mov	sl, r0
 8001838:	429e      	cmp	r6, r3
 800183a:	460c      	mov	r4, r1
 800183c:	4690      	mov	r8, r2
 800183e:	461f      	mov	r7, r3
 8001840:	d838      	bhi.n	80018b4 <__ssputs_r+0x84>
 8001842:	898a      	ldrh	r2, [r1, #12]
 8001844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001848:	d032      	beq.n	80018b0 <__ssputs_r+0x80>
 800184a:	6825      	ldr	r5, [r4, #0]
 800184c:	6909      	ldr	r1, [r1, #16]
 800184e:	3301      	adds	r3, #1
 8001850:	eba5 0901 	sub.w	r9, r5, r1
 8001854:	6965      	ldr	r5, [r4, #20]
 8001856:	444b      	add	r3, r9
 8001858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800185c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001860:	106d      	asrs	r5, r5, #1
 8001862:	429d      	cmp	r5, r3
 8001864:	bf38      	it	cc
 8001866:	461d      	movcc	r5, r3
 8001868:	0553      	lsls	r3, r2, #21
 800186a:	d531      	bpl.n	80018d0 <__ssputs_r+0xa0>
 800186c:	4629      	mov	r1, r5
 800186e:	f000 fb6f 	bl	8001f50 <_malloc_r>
 8001872:	4606      	mov	r6, r0
 8001874:	b950      	cbnz	r0, 800188c <__ssputs_r+0x5c>
 8001876:	230c      	movs	r3, #12
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f8ca 3000 	str.w	r3, [sl]
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001886:	81a3      	strh	r3, [r4, #12]
 8001888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800188c:	464a      	mov	r2, r9
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	f000 face 	bl	8001e30 <memcpy>
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800189a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189e:	81a3      	strh	r3, [r4, #12]
 80018a0:	6126      	str	r6, [r4, #16]
 80018a2:	444e      	add	r6, r9
 80018a4:	6026      	str	r6, [r4, #0]
 80018a6:	463e      	mov	r6, r7
 80018a8:	6165      	str	r5, [r4, #20]
 80018aa:	eba5 0509 	sub.w	r5, r5, r9
 80018ae:	60a5      	str	r5, [r4, #8]
 80018b0:	42be      	cmp	r6, r7
 80018b2:	d900      	bls.n	80018b6 <__ssputs_r+0x86>
 80018b4:	463e      	mov	r6, r7
 80018b6:	4632      	mov	r2, r6
 80018b8:	4641      	mov	r1, r8
 80018ba:	6820      	ldr	r0, [r4, #0]
 80018bc:	f000 fac6 	bl	8001e4c <memmove>
 80018c0:	68a3      	ldr	r3, [r4, #8]
 80018c2:	2000      	movs	r0, #0
 80018c4:	1b9b      	subs	r3, r3, r6
 80018c6:	60a3      	str	r3, [r4, #8]
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	4433      	add	r3, r6
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	e7db      	b.n	8001888 <__ssputs_r+0x58>
 80018d0:	462a      	mov	r2, r5
 80018d2:	f000 fbb1 	bl	8002038 <_realloc_r>
 80018d6:	4606      	mov	r6, r0
 80018d8:	2800      	cmp	r0, #0
 80018da:	d1e1      	bne.n	80018a0 <__ssputs_r+0x70>
 80018dc:	4650      	mov	r0, sl
 80018de:	6921      	ldr	r1, [r4, #16]
 80018e0:	f000 face 	bl	8001e80 <_free_r>
 80018e4:	e7c7      	b.n	8001876 <__ssputs_r+0x46>
	...

080018e8 <_svfiprintf_r>:
 80018e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ec:	4698      	mov	r8, r3
 80018ee:	898b      	ldrh	r3, [r1, #12]
 80018f0:	4607      	mov	r7, r0
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	460d      	mov	r5, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	b09d      	sub	sp, #116	; 0x74
 80018fa:	d50e      	bpl.n	800191a <_svfiprintf_r+0x32>
 80018fc:	690b      	ldr	r3, [r1, #16]
 80018fe:	b963      	cbnz	r3, 800191a <_svfiprintf_r+0x32>
 8001900:	2140      	movs	r1, #64	; 0x40
 8001902:	f000 fb25 	bl	8001f50 <_malloc_r>
 8001906:	6028      	str	r0, [r5, #0]
 8001908:	6128      	str	r0, [r5, #16]
 800190a:	b920      	cbnz	r0, 8001916 <_svfiprintf_r+0x2e>
 800190c:	230c      	movs	r3, #12
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	e0d1      	b.n	8001aba <_svfiprintf_r+0x1d2>
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	616b      	str	r3, [r5, #20]
 800191a:	2300      	movs	r3, #0
 800191c:	9309      	str	r3, [sp, #36]	; 0x24
 800191e:	2320      	movs	r3, #32
 8001920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001924:	2330      	movs	r3, #48	; 0x30
 8001926:	f04f 0901 	mov.w	r9, #1
 800192a:	f8cd 800c 	str.w	r8, [sp, #12]
 800192e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001ad4 <_svfiprintf_r+0x1ec>
 8001932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001936:	4623      	mov	r3, r4
 8001938:	469a      	mov	sl, r3
 800193a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800193e:	b10a      	cbz	r2, 8001944 <_svfiprintf_r+0x5c>
 8001940:	2a25      	cmp	r2, #37	; 0x25
 8001942:	d1f9      	bne.n	8001938 <_svfiprintf_r+0x50>
 8001944:	ebba 0b04 	subs.w	fp, sl, r4
 8001948:	d00b      	beq.n	8001962 <_svfiprintf_r+0x7a>
 800194a:	465b      	mov	r3, fp
 800194c:	4622      	mov	r2, r4
 800194e:	4629      	mov	r1, r5
 8001950:	4638      	mov	r0, r7
 8001952:	f7ff ff6d 	bl	8001830 <__ssputs_r>
 8001956:	3001      	adds	r0, #1
 8001958:	f000 80aa 	beq.w	8001ab0 <_svfiprintf_r+0x1c8>
 800195c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800195e:	445a      	add	r2, fp
 8001960:	9209      	str	r2, [sp, #36]	; 0x24
 8001962:	f89a 3000 	ldrb.w	r3, [sl]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80a2 	beq.w	8001ab0 <_svfiprintf_r+0x1c8>
 800196c:	2300      	movs	r3, #0
 800196e:	f04f 32ff 	mov.w	r2, #4294967295
 8001972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001976:	f10a 0a01 	add.w	sl, sl, #1
 800197a:	9304      	str	r3, [sp, #16]
 800197c:	9307      	str	r3, [sp, #28]
 800197e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001982:	931a      	str	r3, [sp, #104]	; 0x68
 8001984:	4654      	mov	r4, sl
 8001986:	2205      	movs	r2, #5
 8001988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800198c:	4851      	ldr	r0, [pc, #324]	; (8001ad4 <_svfiprintf_r+0x1ec>)
 800198e:	f000 fa41 	bl	8001e14 <memchr>
 8001992:	9a04      	ldr	r2, [sp, #16]
 8001994:	b9d8      	cbnz	r0, 80019ce <_svfiprintf_r+0xe6>
 8001996:	06d0      	lsls	r0, r2, #27
 8001998:	bf44      	itt	mi
 800199a:	2320      	movmi	r3, #32
 800199c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019a0:	0711      	lsls	r1, r2, #28
 80019a2:	bf44      	itt	mi
 80019a4:	232b      	movmi	r3, #43	; 0x2b
 80019a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019aa:	f89a 3000 	ldrb.w	r3, [sl]
 80019ae:	2b2a      	cmp	r3, #42	; 0x2a
 80019b0:	d015      	beq.n	80019de <_svfiprintf_r+0xf6>
 80019b2:	4654      	mov	r4, sl
 80019b4:	2000      	movs	r0, #0
 80019b6:	f04f 0c0a 	mov.w	ip, #10
 80019ba:	9a07      	ldr	r2, [sp, #28]
 80019bc:	4621      	mov	r1, r4
 80019be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019c2:	3b30      	subs	r3, #48	; 0x30
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d94e      	bls.n	8001a66 <_svfiprintf_r+0x17e>
 80019c8:	b1b0      	cbz	r0, 80019f8 <_svfiprintf_r+0x110>
 80019ca:	9207      	str	r2, [sp, #28]
 80019cc:	e014      	b.n	80019f8 <_svfiprintf_r+0x110>
 80019ce:	eba0 0308 	sub.w	r3, r0, r8
 80019d2:	fa09 f303 	lsl.w	r3, r9, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	46a2      	mov	sl, r4
 80019da:	9304      	str	r3, [sp, #16]
 80019dc:	e7d2      	b.n	8001984 <_svfiprintf_r+0x9c>
 80019de:	9b03      	ldr	r3, [sp, #12]
 80019e0:	1d19      	adds	r1, r3, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	9103      	str	r1, [sp, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bfbb      	ittet	lt
 80019ea:	425b      	neglt	r3, r3
 80019ec:	f042 0202 	orrlt.w	r2, r2, #2
 80019f0:	9307      	strge	r3, [sp, #28]
 80019f2:	9307      	strlt	r3, [sp, #28]
 80019f4:	bfb8      	it	lt
 80019f6:	9204      	strlt	r2, [sp, #16]
 80019f8:	7823      	ldrb	r3, [r4, #0]
 80019fa:	2b2e      	cmp	r3, #46	; 0x2e
 80019fc:	d10c      	bne.n	8001a18 <_svfiprintf_r+0x130>
 80019fe:	7863      	ldrb	r3, [r4, #1]
 8001a00:	2b2a      	cmp	r3, #42	; 0x2a
 8001a02:	d135      	bne.n	8001a70 <_svfiprintf_r+0x188>
 8001a04:	9b03      	ldr	r3, [sp, #12]
 8001a06:	3402      	adds	r4, #2
 8001a08:	1d1a      	adds	r2, r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	9203      	str	r2, [sp, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001ad8 <_svfiprintf_r+0x1f0>
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4650      	mov	r0, sl
 8001a20:	7821      	ldrb	r1, [r4, #0]
 8001a22:	f000 f9f7 	bl	8001e14 <memchr>
 8001a26:	b140      	cbz	r0, 8001a3a <_svfiprintf_r+0x152>
 8001a28:	2340      	movs	r3, #64	; 0x40
 8001a2a:	eba0 000a 	sub.w	r0, r0, sl
 8001a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8001a32:	9b04      	ldr	r3, [sp, #16]
 8001a34:	3401      	adds	r4, #1
 8001a36:	4303      	orrs	r3, r0
 8001a38:	9304      	str	r3, [sp, #16]
 8001a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a3e:	2206      	movs	r2, #6
 8001a40:	4826      	ldr	r0, [pc, #152]	; (8001adc <_svfiprintf_r+0x1f4>)
 8001a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a46:	f000 f9e5 	bl	8001e14 <memchr>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d038      	beq.n	8001ac0 <_svfiprintf_r+0x1d8>
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <_svfiprintf_r+0x1f8>)
 8001a50:	bb1b      	cbnz	r3, 8001a9a <_svfiprintf_r+0x1b2>
 8001a52:	9b03      	ldr	r3, [sp, #12]
 8001a54:	3307      	adds	r3, #7
 8001a56:	f023 0307 	bic.w	r3, r3, #7
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	9303      	str	r3, [sp, #12]
 8001a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a60:	4433      	add	r3, r6
 8001a62:	9309      	str	r3, [sp, #36]	; 0x24
 8001a64:	e767      	b.n	8001936 <_svfiprintf_r+0x4e>
 8001a66:	460c      	mov	r4, r1
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a6e:	e7a5      	b.n	80019bc <_svfiprintf_r+0xd4>
 8001a70:	2300      	movs	r3, #0
 8001a72:	f04f 0c0a 	mov.w	ip, #10
 8001a76:	4619      	mov	r1, r3
 8001a78:	3401      	adds	r4, #1
 8001a7a:	9305      	str	r3, [sp, #20]
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a82:	3a30      	subs	r2, #48	; 0x30
 8001a84:	2a09      	cmp	r2, #9
 8001a86:	d903      	bls.n	8001a90 <_svfiprintf_r+0x1a8>
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0c5      	beq.n	8001a18 <_svfiprintf_r+0x130>
 8001a8c:	9105      	str	r1, [sp, #20]
 8001a8e:	e7c3      	b.n	8001a18 <_svfiprintf_r+0x130>
 8001a90:	4604      	mov	r4, r0
 8001a92:	2301      	movs	r3, #1
 8001a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a98:	e7f0      	b.n	8001a7c <_svfiprintf_r+0x194>
 8001a9a:	ab03      	add	r3, sp, #12
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	462a      	mov	r2, r5
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_svfiprintf_r+0x1fc>)
 8001aa4:	a904      	add	r1, sp, #16
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	1c42      	adds	r2, r0, #1
 8001aac:	4606      	mov	r6, r0
 8001aae:	d1d6      	bne.n	8001a5e <_svfiprintf_r+0x176>
 8001ab0:	89ab      	ldrh	r3, [r5, #12]
 8001ab2:	065b      	lsls	r3, r3, #25
 8001ab4:	f53f af2c 	bmi.w	8001910 <_svfiprintf_r+0x28>
 8001ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001aba:	b01d      	add	sp, #116	; 0x74
 8001abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ac0:	ab03      	add	r3, sp, #12
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <_svfiprintf_r+0x1fc>)
 8001aca:	a904      	add	r1, sp, #16
 8001acc:	f000 f87c 	bl	8001bc8 <_printf_i>
 8001ad0:	e7eb      	b.n	8001aaa <_svfiprintf_r+0x1c2>
 8001ad2:	bf00      	nop
 8001ad4:	08002170 	.word	0x08002170
 8001ad8:	08002176 	.word	0x08002176
 8001adc:	0800217a 	.word	0x0800217a
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	08001831 	.word	0x08001831

08001ae8 <_printf_common>:
 8001ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aec:	4616      	mov	r6, r2
 8001aee:	4699      	mov	r9, r3
 8001af0:	688a      	ldr	r2, [r1, #8]
 8001af2:	690b      	ldr	r3, [r1, #16]
 8001af4:	4607      	mov	r7, r0
 8001af6:	4293      	cmp	r3, r2
 8001af8:	bfb8      	it	lt
 8001afa:	4613      	movlt	r3, r2
 8001afc:	6033      	str	r3, [r6, #0]
 8001afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b02:	460c      	mov	r4, r1
 8001b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b08:	b10a      	cbz	r2, 8001b0e <_printf_common+0x26>
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	6033      	str	r3, [r6, #0]
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	0699      	lsls	r1, r3, #26
 8001b12:	bf42      	ittt	mi
 8001b14:	6833      	ldrmi	r3, [r6, #0]
 8001b16:	3302      	addmi	r3, #2
 8001b18:	6033      	strmi	r3, [r6, #0]
 8001b1a:	6825      	ldr	r5, [r4, #0]
 8001b1c:	f015 0506 	ands.w	r5, r5, #6
 8001b20:	d106      	bne.n	8001b30 <_printf_common+0x48>
 8001b22:	f104 0a19 	add.w	sl, r4, #25
 8001b26:	68e3      	ldr	r3, [r4, #12]
 8001b28:	6832      	ldr	r2, [r6, #0]
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	dc28      	bgt.n	8001b82 <_printf_common+0x9a>
 8001b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b34:	1e13      	subs	r3, r2, #0
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	bf18      	it	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	0692      	lsls	r2, r2, #26
 8001b3e:	d42d      	bmi.n	8001b9c <_printf_common+0xb4>
 8001b40:	4649      	mov	r1, r9
 8001b42:	4638      	mov	r0, r7
 8001b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b48:	47c0      	blx	r8
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	d020      	beq.n	8001b90 <_printf_common+0xa8>
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	68e5      	ldr	r5, [r4, #12]
 8001b52:	f003 0306 	and.w	r3, r3, #6
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf18      	it	ne
 8001b5a:	2500      	movne	r5, #0
 8001b5c:	6832      	ldr	r2, [r6, #0]
 8001b5e:	f04f 0600 	mov.w	r6, #0
 8001b62:	68a3      	ldr	r3, [r4, #8]
 8001b64:	bf08      	it	eq
 8001b66:	1aad      	subeq	r5, r5, r2
 8001b68:	6922      	ldr	r2, [r4, #16]
 8001b6a:	bf08      	it	eq
 8001b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bfc4      	itt	gt
 8001b74:	1a9b      	subgt	r3, r3, r2
 8001b76:	18ed      	addgt	r5, r5, r3
 8001b78:	341a      	adds	r4, #26
 8001b7a:	42b5      	cmp	r5, r6
 8001b7c:	d11a      	bne.n	8001bb4 <_printf_common+0xcc>
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e008      	b.n	8001b94 <_printf_common+0xac>
 8001b82:	2301      	movs	r3, #1
 8001b84:	4652      	mov	r2, sl
 8001b86:	4649      	mov	r1, r9
 8001b88:	4638      	mov	r0, r7
 8001b8a:	47c0      	blx	r8
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d103      	bne.n	8001b98 <_printf_common+0xb0>
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b98:	3501      	adds	r5, #1
 8001b9a:	e7c4      	b.n	8001b26 <_printf_common+0x3e>
 8001b9c:	2030      	movs	r0, #48	; 0x30
 8001b9e:	18e1      	adds	r1, r4, r3
 8001ba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001baa:	4422      	add	r2, r4
 8001bac:	3302      	adds	r3, #2
 8001bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bb2:	e7c5      	b.n	8001b40 <_printf_common+0x58>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	4649      	mov	r1, r9
 8001bba:	4638      	mov	r0, r7
 8001bbc:	47c0      	blx	r8
 8001bbe:	3001      	adds	r0, #1
 8001bc0:	d0e6      	beq.n	8001b90 <_printf_common+0xa8>
 8001bc2:	3601      	adds	r6, #1
 8001bc4:	e7d9      	b.n	8001b7a <_printf_common+0x92>
	...

08001bc8 <_printf_i>:
 8001bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bcc:	7e0f      	ldrb	r7, [r1, #24]
 8001bce:	4691      	mov	r9, r2
 8001bd0:	2f78      	cmp	r7, #120	; 0x78
 8001bd2:	4680      	mov	r8, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001bde:	d807      	bhi.n	8001bf0 <_printf_i+0x28>
 8001be0:	2f62      	cmp	r7, #98	; 0x62
 8001be2:	d80a      	bhi.n	8001bfa <_printf_i+0x32>
 8001be4:	2f00      	cmp	r7, #0
 8001be6:	f000 80d9 	beq.w	8001d9c <_printf_i+0x1d4>
 8001bea:	2f58      	cmp	r7, #88	; 0x58
 8001bec:	f000 80a4 	beq.w	8001d38 <_printf_i+0x170>
 8001bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001bf8:	e03a      	b.n	8001c70 <_printf_i+0xa8>
 8001bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bfe:	2b15      	cmp	r3, #21
 8001c00:	d8f6      	bhi.n	8001bf0 <_printf_i+0x28>
 8001c02:	a101      	add	r1, pc, #4	; (adr r1, 8001c08 <_printf_i+0x40>)
 8001c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c08:	08001c61 	.word	0x08001c61
 8001c0c:	08001c75 	.word	0x08001c75
 8001c10:	08001bf1 	.word	0x08001bf1
 8001c14:	08001bf1 	.word	0x08001bf1
 8001c18:	08001bf1 	.word	0x08001bf1
 8001c1c:	08001bf1 	.word	0x08001bf1
 8001c20:	08001c75 	.word	0x08001c75
 8001c24:	08001bf1 	.word	0x08001bf1
 8001c28:	08001bf1 	.word	0x08001bf1
 8001c2c:	08001bf1 	.word	0x08001bf1
 8001c30:	08001bf1 	.word	0x08001bf1
 8001c34:	08001d83 	.word	0x08001d83
 8001c38:	08001ca5 	.word	0x08001ca5
 8001c3c:	08001d65 	.word	0x08001d65
 8001c40:	08001bf1 	.word	0x08001bf1
 8001c44:	08001bf1 	.word	0x08001bf1
 8001c48:	08001da5 	.word	0x08001da5
 8001c4c:	08001bf1 	.word	0x08001bf1
 8001c50:	08001ca5 	.word	0x08001ca5
 8001c54:	08001bf1 	.word	0x08001bf1
 8001c58:	08001bf1 	.word	0x08001bf1
 8001c5c:	08001d6d 	.word	0x08001d6d
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	1d1a      	adds	r2, r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	602a      	str	r2, [r5, #0]
 8001c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0a4      	b.n	8001dbe <_printf_i+0x1f6>
 8001c74:	6820      	ldr	r0, [r4, #0]
 8001c76:	6829      	ldr	r1, [r5, #0]
 8001c78:	0606      	lsls	r6, r0, #24
 8001c7a:	f101 0304 	add.w	r3, r1, #4
 8001c7e:	d50a      	bpl.n	8001c96 <_printf_i+0xce>
 8001c80:	680e      	ldr	r6, [r1, #0]
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	2e00      	cmp	r6, #0
 8001c86:	da03      	bge.n	8001c90 <_printf_i+0xc8>
 8001c88:	232d      	movs	r3, #45	; 0x2d
 8001c8a:	4276      	negs	r6, r6
 8001c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c90:	230a      	movs	r3, #10
 8001c92:	485e      	ldr	r0, [pc, #376]	; (8001e0c <_printf_i+0x244>)
 8001c94:	e019      	b.n	8001cca <_printf_i+0x102>
 8001c96:	680e      	ldr	r6, [r1, #0]
 8001c98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	bf18      	it	ne
 8001ca0:	b236      	sxthne	r6, r6
 8001ca2:	e7ef      	b.n	8001c84 <_printf_i+0xbc>
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	6820      	ldr	r0, [r4, #0]
 8001ca8:	1d19      	adds	r1, r3, #4
 8001caa:	6029      	str	r1, [r5, #0]
 8001cac:	0601      	lsls	r1, r0, #24
 8001cae:	d501      	bpl.n	8001cb4 <_printf_i+0xec>
 8001cb0:	681e      	ldr	r6, [r3, #0]
 8001cb2:	e002      	b.n	8001cba <_printf_i+0xf2>
 8001cb4:	0646      	lsls	r6, r0, #25
 8001cb6:	d5fb      	bpl.n	8001cb0 <_printf_i+0xe8>
 8001cb8:	881e      	ldrh	r6, [r3, #0]
 8001cba:	2f6f      	cmp	r7, #111	; 0x6f
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2308      	moveq	r3, #8
 8001cc0:	230a      	movne	r3, #10
 8001cc2:	4852      	ldr	r0, [pc, #328]	; (8001e0c <_printf_i+0x244>)
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cca:	6865      	ldr	r5, [r4, #4]
 8001ccc:	2d00      	cmp	r5, #0
 8001cce:	bfa8      	it	ge
 8001cd0:	6821      	ldrge	r1, [r4, #0]
 8001cd2:	60a5      	str	r5, [r4, #8]
 8001cd4:	bfa4      	itt	ge
 8001cd6:	f021 0104 	bicge.w	r1, r1, #4
 8001cda:	6021      	strge	r1, [r4, #0]
 8001cdc:	b90e      	cbnz	r6, 8001ce2 <_printf_i+0x11a>
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	d04d      	beq.n	8001d7e <_printf_i+0x1b6>
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ce8:	fb03 6711 	mls	r7, r3, r1, r6
 8001cec:	5dc7      	ldrb	r7, [r0, r7]
 8001cee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001cf2:	4637      	mov	r7, r6
 8001cf4:	42bb      	cmp	r3, r7
 8001cf6:	460e      	mov	r6, r1
 8001cf8:	d9f4      	bls.n	8001ce4 <_printf_i+0x11c>
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d10b      	bne.n	8001d16 <_printf_i+0x14e>
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	07de      	lsls	r6, r3, #31
 8001d02:	d508      	bpl.n	8001d16 <_printf_i+0x14e>
 8001d04:	6923      	ldr	r3, [r4, #16]
 8001d06:	6861      	ldr	r1, [r4, #4]
 8001d08:	4299      	cmp	r1, r3
 8001d0a:	bfde      	ittt	le
 8001d0c:	2330      	movle	r3, #48	; 0x30
 8001d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d16:	1b52      	subs	r2, r2, r5
 8001d18:	6122      	str	r2, [r4, #16]
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	4640      	mov	r0, r8
 8001d20:	f8cd a000 	str.w	sl, [sp]
 8001d24:	aa03      	add	r2, sp, #12
 8001d26:	f7ff fedf 	bl	8001ae8 <_printf_common>
 8001d2a:	3001      	adds	r0, #1
 8001d2c:	d14c      	bne.n	8001dc8 <_printf_i+0x200>
 8001d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d32:	b004      	add	sp, #16
 8001d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d38:	4834      	ldr	r0, [pc, #208]	; (8001e0c <_printf_i+0x244>)
 8001d3a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001d3e:	6829      	ldr	r1, [r5, #0]
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d46:	6029      	str	r1, [r5, #0]
 8001d48:	061d      	lsls	r5, r3, #24
 8001d4a:	d514      	bpl.n	8001d76 <_printf_i+0x1ae>
 8001d4c:	07df      	lsls	r7, r3, #31
 8001d4e:	bf44      	itt	mi
 8001d50:	f043 0320 	orrmi.w	r3, r3, #32
 8001d54:	6023      	strmi	r3, [r4, #0]
 8001d56:	b91e      	cbnz	r6, 8001d60 <_printf_i+0x198>
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	f023 0320 	bic.w	r3, r3, #32
 8001d5e:	6023      	str	r3, [r4, #0]
 8001d60:	2310      	movs	r3, #16
 8001d62:	e7af      	b.n	8001cc4 <_printf_i+0xfc>
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	6023      	str	r3, [r4, #0]
 8001d6c:	2378      	movs	r3, #120	; 0x78
 8001d6e:	4828      	ldr	r0, [pc, #160]	; (8001e10 <_printf_i+0x248>)
 8001d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d74:	e7e3      	b.n	8001d3e <_printf_i+0x176>
 8001d76:	0659      	lsls	r1, r3, #25
 8001d78:	bf48      	it	mi
 8001d7a:	b2b6      	uxthmi	r6, r6
 8001d7c:	e7e6      	b.n	8001d4c <_printf_i+0x184>
 8001d7e:	4615      	mov	r5, r2
 8001d80:	e7bb      	b.n	8001cfa <_printf_i+0x132>
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	6826      	ldr	r6, [r4, #0]
 8001d86:	1d18      	adds	r0, r3, #4
 8001d88:	6961      	ldr	r1, [r4, #20]
 8001d8a:	6028      	str	r0, [r5, #0]
 8001d8c:	0635      	lsls	r5, r6, #24
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	d501      	bpl.n	8001d96 <_printf_i+0x1ce>
 8001d92:	6019      	str	r1, [r3, #0]
 8001d94:	e002      	b.n	8001d9c <_printf_i+0x1d4>
 8001d96:	0670      	lsls	r0, r6, #25
 8001d98:	d5fb      	bpl.n	8001d92 <_printf_i+0x1ca>
 8001d9a:	8019      	strh	r1, [r3, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4615      	mov	r5, r2
 8001da0:	6123      	str	r3, [r4, #16]
 8001da2:	e7ba      	b.n	8001d1a <_printf_i+0x152>
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	2100      	movs	r1, #0
 8001da8:	1d1a      	adds	r2, r3, #4
 8001daa:	602a      	str	r2, [r5, #0]
 8001dac:	681d      	ldr	r5, [r3, #0]
 8001dae:	6862      	ldr	r2, [r4, #4]
 8001db0:	4628      	mov	r0, r5
 8001db2:	f000 f82f 	bl	8001e14 <memchr>
 8001db6:	b108      	cbz	r0, 8001dbc <_printf_i+0x1f4>
 8001db8:	1b40      	subs	r0, r0, r5
 8001dba:	6060      	str	r0, [r4, #4]
 8001dbc:	6863      	ldr	r3, [r4, #4]
 8001dbe:	6123      	str	r3, [r4, #16]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dc6:	e7a8      	b.n	8001d1a <_printf_i+0x152>
 8001dc8:	462a      	mov	r2, r5
 8001dca:	4649      	mov	r1, r9
 8001dcc:	4640      	mov	r0, r8
 8001dce:	6923      	ldr	r3, [r4, #16]
 8001dd0:	47d0      	blx	sl
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d0ab      	beq.n	8001d2e <_printf_i+0x166>
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	079b      	lsls	r3, r3, #30
 8001dda:	d413      	bmi.n	8001e04 <_printf_i+0x23c>
 8001ddc:	68e0      	ldr	r0, [r4, #12]
 8001dde:	9b03      	ldr	r3, [sp, #12]
 8001de0:	4298      	cmp	r0, r3
 8001de2:	bfb8      	it	lt
 8001de4:	4618      	movlt	r0, r3
 8001de6:	e7a4      	b.n	8001d32 <_printf_i+0x16a>
 8001de8:	2301      	movs	r3, #1
 8001dea:	4632      	mov	r2, r6
 8001dec:	4649      	mov	r1, r9
 8001dee:	4640      	mov	r0, r8
 8001df0:	47d0      	blx	sl
 8001df2:	3001      	adds	r0, #1
 8001df4:	d09b      	beq.n	8001d2e <_printf_i+0x166>
 8001df6:	3501      	adds	r5, #1
 8001df8:	68e3      	ldr	r3, [r4, #12]
 8001dfa:	9903      	ldr	r1, [sp, #12]
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	42ab      	cmp	r3, r5
 8001e00:	dcf2      	bgt.n	8001de8 <_printf_i+0x220>
 8001e02:	e7eb      	b.n	8001ddc <_printf_i+0x214>
 8001e04:	2500      	movs	r5, #0
 8001e06:	f104 0619 	add.w	r6, r4, #25
 8001e0a:	e7f5      	b.n	8001df8 <_printf_i+0x230>
 8001e0c:	08002181 	.word	0x08002181
 8001e10:	08002192 	.word	0x08002192

08001e14 <memchr>:
 8001e14:	4603      	mov	r3, r0
 8001e16:	b510      	push	{r4, lr}
 8001e18:	b2c9      	uxtb	r1, r1
 8001e1a:	4402      	add	r2, r0
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	d101      	bne.n	8001e26 <memchr+0x12>
 8001e22:	2000      	movs	r0, #0
 8001e24:	e003      	b.n	8001e2e <memchr+0x1a>
 8001e26:	7804      	ldrb	r4, [r0, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	428c      	cmp	r4, r1
 8001e2c:	d1f6      	bne.n	8001e1c <memchr+0x8>
 8001e2e:	bd10      	pop	{r4, pc}

08001e30 <memcpy>:
 8001e30:	440a      	add	r2, r1
 8001e32:	4291      	cmp	r1, r2
 8001e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8001e38:	d100      	bne.n	8001e3c <memcpy+0xc>
 8001e3a:	4770      	bx	lr
 8001e3c:	b510      	push	{r4, lr}
 8001e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e42:	4291      	cmp	r1, r2
 8001e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e48:	d1f9      	bne.n	8001e3e <memcpy+0xe>
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <memmove>:
 8001e4c:	4288      	cmp	r0, r1
 8001e4e:	b510      	push	{r4, lr}
 8001e50:	eb01 0402 	add.w	r4, r1, r2
 8001e54:	d902      	bls.n	8001e5c <memmove+0x10>
 8001e56:	4284      	cmp	r4, r0
 8001e58:	4623      	mov	r3, r4
 8001e5a:	d807      	bhi.n	8001e6c <memmove+0x20>
 8001e5c:	1e43      	subs	r3, r0, #1
 8001e5e:	42a1      	cmp	r1, r4
 8001e60:	d008      	beq.n	8001e74 <memmove+0x28>
 8001e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e6a:	e7f8      	b.n	8001e5e <memmove+0x12>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4402      	add	r2, r0
 8001e70:	428a      	cmp	r2, r1
 8001e72:	d100      	bne.n	8001e76 <memmove+0x2a>
 8001e74:	bd10      	pop	{r4, pc}
 8001e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e7e:	e7f7      	b.n	8001e70 <memmove+0x24>

08001e80 <_free_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4605      	mov	r5, r0
 8001e84:	2900      	cmp	r1, #0
 8001e86:	d040      	beq.n	8001f0a <_free_r+0x8a>
 8001e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e8c:	1f0c      	subs	r4, r1, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bfb8      	it	lt
 8001e92:	18e4      	addlt	r4, r4, r3
 8001e94:	f000 f910 	bl	80020b8 <__malloc_lock>
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <_free_r+0x8c>)
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	b933      	cbnz	r3, 8001eac <_free_r+0x2c>
 8001e9e:	6063      	str	r3, [r4, #4]
 8001ea0:	6014      	str	r4, [r2, #0]
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ea8:	f000 b90c 	b.w	80020c4 <__malloc_unlock>
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	d908      	bls.n	8001ec2 <_free_r+0x42>
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	1821      	adds	r1, r4, r0
 8001eb4:	428b      	cmp	r3, r1
 8001eb6:	bf01      	itttt	eq
 8001eb8:	6819      	ldreq	r1, [r3, #0]
 8001eba:	685b      	ldreq	r3, [r3, #4]
 8001ebc:	1809      	addeq	r1, r1, r0
 8001ebe:	6021      	streq	r1, [r4, #0]
 8001ec0:	e7ed      	b.n	8001e9e <_free_r+0x1e>
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	b10b      	cbz	r3, 8001ecc <_free_r+0x4c>
 8001ec8:	42a3      	cmp	r3, r4
 8001eca:	d9fa      	bls.n	8001ec2 <_free_r+0x42>
 8001ecc:	6811      	ldr	r1, [r2, #0]
 8001ece:	1850      	adds	r0, r2, r1
 8001ed0:	42a0      	cmp	r0, r4
 8001ed2:	d10b      	bne.n	8001eec <_free_r+0x6c>
 8001ed4:	6820      	ldr	r0, [r4, #0]
 8001ed6:	4401      	add	r1, r0
 8001ed8:	1850      	adds	r0, r2, r1
 8001eda:	4283      	cmp	r3, r0
 8001edc:	6011      	str	r1, [r2, #0]
 8001ede:	d1e0      	bne.n	8001ea2 <_free_r+0x22>
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4401      	add	r1, r0
 8001ee6:	6011      	str	r1, [r2, #0]
 8001ee8:	6053      	str	r3, [r2, #4]
 8001eea:	e7da      	b.n	8001ea2 <_free_r+0x22>
 8001eec:	d902      	bls.n	8001ef4 <_free_r+0x74>
 8001eee:	230c      	movs	r3, #12
 8001ef0:	602b      	str	r3, [r5, #0]
 8001ef2:	e7d6      	b.n	8001ea2 <_free_r+0x22>
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	1821      	adds	r1, r4, r0
 8001ef8:	428b      	cmp	r3, r1
 8001efa:	bf01      	itttt	eq
 8001efc:	6819      	ldreq	r1, [r3, #0]
 8001efe:	685b      	ldreq	r3, [r3, #4]
 8001f00:	1809      	addeq	r1, r1, r0
 8001f02:	6021      	streq	r1, [r4, #0]
 8001f04:	6063      	str	r3, [r4, #4]
 8001f06:	6054      	str	r4, [r2, #4]
 8001f08:	e7cb      	b.n	8001ea2 <_free_r+0x22>
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
 8001f0c:	20000094 	.word	0x20000094

08001f10 <sbrk_aligned>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4e0e      	ldr	r6, [pc, #56]	; (8001f4c <sbrk_aligned+0x3c>)
 8001f14:	460c      	mov	r4, r1
 8001f16:	6831      	ldr	r1, [r6, #0]
 8001f18:	4605      	mov	r5, r0
 8001f1a:	b911      	cbnz	r1, 8001f22 <sbrk_aligned+0x12>
 8001f1c:	f000 f8bc 	bl	8002098 <_sbrk_r>
 8001f20:	6030      	str	r0, [r6, #0]
 8001f22:	4621      	mov	r1, r4
 8001f24:	4628      	mov	r0, r5
 8001f26:	f000 f8b7 	bl	8002098 <_sbrk_r>
 8001f2a:	1c43      	adds	r3, r0, #1
 8001f2c:	d00a      	beq.n	8001f44 <sbrk_aligned+0x34>
 8001f2e:	1cc4      	adds	r4, r0, #3
 8001f30:	f024 0403 	bic.w	r4, r4, #3
 8001f34:	42a0      	cmp	r0, r4
 8001f36:	d007      	beq.n	8001f48 <sbrk_aligned+0x38>
 8001f38:	1a21      	subs	r1, r4, r0
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f000 f8ac 	bl	8002098 <_sbrk_r>
 8001f40:	3001      	adds	r0, #1
 8001f42:	d101      	bne.n	8001f48 <sbrk_aligned+0x38>
 8001f44:	f04f 34ff 	mov.w	r4, #4294967295
 8001f48:	4620      	mov	r0, r4
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	20000098 	.word	0x20000098

08001f50 <_malloc_r>:
 8001f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f54:	1ccd      	adds	r5, r1, #3
 8001f56:	f025 0503 	bic.w	r5, r5, #3
 8001f5a:	3508      	adds	r5, #8
 8001f5c:	2d0c      	cmp	r5, #12
 8001f5e:	bf38      	it	cc
 8001f60:	250c      	movcc	r5, #12
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	4607      	mov	r7, r0
 8001f66:	db01      	blt.n	8001f6c <_malloc_r+0x1c>
 8001f68:	42a9      	cmp	r1, r5
 8001f6a:	d905      	bls.n	8001f78 <_malloc_r+0x28>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	2600      	movs	r6, #0
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4630      	mov	r0, r6
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f78:	4e2e      	ldr	r6, [pc, #184]	; (8002034 <_malloc_r+0xe4>)
 8001f7a:	f000 f89d 	bl	80020b8 <__malloc_lock>
 8001f7e:	6833      	ldr	r3, [r6, #0]
 8001f80:	461c      	mov	r4, r3
 8001f82:	bb34      	cbnz	r4, 8001fd2 <_malloc_r+0x82>
 8001f84:	4629      	mov	r1, r5
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff ffc2 	bl	8001f10 <sbrk_aligned>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	4604      	mov	r4, r0
 8001f90:	d14d      	bne.n	800202e <_malloc_r+0xde>
 8001f92:	6834      	ldr	r4, [r6, #0]
 8001f94:	4626      	mov	r6, r4
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	d140      	bne.n	800201c <_malloc_r+0xcc>
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	4638      	mov	r0, r7
 8001fa0:	eb04 0803 	add.w	r8, r4, r3
 8001fa4:	f000 f878 	bl	8002098 <_sbrk_r>
 8001fa8:	4580      	cmp	r8, r0
 8001faa:	d13a      	bne.n	8002022 <_malloc_r+0xd2>
 8001fac:	6821      	ldr	r1, [r4, #0]
 8001fae:	3503      	adds	r5, #3
 8001fb0:	1a6d      	subs	r5, r5, r1
 8001fb2:	f025 0503 	bic.w	r5, r5, #3
 8001fb6:	3508      	adds	r5, #8
 8001fb8:	2d0c      	cmp	r5, #12
 8001fba:	bf38      	it	cc
 8001fbc:	250c      	movcc	r5, #12
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7ff ffa5 	bl	8001f10 <sbrk_aligned>
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d02b      	beq.n	8002022 <_malloc_r+0xd2>
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	442b      	add	r3, r5
 8001fce:	6023      	str	r3, [r4, #0]
 8001fd0:	e00e      	b.n	8001ff0 <_malloc_r+0xa0>
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	1b52      	subs	r2, r2, r5
 8001fd6:	d41e      	bmi.n	8002016 <_malloc_r+0xc6>
 8001fd8:	2a0b      	cmp	r2, #11
 8001fda:	d916      	bls.n	800200a <_malloc_r+0xba>
 8001fdc:	1961      	adds	r1, r4, r5
 8001fde:	42a3      	cmp	r3, r4
 8001fe0:	6025      	str	r5, [r4, #0]
 8001fe2:	bf18      	it	ne
 8001fe4:	6059      	strne	r1, [r3, #4]
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	bf08      	it	eq
 8001fea:	6031      	streq	r1, [r6, #0]
 8001fec:	5162      	str	r2, [r4, r5]
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	4638      	mov	r0, r7
 8001ff2:	f104 060b 	add.w	r6, r4, #11
 8001ff6:	f000 f865 	bl	80020c4 <__malloc_unlock>
 8001ffa:	f026 0607 	bic.w	r6, r6, #7
 8001ffe:	1d23      	adds	r3, r4, #4
 8002000:	1af2      	subs	r2, r6, r3
 8002002:	d0b6      	beq.n	8001f72 <_malloc_r+0x22>
 8002004:	1b9b      	subs	r3, r3, r6
 8002006:	50a3      	str	r3, [r4, r2]
 8002008:	e7b3      	b.n	8001f72 <_malloc_r+0x22>
 800200a:	6862      	ldr	r2, [r4, #4]
 800200c:	42a3      	cmp	r3, r4
 800200e:	bf0c      	ite	eq
 8002010:	6032      	streq	r2, [r6, #0]
 8002012:	605a      	strne	r2, [r3, #4]
 8002014:	e7ec      	b.n	8001ff0 <_malloc_r+0xa0>
 8002016:	4623      	mov	r3, r4
 8002018:	6864      	ldr	r4, [r4, #4]
 800201a:	e7b2      	b.n	8001f82 <_malloc_r+0x32>
 800201c:	4634      	mov	r4, r6
 800201e:	6876      	ldr	r6, [r6, #4]
 8002020:	e7b9      	b.n	8001f96 <_malloc_r+0x46>
 8002022:	230c      	movs	r3, #12
 8002024:	4638      	mov	r0, r7
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	f000 f84c 	bl	80020c4 <__malloc_unlock>
 800202c:	e7a1      	b.n	8001f72 <_malloc_r+0x22>
 800202e:	6025      	str	r5, [r4, #0]
 8002030:	e7de      	b.n	8001ff0 <_malloc_r+0xa0>
 8002032:	bf00      	nop
 8002034:	20000094 	.word	0x20000094

08002038 <_realloc_r>:
 8002038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800203c:	4680      	mov	r8, r0
 800203e:	4614      	mov	r4, r2
 8002040:	460e      	mov	r6, r1
 8002042:	b921      	cbnz	r1, 800204e <_realloc_r+0x16>
 8002044:	4611      	mov	r1, r2
 8002046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800204a:	f7ff bf81 	b.w	8001f50 <_malloc_r>
 800204e:	b92a      	cbnz	r2, 800205c <_realloc_r+0x24>
 8002050:	f7ff ff16 	bl	8001e80 <_free_r>
 8002054:	4625      	mov	r5, r4
 8002056:	4628      	mov	r0, r5
 8002058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800205c:	f000 f838 	bl	80020d0 <_malloc_usable_size_r>
 8002060:	4284      	cmp	r4, r0
 8002062:	4607      	mov	r7, r0
 8002064:	d802      	bhi.n	800206c <_realloc_r+0x34>
 8002066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800206a:	d812      	bhi.n	8002092 <_realloc_r+0x5a>
 800206c:	4621      	mov	r1, r4
 800206e:	4640      	mov	r0, r8
 8002070:	f7ff ff6e 	bl	8001f50 <_malloc_r>
 8002074:	4605      	mov	r5, r0
 8002076:	2800      	cmp	r0, #0
 8002078:	d0ed      	beq.n	8002056 <_realloc_r+0x1e>
 800207a:	42bc      	cmp	r4, r7
 800207c:	4622      	mov	r2, r4
 800207e:	4631      	mov	r1, r6
 8002080:	bf28      	it	cs
 8002082:	463a      	movcs	r2, r7
 8002084:	f7ff fed4 	bl	8001e30 <memcpy>
 8002088:	4631      	mov	r1, r6
 800208a:	4640      	mov	r0, r8
 800208c:	f7ff fef8 	bl	8001e80 <_free_r>
 8002090:	e7e1      	b.n	8002056 <_realloc_r+0x1e>
 8002092:	4635      	mov	r5, r6
 8002094:	e7df      	b.n	8002056 <_realloc_r+0x1e>
	...

08002098 <_sbrk_r>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	2300      	movs	r3, #0
 800209c:	4d05      	ldr	r5, [pc, #20]	; (80020b4 <_sbrk_r+0x1c>)
 800209e:	4604      	mov	r4, r0
 80020a0:	4608      	mov	r0, r1
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	f7fe fdce 	bl	8000c44 <_sbrk>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_sbrk_r+0x1a>
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_sbrk_r+0x1a>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	2000009c 	.word	0x2000009c

080020b8 <__malloc_lock>:
 80020b8:	4801      	ldr	r0, [pc, #4]	; (80020c0 <__malloc_lock+0x8>)
 80020ba:	f000 b811 	b.w	80020e0 <__retarget_lock_acquire_recursive>
 80020be:	bf00      	nop
 80020c0:	200000a0 	.word	0x200000a0

080020c4 <__malloc_unlock>:
 80020c4:	4801      	ldr	r0, [pc, #4]	; (80020cc <__malloc_unlock+0x8>)
 80020c6:	f000 b80c 	b.w	80020e2 <__retarget_lock_release_recursive>
 80020ca:	bf00      	nop
 80020cc:	200000a0 	.word	0x200000a0

080020d0 <_malloc_usable_size_r>:
 80020d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020d4:	1f18      	subs	r0, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bfbc      	itt	lt
 80020da:	580b      	ldrlt	r3, [r1, r0]
 80020dc:	18c0      	addlt	r0, r0, r3
 80020de:	4770      	bx	lr

080020e0 <__retarget_lock_acquire_recursive>:
 80020e0:	4770      	bx	lr

080020e2 <__retarget_lock_release_recursive>:
 80020e2:	4770      	bx	lr

080020e4 <_init>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr

080020f0 <_fini>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr
